diff --git a/CMakeLists.txt b/CMakeLists.txt
index a974997..f7e9509 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -13,7 +13,7 @@ if (TESTING OR BENCHMARK)
   include("cmake/3rdparty/Hunter/init.cmake")
   HunterGate(
       URL "https://github.com/soramitsu/soramitsu-hunter/archive/v0.23.257-soramitsu18.tar.gz"
-      SHA1 "db065ce74581f07e552e8bae5ef955100caa1a01"
+      SHA1 "da125eed03642e5a125f38dd6d04708508789035"
   )
 endif ()
 
diff --git a/Cargo.lock b/Cargo.lock
index ee8dbde..a8d48a8 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -34,6 +34,12 @@ version = "1.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"
 
+[[package]]
+name = "bitflags"
+version = "2.4.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "327762f6e5a765692301e5bb513e0d9fef63be86bbc14528052b1cd3e6f03e07"
+
 [[package]]
 name = "cbindgen"
 version = "0.14.3"
@@ -47,7 +53,7 @@ dependencies = [
  "quote",
  "serde",
  "serde_json",
- "syn",
+ "syn 1.0.109",
  "tempfile",
  "toml",
 ]
@@ -72,7 +78,7 @@ checksum = "a0610544180c38b88101fecf2dd634b174a62eef6946f84dfc6a7127512b381c"
 dependencies = [
  "ansi_term",
  "atty",
- "bitflags",
+ "bitflags 1.3.2",
  "strsim",
  "textwrap",
  "unicode-width",
@@ -87,15 +93,9 @@ checksum = "4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn",
+ "syn 1.0.109",
 ]
 
-[[package]]
-name = "either"
-version = "1.8.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "90e5c1c8368803113bf0c9584fc495a58b86dc8a29edbf8fe877d21d9507e797"
-
 [[package]]
 name = "erasure-coding-crust"
 version = "0.2.0"
@@ -107,19 +107,29 @@ dependencies = [
 ]
 
 [[package]]
-name = "fastrand"
-version = "1.8.0"
+name = "errno"
+version = "0.3.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a7a407cfaa3385c4ae6b23e84623d48c2798d06e3e6a1878f7f59f17b3f86499"
+checksum = "a258e46cdc063eb8519c00b9fc845fc47bcfca4130e2f08e88665ceda8474245"
 dependencies = [
- "instant",
+ "libc",
+ "windows-sys 0.52.0",
 ]
 
+[[package]]
+name = "fastrand"
+version = "2.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "25cbce373ec4653f1a01a31e8a5e5ec0c622dc27ff9c4e6606eefef5cbbed4a5"
+
 [[package]]
 name = "fs-err"
-version = "2.9.0"
+version = "2.11.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0845fa252299212f0389d64ba26f34fa32cfe41588355f21ed507c59a0f64541"
+checksum = "88a41f105fe1d5b6b34b2055e3dc59bb79b46b48b2040b9e6c7b4b5de097aa41"
+dependencies = [
+ "autocfg",
+]
 
 [[package]]
 name = "getrandom"
@@ -166,31 +176,28 @@ dependencies = [
 ]
 
 [[package]]
-name = "itertools"
-version = "0.10.5"
+name = "itoa"
+version = "1.0.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473"
-dependencies = [
- "either",
-]
+checksum = "af150ab688ff2122fcef229be89cb50dd66af9e01a4ff320cc137eecc9bacc38"
 
 [[package]]
-name = "itoa"
-version = "1.0.4"
+name = "libc"
+version = "0.2.150"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4217ad341ebadf8d8e724e264f13e593e0648f5b3e94b3896a5df283be015ecc"
+checksum = "89d92a4743f9a61002fae18374ed11e7973f530cb3a3255fb354818118b2203c"
 
 [[package]]
-name = "libc"
-version = "0.2.137"
+name = "linux-raw-sys"
+version = "0.4.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fc7fcc620a3bff7cdd7a365be3376c97191aeaccc2a603e600951e452615bf89"
+checksum = "c4cd1a83af159aa67994778be9070f0ae1bd732942279cabb14f86f986a21456"
 
 [[package]]
 name = "lock_api"
-version = "0.4.9"
+version = "0.4.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "435011366fe56583b16cf956f9df0095b405b82d76425bc8981c0e22e60ec4df"
+checksum = "3c168f8615b12bc01f9c17e2eb0cc07dcae1940121185446edc3744920e8ef45"
 dependencies = [
  "autocfg",
  "scopeguard",
@@ -198,18 +205,15 @@ dependencies = [
 
 [[package]]
 name = "log"
-version = "0.4.17"
+version = "0.4.20"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e"
-dependencies = [
- "cfg-if",
-]
+checksum = "b5e6163cb8c49088c2c36f57875e58ccd8c87c7427f7fbd50ea6710b2f3f2e8f"
 
 [[package]]
 name = "memchr"
-version = "2.5.0"
+version = "2.6.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d"
+checksum = "f665ee40bc4a3c5590afb1e9677db74a508659dfd71e126420da8274909a0167"
 
 [[package]]
 name = "parking_lot"
@@ -224,14 +228,14 @@ dependencies = [
 
 [[package]]
 name = "parking_lot_core"
-version = "0.8.5"
+version = "0.8.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d76e8e1493bcac0d2766c42737f34458f1c8c50c0d23bcb24ea953affb273216"
+checksum = "60a2cfe6f0ad2bfc16aefa463b497d5c7a5ecd44a23efa72aa342d90177356dc"
 dependencies = [
  "cfg-if",
  "instant",
  "libc",
- "redox_syscall",
+ "redox_syscall 0.2.16",
  "smallvec",
  "winapi",
 ]
@@ -244,18 +248,18 @@ checksum = "5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de"
 
 [[package]]
 name = "proc-macro2"
-version = "1.0.47"
+version = "1.0.70"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5ea3d908b0e36316caf9e9e2c4625cdde190a7e6f440d794667ed17a1855e725"
+checksum = "39278fbbf5fb4f646ce651690877f89d1c5811a3d4acb27700c1cb3cdb78fd3b"
 dependencies = [
  "unicode-ident",
 ]
 
 [[package]]
 name = "quote"
-version = "1.0.21"
+version = "1.0.33"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bbe448f377a7d6961e30f5955f9b8d106c3f5e449d493ee1b125c1d43c2b5179"
+checksum = "5267fca4496028628a95160fc423a33e8b2e6af8a5302579e322e4b520293cae"
 dependencies = [
  "proc-macro2",
 ]
@@ -307,68 +311,79 @@ version = "0.2.16"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a"
 dependencies = [
- "bitflags",
+ "bitflags 1.3.2",
 ]
 
 [[package]]
-name = "reed-solomon-novelpoly"
-version = "1.0.0"
+name = "redox_syscall"
+version = "0.4.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3bd8f48b2066e9f69ab192797d66da804d1935bf22763204ed3675740cb0f221"
+checksum = "4722d768eff46b75989dd134e5c353f0d6296e5aaa3132e776cbdb56be7731aa"
+dependencies = [
+ "bitflags 1.3.2",
+]
+
+[[package]]
+name = "reed-solomon-novelpoly"
+version = "1.0.2"
+source = "git+https://github.com/paritytech/reed-solomon-novelpoly.git#e6e641e8b97027e691a7d28cc69a23ed2f3a097b"
 dependencies = [
  "derive_more",
  "fs-err",
- "itertools",
  "static_init",
  "thiserror",
 ]
 
 [[package]]
-name = "remove_dir_all"
-version = "0.5.3"
+name = "rustix"
+version = "0.38.26"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7"
+checksum = "9470c4bf8246c8daf25f9598dca807fb6510347b1e1cfa55749113850c79d88a"
 dependencies = [
- "winapi",
+ "bitflags 2.4.1",
+ "errno",
+ "libc",
+ "linux-raw-sys",
+ "windows-sys 0.52.0",
 ]
 
 [[package]]
 name = "ryu"
-version = "1.0.11"
+version = "1.0.15"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4501abdff3ae82a1c1b477a17252eb69cee9e66eb915c1abaa4f44d873df9f09"
+checksum = "1ad4cc8da4ef723ed60bced201181d83791ad433213d8c24efffda1eec85d741"
 
 [[package]]
 name = "scopeguard"
-version = "1.1.0"
+version = "1.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd"
+checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"
 
 [[package]]
 name = "serde"
-version = "1.0.147"
+version = "1.0.193"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d193d69bae983fc11a79df82342761dfbf28a99fc8d203dca4c3c1b590948965"
+checksum = "25dd9975e68d0cb5aa1120c288333fc98731bd1dd12f561e468ea4728c042b89"
 dependencies = [
  "serde_derive",
 ]
 
 [[package]]
 name = "serde_derive"
-version = "1.0.147"
+version = "1.0.193"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4f1d362ca8fc9c3e3a7484440752472d68a6caa98f1ab81d99b5dfe517cec852"
+checksum = "43576ca501357b9b071ac53cdc7da8ef0cbd9493d8df094cd821777ea6e894d3"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn",
+ "syn 2.0.39",
 ]
 
 [[package]]
 name = "serde_json"
-version = "1.0.87"
+version = "1.0.108"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6ce777b7b150d76b9cf60d28b55f5847135a003f7d7350c6be7a773508ce7d45"
+checksum = "3d1c7e3eac408d115102c4c24ad393e0821bb3a5df4d506a80f85f7a742a526b"
 dependencies = [
  "itoa",
  "ryu",
@@ -377,33 +392,36 @@ dependencies = [
 
 [[package]]
 name = "smallvec"
-version = "1.10.0"
+version = "1.11.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a507befe795404456341dfab10cef66ead4c041f62b8b11bbb92bffe5d0953e0"
+checksum = "4dccd0940a2dcdf68d092b8cbab7dc0ad8fa938bf95787e1b916b0e3d0e8e970"
 
 [[package]]
 name = "static_init"
-version = "0.5.2"
+version = "1.0.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "11b73400442027c4adedda20a9f9b7945234a5bd8d5f7e86da22bd5d0622369c"
+checksum = "8a2a1c578e98c1c16fc3b8ec1328f7659a500737d7a0c6d625e73e830ff9c1f6"
 dependencies = [
+ "bitflags 1.3.2",
  "cfg_aliases",
  "libc",
  "parking_lot",
+ "parking_lot_core",
  "static_init_macro",
+ "winapi",
 ]
 
 [[package]]
 name = "static_init_macro"
-version = "0.5.0"
+version = "1.0.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f2261c91034a1edc3fc4d1b80e89d82714faede0515c14a75da10cb941546bbf"
+checksum = "70a2595fc3aa78f2d0e45dd425b22282dd863273761cc77780914b2cf3003acf"
 dependencies = [
  "cfg_aliases",
  "memchr",
  "proc-macro2",
  "quote",
- "syn",
+ "syn 1.0.109",
 ]
 
 [[package]]
@@ -414,9 +432,20 @@ checksum = "8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a"
 
 [[package]]
 name = "syn"
-version = "1.0.103"
+version = "1.0.109"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "unicode-ident",
+]
+
+[[package]]
+name = "syn"
+version = "2.0.39"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a864042229133ada95abf3b54fdc62ef5ccabe9515b64717bcb9a1919e59445d"
+checksum = "23e78b90f2fcf45d3e842032ce32e3f2d1545ba6636271dcbf24fa306d87be7a"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -425,16 +454,15 @@ dependencies = [
 
 [[package]]
 name = "tempfile"
-version = "3.3.0"
+version = "3.8.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5cdb1ef4eaeeaddc8fbd371e5017057064af0911902ef36b39801f67cc6d79e4"
+checksum = "7ef1adac450ad7f4b3c28589471ade84f25f731a7a0fe30d71dfa9f60fd808e5"
 dependencies = [
  "cfg-if",
  "fastrand",
- "libc",
- "redox_syscall",
- "remove_dir_all",
- "winapi",
+ "redox_syscall 0.4.1",
+ "rustix",
+ "windows-sys 0.48.0",
 ]
 
 [[package]]
@@ -448,50 +476,50 @@ dependencies = [
 
 [[package]]
 name = "thiserror"
-version = "1.0.37"
+version = "1.0.50"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "10deb33631e3c9018b9baf9dcbbc4f737320d2b576bac10f6aefa048fa407e3e"
+checksum = "f9a7210f5c9a7156bb50aa36aed4c95afb51df0df00713949448cf9e97d382d2"
 dependencies = [
  "thiserror-impl",
 ]
 
 [[package]]
 name = "thiserror-impl"
-version = "1.0.37"
+version = "1.0.50"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "982d17546b47146b28f7c22e3d08465f6b8903d0ea13c1660d9d84a6e7adcdbb"
+checksum = "266b2e40bc00e5a6c09c3584011e08b06f123c00362c92b975ba9843aaaa14b8"
 dependencies = [
  "proc-macro2",
  "quote",
- "syn",
+ "syn 2.0.39",
 ]
 
 [[package]]
 name = "toml"
-version = "0.5.9"
+version = "0.5.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8d82e1a7758622a465f8cee077614c73484dac5b836c02ff6a40d5d1010324d7"
+checksum = "f4f7f0dd8d50a853a531c426359045b1998f04219d88799810762cd4ad314234"
 dependencies = [
  "serde",
 ]
 
 [[package]]
 name = "unicode-ident"
-version = "1.0.5"
+version = "1.0.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6ceab39d59e4c9499d4e5a8ee0e2735b891bb7308ac83dfb4e80cad195c9f6f3"
+checksum = "3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b"
 
 [[package]]
 name = "unicode-segmentation"
-version = "1.10.0"
+version = "1.10.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0fdbf052a0783de01e944a6ce7a8cb939e295b1e7be835a1112c3b9a7f047a5a"
+checksum = "1dd624098567895118886609431a7c3b8f516e41d30e0643f03d94592a147e36"
 
 [[package]]
 name = "unicode-width"
-version = "0.1.10"
+version = "0.1.11"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c0edd1e5b14653f783770bce4a4dabb4a5108a5370a5f5d8cfe8710c361f6c8b"
+checksum = "e51733f11c9c4f72aa0c160008246859e340b00807569a0da0e7a1079b27ba85"
 
 [[package]]
 name = "vec_map"
@@ -526,3 +554,135 @@ name = "winapi-x86_64-pc-windows-gnu"
 version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "windows-sys"
+version = "0.48.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9"
+dependencies = [
+ "windows-targets 0.48.5",
+]
+
+[[package]]
+name = "windows-sys"
+version = "0.52.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d"
+dependencies = [
+ "windows-targets 0.52.0",
+]
+
+[[package]]
+name = "windows-targets"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c"
+dependencies = [
+ "windows_aarch64_gnullvm 0.48.5",
+ "windows_aarch64_msvc 0.48.5",
+ "windows_i686_gnu 0.48.5",
+ "windows_i686_msvc 0.48.5",
+ "windows_x86_64_gnu 0.48.5",
+ "windows_x86_64_gnullvm 0.48.5",
+ "windows_x86_64_msvc 0.48.5",
+]
+
+[[package]]
+name = "windows-targets"
+version = "0.52.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8a18201040b24831fbb9e4eb208f8892e1f50a37feb53cc7ff887feb8f50e7cd"
+dependencies = [
+ "windows_aarch64_gnullvm 0.52.0",
+ "windows_aarch64_msvc 0.52.0",
+ "windows_i686_gnu 0.52.0",
+ "windows_i686_msvc 0.52.0",
+ "windows_x86_64_gnu 0.52.0",
+ "windows_x86_64_gnullvm 0.52.0",
+ "windows_x86_64_msvc 0.52.0",
+]
+
+[[package]]
+name = "windows_aarch64_gnullvm"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8"
+
+[[package]]
+name = "windows_aarch64_gnullvm"
+version = "0.52.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cb7764e35d4db8a7921e09562a0304bf2f93e0a51bfccee0bd0bb0b666b015ea"
+
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc"
+
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.52.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bbaa0368d4f1d2aaefc55b6fcfee13f41544ddf36801e793edbbfd7d7df075ef"
+
+[[package]]
+name = "windows_i686_gnu"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e"
+
+[[package]]
+name = "windows_i686_gnu"
+version = "0.52.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a28637cb1fa3560a16915793afb20081aba2c92ee8af57b4d5f28e4b3e7df313"
+
+[[package]]
+name = "windows_i686_msvc"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406"
+
+[[package]]
+name = "windows_i686_msvc"
+version = "0.52.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ffe5e8e31046ce6230cc7215707b816e339ff4d4d67c65dffa206fd0f7aa7b9a"
+
+[[package]]
+name = "windows_x86_64_gnu"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e"
+
+[[package]]
+name = "windows_x86_64_gnu"
+version = "0.52.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3d6fa32db2bc4a2f5abeacf2b69f7992cd09dca97498da74a151a3132c26befd"
+
+[[package]]
+name = "windows_x86_64_gnullvm"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc"
+
+[[package]]
+name = "windows_x86_64_gnullvm"
+version = "0.52.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1a657e1e9d3f514745a572a6846d3c7aa7dbe1658c056ed9c3344c4109a6949e"
+
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.48.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538"
+
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.52.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dff9641d1cd4be8d1a070daf9e3773c5f67e78b4d9d42263020c057706765c04"
diff --git a/Cargo.toml b/Cargo.toml
index 448ea19..f8fa5c8 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -10,7 +10,8 @@ name = "erasure_coding_crust"
 crate-type = ["cdylib", "staticlib"]
 
 [dependencies]
-novelpoly = { package = "reed-solomon-novelpoly", version = "1.0.0" }
+novelpoly = { git = "https://github.com/paritytech/reed-solomon-novelpoly.git", package = "reed-solomon-novelpoly" }
+# novelpoly = { path = "/home/alin/code/reed-solomon-novelpoly/reed-solomon-novelpoly", package = "reed-solomon-novelpoly" }
 
 [dev-dependencies]
 hex-literal = "0.3.1"
@@ -18,3 +19,7 @@ rand = "0.7"
 
 [build-dependencies]
 cbindgen = "0.14.0"
+
+[profile.release]
+lto = true
+codegen-units = 1
diff --git a/benchmark/benchmark.cpp b/benchmark/benchmark.cpp
index ecf1e94..15fc805 100644
--- a/benchmark/benchmark.cpp
+++ b/benchmark/benchmark.cpp
@@ -5,83 +5,104 @@
 
 #include <ec-cpp/ec-cpp.hpp>
 
-extern "C" {
+extern "C"
+{
 #include <erasure_coding/erasure_coding.h>
 }
 
 static constexpr std::string_view test_data =
     "This is a test string. The purpose of it is not allow the evil forces to "
     "conquer the world!";
-static constexpr uint64_t n_validators = 6ull;
+static constexpr uint64_t n_validators = 1000ull;
 
-class TicToc {
-  std::chrono::time_point<std::chrono::high_resolution_clock> t_;
+class TicToc
+{
+  std::chrono::time_point<std::chrono::steady_clock> t_;
 
 public:
   TicToc(std::string &&) = delete;
   TicToc(std::string const &) = delete;
-  TicToc() { t_ = std::chrono::high_resolution_clock::now(); }
+  TicToc() { t_ = std::chrono::steady_clock::now(); }
 
-  auto toc() {
+  auto toc()
+  {
     auto prev = t_;
-    t_ = std::chrono::high_resolution_clock::now();
+    t_ = std::chrono::steady_clock::now();
     return std::chrono::duration_cast<std::chrono::microseconds>(t_ - prev);
   }
 
   ~TicToc() {}
 };
 
-void Cpp_Measures() {
-  std::string test_data[6];
+void Cpp_Measures()
+{
+  std::string test_data[8];
   test_data[0].reserve(1ull);
   test_data[1].reserve(300ull);
   test_data[2].reserve(5ull * 1000ull);
   test_data[3].reserve(100ull * 1000ull);
   test_data[4].reserve(1ull * 1000ull * 1000ull);
-  test_data[5].reserve(10ull * 1000ull * 1000ull);
+  test_data[5].reserve(25ull * 1000ull * 100ull);
+  test_data[6].reserve(5ull * 1000ull * 1000ull);
+  test_data[7].reserve(10ull * 1000ull * 1000ull);
+
+  srand((unsigned)time(NULL));
 
   for (auto &t : test_data)
     for (size_t i = 0; i < t.capacity(); ++i)
+    {
+      int random = rand();
       t += char(97 + (i % 24));
+    }
 
-  constexpr size_t kMeasureCount = 100ull;
-  auto printout = [&](std::string_view name, std::chrono::microseconds val) {
-    if (val.count() > 5'000'000) {
+  constexpr size_t kMeasureCount = 10ull;
+  auto printout = [&](std::string_view name, std::chrono::microseconds val)
+  {
+    if (val.count() > 5'000'000)
+    {
       std::cout << name << " (" << kMeasureCount
                 << " cycles): " << float(val.count()) / 1'000'000.0f << " s"
                 << std::endl;
-    } else if (val.count() > 5'000) {
+    }
+    else if (val.count() > 5'000)
+    {
       std::cout << name << " (" << kMeasureCount
                 << " cycles): " << float(val.count()) / 1'000.0f << " ms"
                 << std::endl;
-    } else {
+    }
+    else
+    {
       std::cout << name << " (" << kMeasureCount << " cycles): " << val.count()
                 << " us" << std::endl;
     }
   };
 
-  for (auto const &t : test_data) {
+  for (auto const &t : test_data)
+  {
+    std::cout << "~~~ [ Benchmark case: " << t.size() << " bytes ] ~~~"
+              << std::endl;
     {
       std::chrono::microseconds measured_enc{};
       std::chrono::microseconds measured_dec{};
 
-      for (size_t i = 0ull; i < kMeasureCount; ++i) {
-        uint64_t enc_time, dec_time;
+      for (size_t i = 0ull; i < kMeasureCount; ++i)
+      {
+        unsigned long enc_time, dec_time;
         DataBlock data{.array = (uint8_t *)t.data(), .length = t.size()};
         ECCR_Test_MeasurePerformance(&data, n_validators, &enc_time, &dec_time);
 
         measured_enc += std::chrono::microseconds(enc_time);
         measured_dec += std::chrono::microseconds(dec_time);
       }
-      std::cout << "~~~ [ Benchmark case: " << t.size() << " bytes ] ~~~"
-                << std::endl;
+
       printout("Encode RUST", measured_enc);
       printout("Decode RUST", measured_dec);
     }
     {
       std::chrono::microseconds measured_enc{};
       std::chrono::microseconds measured_dec{};
-      for (size_t i = 0ull; i < kMeasureCount; ++i) {
+      for (size_t i = 0ull; i < kMeasureCount; ++i)
+      {
         auto enc_create_result = ec_cpp::create(n_validators);
         auto encoder = ec_cpp::resultGetValue(std::move(enc_create_result));
         std::vector<ec_cpp::ReedSolomon<ec_cpp::PolyEncoder_f2e16>::Shard>
@@ -95,6 +116,12 @@ void Cpp_Measures() {
           shards = ec_cpp::resultGetValue(std::move(enc_result));
         }
         { /// decode
+          size_t threshold = ec_cpp::resultGetValue(std::move(ec_cpp::getRecoveryThreshold(n_validators)));
+          // std::vector<ec_cpp::ReedSolomon<ec_cpp::PolyEncoder_f2e16>::Shard> new_shards;
+          // for (auto i = threshold; i <= (threshold * 2); i++)
+          // {
+          //   new_shards.push_back(shards[i]);
+          // }
           TicToc m;
           decoded = encoder.reconstruct(shards);
           measured_dec += m.toc();
@@ -102,12 +129,14 @@ void Cpp_Measures() {
       }
       printout("Encode C++", measured_enc);
       printout("Decode C++", measured_dec);
-      std::cout << std::endl;
     }
+
+    std::cout << std::endl;
   }
 }
 
-int main() {
+int main()
+{
   Cpp_Measures();
   return 0;
 }
\ No newline at end of file
diff --git a/bindings.rs b/bindings.rs
new file mode 100644
index 0000000..3217cc9
--- /dev/null
+++ b/bindings.rs
@@ -0,0 +1,708 @@
+/* automatically generated by rust-bindgen 0.69.1 */
+
+pub const _GLIBCXX_CSTDINT: u32 = 1;
+pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
+pub const _GLIBCXX_RELEASE: u32 = 11;
+pub const __GLIBCXX__: u32 = 20230528;
+pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
+pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
+pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
+pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
+pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
+pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
+pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
+pub const _GLIBCXX_OS_DEFINES: u32 = 1;
+pub const __NO_CTYPE: u32 = 1;
+pub const _FEATURES_H: u32 = 1;
+pub const _ISOC95_SOURCE: u32 = 1;
+pub const _ISOC99_SOURCE: u32 = 1;
+pub const _ISOC11_SOURCE: u32 = 1;
+pub const _ISOC2X_SOURCE: u32 = 1;
+pub const _POSIX_SOURCE: u32 = 1;
+pub const _POSIX_C_SOURCE: u32 = 200809;
+pub const _XOPEN_SOURCE: u32 = 700;
+pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
+pub const _LARGEFILE64_SOURCE: u32 = 1;
+pub const _DEFAULT_SOURCE: u32 = 1;
+pub const _ATFILE_SOURCE: u32 = 1;
+pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
+pub const __GLIBC_USE_ISOC2X: u32 = 1;
+pub const __USE_ISOC11: u32 = 1;
+pub const __USE_ISOC99: u32 = 1;
+pub const __USE_ISOC95: u32 = 1;
+pub const __USE_ISOCXX11: u32 = 1;
+pub const __USE_POSIX: u32 = 1;
+pub const __USE_POSIX2: u32 = 1;
+pub const __USE_POSIX199309: u32 = 1;
+pub const __USE_POSIX199506: u32 = 1;
+pub const __USE_XOPEN2K: u32 = 1;
+pub const __USE_XOPEN2K8: u32 = 1;
+pub const __USE_XOPEN: u32 = 1;
+pub const __USE_XOPEN_EXTENDED: u32 = 1;
+pub const __USE_UNIX98: u32 = 1;
+pub const _LARGEFILE_SOURCE: u32 = 1;
+pub const __USE_XOPEN2K8XSI: u32 = 1;
+pub const __USE_XOPEN2KXSI: u32 = 1;
+pub const __USE_LARGEFILE: u32 = 1;
+pub const __USE_LARGEFILE64: u32 = 1;
+pub const __WORDSIZE: u32 = 64;
+pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
+pub const __SYSCALL_WORDSIZE: u32 = 64;
+pub const __TIMESIZE: u32 = 64;
+pub const __USE_MISC: u32 = 1;
+pub const __USE_ATFILE: u32 = 1;
+pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
+pub const __USE_GNU: u32 = 1;
+pub const __USE_FORTIFY_LEVEL: u32 = 0;
+pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
+pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
+pub const _STDC_PREDEF_H: u32 = 1;
+pub const __STDC_IEC_559__: u32 = 1;
+pub const __STDC_IEC_60559_BFP__: u32 = 201404;
+pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
+pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
+pub const __STDC_ISO_10646__: u32 = 201706;
+pub const __GNU_LIBRARY__: u32 = 6;
+pub const __GLIBC__: u32 = 2;
+pub const __GLIBC_MINOR__: u32 = 35;
+pub const _SYS_CDEFS_H: u32 = 1;
+pub const __glibc_c99_flexarr_available: u32 = 1;
+pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
+pub const __HAVE_GENERIC_SELECTION: u32 = 0;
+pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
+pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
+pub const _GLIBCXX_FAST_MATH: u32 = 0;
+pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
+pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
+pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
+pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
+pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
+pub const _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED: u32 = 1;
+pub const _GLIBCXX_HAVE_BUILTIN_IS_SAME: u32 = 1;
+pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
+pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
+pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
+pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
+pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
+pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
+pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
+pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
+pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
+pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
+pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
+pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
+pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
+pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
+pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
+pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
+pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
+pub const _GLIBCXX_HAVE_COSF: u32 = 1;
+pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
+pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
+pub const _GLIBCXX_HAVE_COSL: u32 = 1;
+pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
+pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
+pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
+pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
+pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
+pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
+pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
+pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
+pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
+pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
+pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
+pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
+pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
+pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
+pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
+pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
+pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
+pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
+pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
+pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
+pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
+pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
+pub const _GLIBCXX_HAVE_GETS: u32 = 1;
+pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
+pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
+pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
+pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
+pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
+pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
+pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
+pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
+pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
+pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
+pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
+pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
+pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
+pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
+pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
+pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
+pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
+pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
+pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
+pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
+pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
+pub const _GLIBCXX_HAVE_LINK: u32 = 1;
+pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
+pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
+pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
+pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
+pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
+pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
+pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
+pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
+pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
+pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
+pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
+pub const _GLIBCXX_HAVE_MODF: u32 = 1;
+pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
+pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
+pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
+pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
+pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
+pub const _GLIBCXX_HAVE_POLL: u32 = 1;
+pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
+pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
+pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
+pub const _GLIBCXX_HAVE_POWF: u32 = 1;
+pub const _GLIBCXX_HAVE_POWL: u32 = 1;
+pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
+pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
+pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
+pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
+pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
+pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
+pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
+pub const _GLIBCXX_HAVE_SINF: u32 = 1;
+pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
+pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
+pub const _GLIBCXX_HAVE_SINL: u32 = 1;
+pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
+pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
+pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
+pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
+pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
+pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
+pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
+pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
+pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
+pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
+pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
+pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
+pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
+pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
+pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
+pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
+pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
+pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
+pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
+pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
+pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
+pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
+pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
+pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
+pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
+pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
+pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
+pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
+pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
+pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
+pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
+pub const _GLIBCXX_HAVE_TANF: u32 = 1;
+pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
+pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
+pub const _GLIBCXX_HAVE_TANL: u32 = 1;
+pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
+pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
+pub const _GLIBCXX_HAVE_TLS: u32 = 1;
+pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
+pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
+pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
+pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
+pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
+pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
+pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
+pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
+pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
+pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
+pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
+pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
+pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
+pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
+pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
+pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
+pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
+pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
+pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
+pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
+pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
+pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
+pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
+pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
+pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
+pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
+pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
+pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
+pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
+pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
+pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
+pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
+pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
+pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
+pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
+pub const _GLIBCXX_HOSTED: u32 = 1;
+pub const _GLIBCXX_RES_LIMITS: u32 = 1;
+pub const _GLIBCXX_STDIO_EOF: i32 = -1;
+pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
+pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
+pub const _GLIBCXX_SYMVER: u32 = 1;
+pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
+pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
+pub const _GLIBCXX_USE_C99: u32 = 1;
+pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
+pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
+pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
+pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
+pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
+pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
+pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
+pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
+pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
+pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
+pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
+pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
+pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
+pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
+pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
+pub const _GLIBCXX_USE_INT128: u32 = 1;
+pub const _GLIBCXX_USE_LFS: u32 = 1;
+pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
+pub const _GLIBCXX_USE_LSTAT: u32 = 1;
+pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
+pub const _GLIBCXX_USE_NLS: u32 = 1;
+pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
+pub const _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK: u32 = 1;
+pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
+pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
+pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
+pub const _GLIBCXX_USE_REALPATH: u32 = 1;
+pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
+pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
+pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
+pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
+pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
+pub const _GLIBCXX_USE_UTIME: u32 = 1;
+pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
+pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
+pub const _GLIBCXX_VERBOSE: u32 = 1;
+pub const _GLIBCXX_X86_RDRAND: u32 = 1;
+pub const _GLIBCXX_X86_RDSEED: u32 = 1;
+pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
+pub const _STDINT_H: u32 = 1;
+pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
+pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
+pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
+pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
+pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
+pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
+pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
+pub const _BITS_TYPES_H: u32 = 1;
+pub const _BITS_TYPESIZES_H: u32 = 1;
+pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
+pub const __INO_T_MATCHES_INO64_T: u32 = 1;
+pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
+pub const __STATFS_MATCHES_STATFS64: u32 = 1;
+pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
+pub const __FD_SETSIZE: u32 = 1024;
+pub const _BITS_TIME64_H: u32 = 1;
+pub const _BITS_WCHAR_H: u32 = 1;
+pub const _BITS_STDINT_INTN_H: u32 = 1;
+pub const _BITS_STDINT_UINTN_H: u32 = 1;
+pub const INT8_MIN: i32 = -128;
+pub const INT16_MIN: i32 = -32768;
+pub const INT32_MIN: i32 = -2147483648;
+pub const INT8_MAX: u32 = 127;
+pub const INT16_MAX: u32 = 32767;
+pub const INT32_MAX: u32 = 2147483647;
+pub const UINT8_MAX: u32 = 255;
+pub const UINT16_MAX: u32 = 65535;
+pub const UINT32_MAX: u32 = 4294967295;
+pub const INT_LEAST8_MIN: i32 = -128;
+pub const INT_LEAST16_MIN: i32 = -32768;
+pub const INT_LEAST32_MIN: i32 = -2147483648;
+pub const INT_LEAST8_MAX: u32 = 127;
+pub const INT_LEAST16_MAX: u32 = 32767;
+pub const INT_LEAST32_MAX: u32 = 2147483647;
+pub const UINT_LEAST8_MAX: u32 = 255;
+pub const UINT_LEAST16_MAX: u32 = 65535;
+pub const UINT_LEAST32_MAX: u32 = 4294967295;
+pub const INT_FAST8_MIN: i32 = -128;
+pub const INT_FAST16_MIN: i64 = -9223372036854775808;
+pub const INT_FAST32_MIN: i64 = -9223372036854775808;
+pub const INT_FAST8_MAX: u32 = 127;
+pub const INT_FAST16_MAX: u64 = 9223372036854775807;
+pub const INT_FAST32_MAX: u64 = 9223372036854775807;
+pub const UINT_FAST8_MAX: u32 = 255;
+pub const UINT_FAST16_MAX: i32 = -1;
+pub const UINT_FAST32_MAX: i32 = -1;
+pub const INTPTR_MIN: i64 = -9223372036854775808;
+pub const INTPTR_MAX: u64 = 9223372036854775807;
+pub const UINTPTR_MAX: i32 = -1;
+pub const PTRDIFF_MIN: i64 = -9223372036854775808;
+pub const PTRDIFF_MAX: u64 = 9223372036854775807;
+pub const SIG_ATOMIC_MIN: i32 = -2147483648;
+pub const SIG_ATOMIC_MAX: u32 = 2147483647;
+pub const SIZE_MAX: i32 = -1;
+pub const WINT_MIN: u32 = 0;
+pub const WINT_MAX: u32 = 4294967295;
+pub const INT8_WIDTH: u32 = 8;
+pub const UINT8_WIDTH: u32 = 8;
+pub const INT16_WIDTH: u32 = 16;
+pub const UINT16_WIDTH: u32 = 16;
+pub const INT32_WIDTH: u32 = 32;
+pub const UINT32_WIDTH: u32 = 32;
+pub const INT64_WIDTH: u32 = 64;
+pub const UINT64_WIDTH: u32 = 64;
+pub const INT_LEAST8_WIDTH: u32 = 8;
+pub const UINT_LEAST8_WIDTH: u32 = 8;
+pub const INT_LEAST16_WIDTH: u32 = 16;
+pub const UINT_LEAST16_WIDTH: u32 = 16;
+pub const INT_LEAST32_WIDTH: u32 = 32;
+pub const UINT_LEAST32_WIDTH: u32 = 32;
+pub const INT_LEAST64_WIDTH: u32 = 64;
+pub const UINT_LEAST64_WIDTH: u32 = 64;
+pub const INT_FAST8_WIDTH: u32 = 8;
+pub const UINT_FAST8_WIDTH: u32 = 8;
+pub const INT_FAST16_WIDTH: u32 = 64;
+pub const UINT_FAST16_WIDTH: u32 = 64;
+pub const INT_FAST32_WIDTH: u32 = 64;
+pub const UINT_FAST32_WIDTH: u32 = 64;
+pub const INT_FAST64_WIDTH: u32 = 64;
+pub const UINT_FAST64_WIDTH: u32 = 64;
+pub const INTPTR_WIDTH: u32 = 64;
+pub const UINTPTR_WIDTH: u32 = 64;
+pub const INTMAX_WIDTH: u32 = 64;
+pub const UINTMAX_WIDTH: u32 = 64;
+pub const PTRDIFF_WIDTH: u32 = 64;
+pub const SIG_ATOMIC_WIDTH: u32 = 32;
+pub const SIZE_WIDTH: u32 = 64;
+pub const WCHAR_WIDTH: u32 = 32;
+pub const WINT_WIDTH: u32 = 32;
+pub type std_nullptr_t = *const ::std::os::raw::c_void;
+pub type __u_char = ::std::os::raw::c_uchar;
+pub type __u_short = ::std::os::raw::c_ushort;
+pub type __u_int = ::std::os::raw::c_uint;
+pub type __u_long = ::std::os::raw::c_ulong;
+pub type __int8_t = ::std::os::raw::c_schar;
+pub type __uint8_t = ::std::os::raw::c_uchar;
+pub type __int16_t = ::std::os::raw::c_short;
+pub type __uint16_t = ::std::os::raw::c_ushort;
+pub type __int32_t = ::std::os::raw::c_int;
+pub type __uint32_t = ::std::os::raw::c_uint;
+pub type __int64_t = ::std::os::raw::c_long;
+pub type __uint64_t = ::std::os::raw::c_ulong;
+pub type __int_least8_t = __int8_t;
+pub type __uint_least8_t = __uint8_t;
+pub type __int_least16_t = __int16_t;
+pub type __uint_least16_t = __uint16_t;
+pub type __int_least32_t = __int32_t;
+pub type __uint_least32_t = __uint32_t;
+pub type __int_least64_t = __int64_t;
+pub type __uint_least64_t = __uint64_t;
+pub type __quad_t = ::std::os::raw::c_long;
+pub type __u_quad_t = ::std::os::raw::c_ulong;
+pub type __intmax_t = ::std::os::raw::c_long;
+pub type __uintmax_t = ::std::os::raw::c_ulong;
+pub type __dev_t = ::std::os::raw::c_ulong;
+pub type __uid_t = ::std::os::raw::c_uint;
+pub type __gid_t = ::std::os::raw::c_uint;
+pub type __ino_t = ::std::os::raw::c_ulong;
+pub type __ino64_t = ::std::os::raw::c_ulong;
+pub type __mode_t = ::std::os::raw::c_uint;
+pub type __nlink_t = ::std::os::raw::c_ulong;
+pub type __off_t = ::std::os::raw::c_long;
+pub type __off64_t = ::std::os::raw::c_long;
+pub type __pid_t = ::std::os::raw::c_int;
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __fsid_t {
+    pub __val: [::std::os::raw::c_int; 2usize],
+}
+#[test]
+fn bindgen_test_layout___fsid_t() {
+    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
+    let ptr = UNINIT.as_ptr();
+    assert_eq!(
+        ::std::mem::size_of::<__fsid_t>(),
+        8usize,
+        concat!("Size of: ", stringify!(__fsid_t))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<__fsid_t>(),
+        4usize,
+        concat!("Alignment of ", stringify!(__fsid_t))
+    );
+    assert_eq!(
+        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
+        0usize,
+        concat!(
+            "Offset of field: ",
+            stringify!(__fsid_t),
+            "::",
+            stringify!(__val)
+        )
+    );
+}
+pub type __clock_t = ::std::os::raw::c_long;
+pub type __rlim_t = ::std::os::raw::c_ulong;
+pub type __rlim64_t = ::std::os::raw::c_ulong;
+pub type __id_t = ::std::os::raw::c_uint;
+pub type __time_t = ::std::os::raw::c_long;
+pub type __useconds_t = ::std::os::raw::c_uint;
+pub type __suseconds_t = ::std::os::raw::c_long;
+pub type __suseconds64_t = ::std::os::raw::c_long;
+pub type __daddr_t = ::std::os::raw::c_int;
+pub type __key_t = ::std::os::raw::c_int;
+pub type __clockid_t = ::std::os::raw::c_int;
+pub type __timer_t = *mut ::std::os::raw::c_void;
+pub type __blksize_t = ::std::os::raw::c_long;
+pub type __blkcnt_t = ::std::os::raw::c_long;
+pub type __blkcnt64_t = ::std::os::raw::c_long;
+pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
+pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
+pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
+pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
+pub type __fsword_t = ::std::os::raw::c_long;
+pub type __ssize_t = ::std::os::raw::c_long;
+pub type __syscall_slong_t = ::std::os::raw::c_long;
+pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
+pub type __loff_t = __off64_t;
+pub type __caddr_t = *mut ::std::os::raw::c_char;
+pub type __intptr_t = ::std::os::raw::c_long;
+pub type __socklen_t = ::std::os::raw::c_uint;
+pub type __sig_atomic_t = ::std::os::raw::c_int;
+pub type int_least8_t = __int_least8_t;
+pub type int_least16_t = __int_least16_t;
+pub type int_least32_t = __int_least32_t;
+pub type int_least64_t = __int_least64_t;
+pub type uint_least8_t = __uint_least8_t;
+pub type uint_least16_t = __uint_least16_t;
+pub type uint_least32_t = __uint_least32_t;
+pub type uint_least64_t = __uint_least64_t;
+pub type int_fast8_t = ::std::os::raw::c_schar;
+pub type int_fast16_t = ::std::os::raw::c_long;
+pub type int_fast32_t = ::std::os::raw::c_long;
+pub type int_fast64_t = ::std::os::raw::c_long;
+pub type uint_fast8_t = ::std::os::raw::c_uchar;
+pub type uint_fast16_t = ::std::os::raw::c_ulong;
+pub type uint_fast32_t = ::std::os::raw::c_ulong;
+pub type uint_fast64_t = ::std::os::raw::c_ulong;
+pub type intmax_t = __intmax_t;
+pub type uintmax_t = __uintmax_t;
+#[repr(C)]
+#[repr(align(16))]
+#[derive(Debug, Copy, Clone)]
+pub struct max_align_t {
+    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
+    pub __bindgen_padding_0: u64,
+    pub __clang_max_align_nonce2: u128,
+}
+#[test]
+fn bindgen_test_layout_max_align_t() {
+    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
+    let ptr = UNINIT.as_ptr();
+    assert_eq!(
+        ::std::mem::size_of::<max_align_t>(),
+        32usize,
+        concat!("Size of: ", stringify!(max_align_t))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<max_align_t>(),
+        16usize,
+        concat!("Alignment of ", stringify!(max_align_t))
+    );
+    assert_eq!(
+        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
+        0usize,
+        concat!(
+            "Offset of field: ",
+            stringify!(max_align_t),
+            "::",
+            stringify!(__clang_max_align_nonce1)
+        )
+    );
+    assert_eq!(
+        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
+        16usize,
+        concat!(
+            "Offset of field: ",
+            stringify!(max_align_t),
+            "::",
+            stringify!(__clang_max_align_nonce2)
+        )
+    );
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct Shard {
+    pub len: usize,
+    pub data: *mut u8,
+}
+#[test]
+fn bindgen_test_layout_Shard() {
+    const UNINIT: ::std::mem::MaybeUninit<Shard> = ::std::mem::MaybeUninit::uninit();
+    let ptr = UNINIT.as_ptr();
+    assert_eq!(
+        ::std::mem::size_of::<Shard>(),
+        16usize,
+        concat!("Size of: ", stringify!(Shard))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<Shard>(),
+        8usize,
+        concat!("Alignment of ", stringify!(Shard))
+    );
+    assert_eq!(
+        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
+        0usize,
+        concat!(
+            "Offset of field: ",
+            stringify!(Shard),
+            "::",
+            stringify!(len)
+        )
+    );
+    assert_eq!(
+        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
+        8usize,
+        concat!(
+            "Offset of field: ",
+            stringify!(Shard),
+            "::",
+            stringify!(data)
+        )
+    );
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct Shards {
+    pub original_ptr: *mut ::std::os::raw::c_void,
+    pub count: usize,
+    pub shards: *mut Shard,
+}
+#[test]
+fn bindgen_test_layout_Shards() {
+    const UNINIT: ::std::mem::MaybeUninit<Shards> = ::std::mem::MaybeUninit::uninit();
+    let ptr = UNINIT.as_ptr();
+    assert_eq!(
+        ::std::mem::size_of::<Shards>(),
+        24usize,
+        concat!("Size of: ", stringify!(Shards))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<Shards>(),
+        8usize,
+        concat!("Alignment of ", stringify!(Shards))
+    );
+    assert_eq!(
+        unsafe { ::std::ptr::addr_of!((*ptr).original_ptr) as usize - ptr as usize },
+        0usize,
+        concat!(
+            "Offset of field: ",
+            stringify!(Shards),
+            "::",
+            stringify!(original_ptr)
+        )
+    );
+    assert_eq!(
+        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
+        8usize,
+        concat!(
+            "Offset of field: ",
+            stringify!(Shards),
+            "::",
+            stringify!(count)
+        )
+    );
+    assert_eq!(
+        unsafe { ::std::ptr::addr_of!((*ptr).shards) as usize - ptr as usize },
+        16usize,
+        concat!(
+            "Offset of field: ",
+            stringify!(Shards),
+            "::",
+            stringify!(shards)
+        )
+    );
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct DecodedData {
+    pub original_ptr: *mut ::std::os::raw::c_void,
+    pub len: usize,
+    pub data: *mut u8,
+}
+#[test]
+fn bindgen_test_layout_DecodedData() {
+    const UNINIT: ::std::mem::MaybeUninit<DecodedData> = ::std::mem::MaybeUninit::uninit();
+    let ptr = UNINIT.as_ptr();
+    assert_eq!(
+        ::std::mem::size_of::<DecodedData>(),
+        24usize,
+        concat!("Size of: ", stringify!(DecodedData))
+    );
+    assert_eq!(
+        ::std::mem::align_of::<DecodedData>(),
+        8usize,
+        concat!("Alignment of ", stringify!(DecodedData))
+    );
+    assert_eq!(
+        unsafe { ::std::ptr::addr_of!((*ptr).original_ptr) as usize - ptr as usize },
+        0usize,
+        concat!(
+            "Offset of field: ",
+            stringify!(DecodedData),
+            "::",
+            stringify!(original_ptr)
+        )
+    );
+    assert_eq!(
+        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
+        8usize,
+        concat!(
+            "Offset of field: ",
+            stringify!(DecodedData),
+            "::",
+            stringify!(len)
+        )
+    );
+    assert_eq!(
+        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
+        16usize,
+        concat!(
+            "Offset of field: ",
+            stringify!(DecodedData),
+            "::",
+            stringify!(data)
+        )
+    );
+}
+extern "C" {
+    #[link_name = "\u{1}_Z6encodemPhmP6Shards"]
+    pub fn encode(n_validators: usize, bytes: *mut u8, bytes_len: usize, output: *mut Shards)
+        -> u8;
+}
+extern "C" {
+    #[link_name = "\u{1}_Z11drop_shardsPv"]
+    pub fn drop_shards(original_ptr: *mut ::std::os::raw::c_void);
+}
+extern "C" {
+    #[link_name = "\u{1}_Z6decodemP5Shardm"]
+    pub fn decode(n_validators: usize, shards: *mut Shard, n_shards: usize) -> DecodedData;
+}
+extern "C" {
+    #[link_name = "\u{1}_Z17drop_decoded_dataPv"]
+    pub fn drop_decoded_data(original_ptr: *mut ::std::os::raw::c_void);
+}
diff --git a/cpp.md b/cpp.md
new file mode 100644
index 0000000..1ec9321
--- /dev/null
+++ b/cpp.md
@@ -0,0 +1,45 @@
+#include <stdint.h>
+#include <cstddef>
+#include <tuple>
+
+const size_t kFieldSize = 65536;
+
+uint16_t kOneMask = (1ull << 16) - 1;
+
+uint16_t mul(uint16_t self, uint16_t other, uint16_t* log_table,
+                 uint16_t* &exp_table) {
+    if (self == 0)
+      return 0;
+
+    // const auto &[log_table, exp_table, _] = tables;
+    auto log_of_self = log_table[size_t(self)];
+    auto log = (uint32_t(log_of_self)) +
+                     uint32_t(other);
+    const auto offset =
+        (log & uint32_t(kOneMask)) +
+        (log >> 16);
+    return exp_table[size_t(offset)];
+}
+
+void inverse_afft(uint16_t *data, size_t size, size_t index,
+                    uint16_t* log_table,
+                uint16_t* exp_table, uint16_t * skews) {
+    size_t depart_no(1ull);
+    while (depart_no < size) {
+      size_t j(depart_no);
+      while (j < size) {
+        for (size_t i = (j - depart_no); i < j; ++i)
+          data[i + depart_no] =
+              (data[i + depart_no] ^ data[i]);
+
+        const auto skew = skews[j + index - 1ull];
+        if (skew != kOneMask)
+          for (size_t i = (j - depart_no); i < j; ++i)
+            data[i] = (data[i] ^
+                               mul(data[i + depart_no], skew, log_table, exp_table));
+
+        j += (depart_no << 1ull);
+      }
+      depart_no = (depart_no << 1ull);
+    }
+  }
\ No newline at end of file
diff --git a/ec-cpp.cpp.o b/ec-cpp.cpp.o
new file mode 100644
index 0000000..907bb85
--- /dev/null
+++ b/ec-cpp.cpp.o
@@ -0,0 +1,1368 @@
+; ModuleID = '/home/alin/code/erasure-coding-crust/ec-cpp/ec-cpp.cpp'
+source_filename = "/home/alin/code/erasure-coding-crust/ec-cpp/ec-cpp.cpp"
+target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
+target triple = "x86_64-pc-linux-gnu"
+
+%"struct.ec_cpp::f2e16_Descriptor" = type { %"class.std::tuple" }
+%"class.std::tuple" = type { %"struct.std::_Tuple_impl" }
+%"struct.std::_Tuple_impl" = type { %"struct.std::_Tuple_impl.0", %"struct.std::_Head_base.3" }
+%"struct.std::_Tuple_impl.0" = type { %"struct.std::_Tuple_impl.1", %"struct.std::_Head_base.2" }
+%"struct.std::_Tuple_impl.1" = type { %"struct.std::_Head_base" }
+%"struct.std::_Head_base" = type { %"struct.std::array" }
+%"struct.std::array" = type { [65536 x i16] }
+%"struct.std::_Head_base.2" = type { %"struct.std::array" }
+%"struct.std::_Head_base.3" = type { %"struct.std::array" }
+%"struct.ec_cpp::PolyEncoder" = type <{ %"struct.ec_cpp::f2e16_Descriptor"*, %"struct.ec_cpp::AdditiveFFT", [2 x i8] }>
+%"struct.ec_cpp::AdditiveFFT" = type { [65535 x i16] }
+%"class.std::variant.7" = type { %"struct.std::__detail::__variant::_Variant_base.base.21", [7 x i8] }
+%"struct.std::__detail::__variant::_Variant_base.base.21" = type { %"struct.std::__detail::__variant::_Move_assign_base.base.20" }
+%"struct.std::__detail::__variant::_Move_assign_base.base.20" = type { %"struct.std::__detail::__variant::_Copy_assign_base.base.19" }
+%"struct.std::__detail::__variant::_Copy_assign_base.base.19" = type { %"struct.std::__detail::__variant::_Move_ctor_base.base.18" }
+%"struct.std::__detail::__variant::_Move_ctor_base.base.18" = type { %"struct.std::__detail::__variant::_Copy_ctor_base.base.17" }
+%"struct.std::__detail::__variant::_Copy_ctor_base.base.17" = type { %"struct.std::__detail::__variant::_Variant_storage.base.16" }
+%"struct.std::__detail::__variant::_Variant_storage.base.16" = type <{ %"union.std::__detail::__variant::_Variadic_union.14", i8 }>
+%"union.std::__detail::__variant::_Variadic_union.14" = type { %"struct.std::__detail::__variant::_Uninitialized.15" }
+%"struct.std::__detail::__variant::_Uninitialized.15" = type { %"struct.ec_cpp::ReedSolomon" }
+%"struct.ec_cpp::ReedSolomon" = type { i64, i64, i64, %"struct.ec_cpp::PolyEncoder"* }
+%class.anon = type { i8 }
+%"struct.ec_cpp::Additive" = type { i16 }
+
+$_ZNK6ec_cpp16f2e16_Descriptor7kTablesMUlvE_clEv = comdat any
+
+$_ZN6ec_cpp11AdditiveFFTINS_16f2e16_DescriptorEE9initalizeERKSt5tupleIJSt5arrayItLm65536EES5_S5_EE = comdat any
+
+@_ZN6ec_cpp16field_descriptorE = global %"struct.ec_cpp::f2e16_Descriptor" zeroinitializer, align 2
+@_ZN6ec_cpp12poly_encoderE = global %"struct.ec_cpp::PolyEncoder" zeroinitializer, align 8
+@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_ec_cpp.cpp, i8* null }]
+
+; Function Attrs: mustprogress nofree nosync nounwind readnone uwtable willreturn
+define { i64, i8 } @_ZN6ec_cpp20getRecoveryThresholdEm(i64 noundef %0) local_unnamed_addr #0 personality i32 (...)* @__gxx_personality_v0 {
+  %2 = icmp ugt i64 %0, 65536
+  br i1 %2, label %11, label %3
+
+3:                                                ; preds = %1
+  %4 = icmp ult i64 %0, 2
+  br i1 %4, label %11, label %5
+
+5:                                                ; preds = %3
+  %6 = trunc i64 %0 to i16
+  %7 = add i16 %6, -1
+  %8 = udiv i16 %7, 3
+  %9 = add nuw nsw i16 %8, 1
+  %10 = zext i16 %9 to i64
+  br label %11
+
+11:                                               ; preds = %3, %1, %5
+  %12 = phi i64 [ %10, %5 ], [ 5, %1 ], [ 6, %3 ]
+  %13 = phi i8 [ 0, %5 ], [ 1, %1 ], [ 1, %3 ]
+  %14 = insertvalue { i64, i8 } poison, i64 %12, 0
+  %15 = insertvalue { i64, i8 } %14, i8 %13, 1
+  ret { i64, i8 } %15
+}
+
+; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
+declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1
+
+; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
+declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1
+
+; Function Attrs: uwtable
+define void @_ZN6ec_cpp6createEm(%"class.std::variant.7"* noalias nocapture writeonly sret(%"class.std::variant.7") align 8 %0, i64 noundef %1) local_unnamed_addr #2 personality i32 (...)* @__gxx_personality_v0 {
+  %3 = icmp ugt i64 %1, 65536
+  br i1 %3, label %6, label %4
+
+4:                                                ; preds = %2
+  %5 = icmp ult i64 %1, 2
+  br i1 %5, label %6, label %9
+
+6:                                                ; preds = %4, %2
+  %7 = phi i32 [ 6, %4 ], [ 5, %2 ]
+  %8 = bitcast %"class.std::variant.7"* %0 to i32*
+  store i32 %7, i32* %8, align 8, !tbaa !4
+  br label %46
+
+9:                                                ; preds = %4
+  %10 = trunc i64 %1 to i16
+  %11 = add i16 %10, -1
+  %12 = icmp ult i16 %11, 3
+  br i1 %12, label %20, label %13
+
+13:                                               ; preds = %9
+  %14 = udiv i16 %11, 3
+  %15 = add nuw nsw i16 %14, 1
+  %16 = lshr i16 %15, 1
+  %17 = zext i16 %16 to i64
+  %18 = tail call i64 @llvm.ctlz.i64(i64 %17, i1 true) #9, !range !9
+  %19 = sub nuw nsw i64 64, %18
+  br label %20
+
+20:                                               ; preds = %9, %13
+  %21 = phi i64 [ %19, %13 ], [ 0, %9 ]
+  %22 = shl nuw i64 1, %21
+  %23 = tail call i64 @llvm.ctpop.i64(i64 %1) #9, !range !10
+  %24 = icmp ult i64 %23, 2
+  br i1 %24, label %40, label %25
+
+25:                                               ; preds = %20
+  %26 = tail call i64 @llvm.ctlz.i64(i64 %1, i1 true), !range !10
+  %27 = sub nuw nsw i64 64, %26
+  %28 = shl nuw i64 1, %27
+  %29 = icmp ugt i64 %1, 65535
+  br i1 %29, label %30, label %32
+
+30:                                               ; preds = %25
+  %31 = bitcast %"class.std::variant.7"* %0 to i32*
+  store i32 2, i32* %31, align 8, !tbaa !4, !alias.scope !11
+  br label %46
+
+32:                                               ; preds = %25
+  %33 = tail call i64 @llvm.ctpop.i64(i64 %28) #9, !range !10
+  %34 = icmp ult i64 %33, 2
+  %35 = tail call i64 @llvm.ctpop.i64(i64 %22) #9, !range !10
+  %36 = icmp ult i64 %35, 2
+  %37 = select i1 %34, i1 true, i1 %36
+  br i1 %37, label %40, label %38
+
+38:                                               ; preds = %32
+  %39 = bitcast %"class.std::variant.7"* %0 to i32*
+  store i32 0, i32* %39, align 8, !tbaa !4, !alias.scope !11
+  br label %46
+
+40:                                               ; preds = %20, %32
+  %41 = phi i64 [ %28, %32 ], [ %1, %20 ]
+  %42 = getelementptr inbounds %"class.std::variant.7", %"class.std::variant.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
+  store i64 %41, i64* %42, align 8, !tbaa.struct !14, !alias.scope !11
+  %43 = getelementptr inbounds %"class.std::variant.7", %"class.std::variant.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
+  store i64 %22, i64* %43, align 8, !tbaa.struct !19, !alias.scope !11
+  %44 = getelementptr inbounds %"class.std::variant.7", %"class.std::variant.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
+  store i64 %1, i64* %44, align 8, !tbaa.struct !20, !alias.scope !11
+  %45 = getelementptr inbounds %"class.std::variant.7", %"class.std::variant.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3
+  store %"struct.ec_cpp::PolyEncoder"* @_ZN6ec_cpp12poly_encoderE, %"struct.ec_cpp::PolyEncoder"** %45, align 8, !tbaa.struct !21, !alias.scope !11
+  br label %46
+
+46:                                               ; preds = %40, %38, %30, %6
+  %47 = phi i8 [ 1, %6 ], [ 1, %30 ], [ 1, %38 ], [ 0, %40 ]
+  %48 = getelementptr inbounds %"class.std::variant.7", %"class.std::variant.7"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
+  store i8 %47, i8* %48, align 8, !tbaa !22
+  ret void
+}
+
+; Function Attrs: inlinehint uwtable
+define linkonce_odr void @_ZNK6ec_cpp16f2e16_Descriptor7kTablesMUlvE_clEv(%"class.std::tuple"* noalias sret(%"class.std::tuple") align 2 %0, %class.anon* noundef nonnull align 1 dereferenceable(1) %1) local_unnamed_addr #3 comdat align 2 personality i32 (...)* @__gxx_personality_v0 {
+  %3 = alloca %"struct.std::array", align 16
+  %4 = alloca %"struct.std::array", align 2
+  %5 = alloca %"struct.std::array", align 2
+  %6 = bitcast %"struct.std::array"* %3 to i8*
+  call void @llvm.lifetime.start.p0i8(i64 131072, i8* nonnull %6) #9
+  %7 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 63
+  %8 = bitcast i16* %7 to i8*
+  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 2 dereferenceable(131072) %8, i8 0, i64 130946, i1 false)
+  %9 = bitcast %"struct.std::array"* %4 to i8*
+  call void @llvm.lifetime.start.p0i8(i64 131072, i8* nonnull %9) #9
+  %10 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %4, i64 0, i32 0, i64 1
+  %11 = bitcast i16* %10 to i8*
+  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 2 dereferenceable(131072) %11, i8 0, i64 131070, i1 false)
+  br label %362
+
+12:                                               ; preds = %362
+  %13 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %4, i64 0, i32 0, i64 0
+  store i16 -1, i16* %13, align 2, !tbaa !24
+  %14 = bitcast %"struct.std::array"* %3 to <8 x i16>*
+  store <8 x i16> <i16 0, i16 1, i16 -21302, i16 -21301, i16 15374, i16 15375, i16 -28476, i16 -28475>, <8 x i16>* %14, align 16, !tbaa !24
+  %15 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 8
+  %16 = bitcast i16* %15 to <8 x i16>*
+  store <8 x i16> <i16 5694, i16 5695, i16 -17676, i16 -17675, i16 10800, i16 10801, i16 -30982, i16 -30981>, <8 x i16>* %16, align 16, !tbaa !24
+  %17 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 16
+  %18 = bitcast i16* %17 to <8 x i16>*
+  store <8 x i16> <i16 -14974, i16 -14973, i16 26952, i16 26953, i16 -1652, i16 -1651, i16 21830, i16 21831>, <8 x i16>* %18, align 16, !tbaa !24
+  %19 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 24
+  %20 = bitcast i16* %19 to <8 x i16>*
+  store <8 x i16> <i16 -11332, i16 -11331, i16 32630, i16 32631, i16 -4174, i16 -4173, i16 17272, i16 17273>, <8 x i16>* %20, align 16, !tbaa !24
+  %21 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 32
+  %22 = bitcast i16* %21 to <8 x i16>*
+  store <8 x i16> <i16 -4818, i16 -4817, i16 16868, i16 16869, i16 -12000, i16 -11999, i16 32234, i16 32235>, <8 x i16>* %22, align 16, !tbaa !24
+  %23 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 40
+  %24 = bitcast i16* %23 to <8 x i16>*
+  store <8 x i16> <i16 -1264, i16 -1263, i16 22490, i16 22491, i16 -14562, i16 -14561, i16 27604, i16 27605>, <8 x i16>* %24, align 16, !tbaa !24
+  %25 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 48
+  %26 = bitcast i16* %25 to <8 x i16>*
+  store <8 x i16> <i16 10412, i16 10413, i16 -31642, i16 -31641, i16 5282, i16 5283, i16 -18328, i16 -18327>, <8 x i16>* %26, align 16, !tbaa !24
+  %27 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 56
+  %28 = bitcast i16* %27 to <8 x i16>*
+  store <8 x i16> <i16 16018, i16 16019, i16 -28072, i16 -28071, i16 668, i16 669, i16 -20906, i16 -20905>, <8 x i16>* %28, align 16, !tbaa !24
+  %29 = bitcast %"struct.std::array"* %3 to <8 x i16>*
+  %30 = load <8 x i16>, <8 x i16>* %29, align 16, !tbaa !24
+  %31 = xor <8 x i16> %30, <i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340>
+  %32 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 64
+  %33 = bitcast i16* %32 to <8 x i16>*
+  store <8 x i16> %31, <8 x i16>* %33, align 16, !tbaa !24
+  %34 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 8
+  %35 = bitcast i16* %34 to <8 x i16>*
+  %36 = load <8 x i16>, <8 x i16>* %35, align 16, !tbaa !24
+  %37 = xor <8 x i16> %36, <i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340>
+  %38 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 72
+  %39 = bitcast i16* %38 to <8 x i16>*
+  store <8 x i16> %37, <8 x i16>* %39, align 16, !tbaa !24
+  %40 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 16
+  %41 = bitcast i16* %40 to <8 x i16>*
+  %42 = load <8 x i16>, <8 x i16>* %41, align 16, !tbaa !24
+  %43 = xor <8 x i16> %42, <i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340>
+  %44 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 80
+  %45 = bitcast i16* %44 to <8 x i16>*
+  store <8 x i16> %43, <8 x i16>* %45, align 16, !tbaa !24
+  %46 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 24
+  %47 = bitcast i16* %46 to <8 x i16>*
+  %48 = load <8 x i16>, <8 x i16>* %47, align 16, !tbaa !24
+  %49 = xor <8 x i16> %48, <i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340>
+  %50 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 88
+  %51 = bitcast i16* %50 to <8 x i16>*
+  store <8 x i16> %49, <8 x i16>* %51, align 16, !tbaa !24
+  %52 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 32
+  %53 = bitcast i16* %52 to <8 x i16>*
+  %54 = load <8 x i16>, <8 x i16>* %53, align 16, !tbaa !24
+  %55 = xor <8 x i16> %54, <i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340>
+  %56 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 96
+  %57 = bitcast i16* %56 to <8 x i16>*
+  store <8 x i16> %55, <8 x i16>* %57, align 16, !tbaa !24
+  %58 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 40
+  %59 = bitcast i16* %58 to <8 x i16>*
+  %60 = load <8 x i16>, <8 x i16>* %59, align 16, !tbaa !24
+  %61 = xor <8 x i16> %60, <i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340>
+  %62 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 104
+  %63 = bitcast i16* %62 to <8 x i16>*
+  store <8 x i16> %61, <8 x i16>* %63, align 16, !tbaa !24
+  %64 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 48
+  %65 = bitcast i16* %64 to <8 x i16>*
+  %66 = load <8 x i16>, <8 x i16>* %65, align 16, !tbaa !24
+  %67 = xor <8 x i16> %66, <i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340>
+  %68 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 112
+  %69 = bitcast i16* %68 to <8 x i16>*
+  store <8 x i16> %67, <8 x i16>* %69, align 16, !tbaa !24
+  %70 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 56
+  %71 = bitcast i16* %70 to <8 x i16>*
+  %72 = load <8 x i16>, <8 x i16>* %71, align 16, !tbaa !24
+  %73 = xor <8 x i16> %72, <i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340>
+  %74 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 120
+  %75 = bitcast i16* %74 to <8 x i16>*
+  store <8 x i16> %73, <8 x i16>* %75, align 16, !tbaa !24
+  %76 = bitcast %"struct.std::array"* %3 to <8 x i16>*
+  %77 = load <8 x i16>, <8 x i16>* %76, align 16, !tbaa !24
+  %78 = xor <8 x i16> %77, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %79 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 128
+  %80 = bitcast i16* %79 to <8 x i16>*
+  store <8 x i16> %78, <8 x i16>* %80, align 16, !tbaa !24
+  %81 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 8
+  %82 = bitcast i16* %81 to <8 x i16>*
+  %83 = load <8 x i16>, <8 x i16>* %82, align 16, !tbaa !24
+  %84 = xor <8 x i16> %83, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %85 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 136
+  %86 = bitcast i16* %85 to <8 x i16>*
+  store <8 x i16> %84, <8 x i16>* %86, align 16, !tbaa !24
+  %87 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 16
+  %88 = bitcast i16* %87 to <8 x i16>*
+  %89 = load <8 x i16>, <8 x i16>* %88, align 16, !tbaa !24
+  %90 = xor <8 x i16> %89, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %91 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 144
+  %92 = bitcast i16* %91 to <8 x i16>*
+  store <8 x i16> %90, <8 x i16>* %92, align 16, !tbaa !24
+  %93 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 24
+  %94 = bitcast i16* %93 to <8 x i16>*
+  %95 = load <8 x i16>, <8 x i16>* %94, align 16, !tbaa !24
+  %96 = xor <8 x i16> %95, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %97 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 152
+  %98 = bitcast i16* %97 to <8 x i16>*
+  store <8 x i16> %96, <8 x i16>* %98, align 16, !tbaa !24
+  %99 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 32
+  %100 = bitcast i16* %99 to <8 x i16>*
+  %101 = load <8 x i16>, <8 x i16>* %100, align 16, !tbaa !24
+  %102 = xor <8 x i16> %101, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %103 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 160
+  %104 = bitcast i16* %103 to <8 x i16>*
+  store <8 x i16> %102, <8 x i16>* %104, align 16, !tbaa !24
+  %105 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 40
+  %106 = bitcast i16* %105 to <8 x i16>*
+  %107 = load <8 x i16>, <8 x i16>* %106, align 16, !tbaa !24
+  %108 = xor <8 x i16> %107, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %109 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 168
+  %110 = bitcast i16* %109 to <8 x i16>*
+  store <8 x i16> %108, <8 x i16>* %110, align 16, !tbaa !24
+  %111 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 48
+  %112 = bitcast i16* %111 to <8 x i16>*
+  %113 = load <8 x i16>, <8 x i16>* %112, align 16, !tbaa !24
+  %114 = xor <8 x i16> %113, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %115 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 176
+  %116 = bitcast i16* %115 to <8 x i16>*
+  store <8 x i16> %114, <8 x i16>* %116, align 16, !tbaa !24
+  %117 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 56
+  %118 = bitcast i16* %117 to <8 x i16>*
+  %119 = load <8 x i16>, <8 x i16>* %118, align 16, !tbaa !24
+  %120 = xor <8 x i16> %119, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %121 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 184
+  %122 = bitcast i16* %121 to <8 x i16>*
+  store <8 x i16> %120, <8 x i16>* %122, align 16, !tbaa !24
+  %123 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 64
+  %124 = bitcast i16* %123 to <8 x i16>*
+  %125 = load <8 x i16>, <8 x i16>* %124, align 16, !tbaa !24
+  %126 = xor <8 x i16> %125, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %127 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 192
+  %128 = bitcast i16* %127 to <8 x i16>*
+  store <8 x i16> %126, <8 x i16>* %128, align 16, !tbaa !24
+  %129 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 72
+  %130 = bitcast i16* %129 to <8 x i16>*
+  %131 = load <8 x i16>, <8 x i16>* %130, align 16, !tbaa !24
+  %132 = xor <8 x i16> %131, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %133 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 200
+  %134 = bitcast i16* %133 to <8 x i16>*
+  store <8 x i16> %132, <8 x i16>* %134, align 16, !tbaa !24
+  %135 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 80
+  %136 = bitcast i16* %135 to <8 x i16>*
+  %137 = load <8 x i16>, <8 x i16>* %136, align 16, !tbaa !24
+  %138 = xor <8 x i16> %137, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %139 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 208
+  %140 = bitcast i16* %139 to <8 x i16>*
+  store <8 x i16> %138, <8 x i16>* %140, align 16, !tbaa !24
+  %141 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 88
+  %142 = bitcast i16* %141 to <8 x i16>*
+  %143 = load <8 x i16>, <8 x i16>* %142, align 16, !tbaa !24
+  %144 = xor <8 x i16> %143, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %145 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 216
+  %146 = bitcast i16* %145 to <8 x i16>*
+  store <8 x i16> %144, <8 x i16>* %146, align 16, !tbaa !24
+  %147 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 96
+  %148 = bitcast i16* %147 to <8 x i16>*
+  %149 = load <8 x i16>, <8 x i16>* %148, align 16, !tbaa !24
+  %150 = xor <8 x i16> %149, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %151 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 224
+  %152 = bitcast i16* %151 to <8 x i16>*
+  store <8 x i16> %150, <8 x i16>* %152, align 16, !tbaa !24
+  %153 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 104
+  %154 = bitcast i16* %153 to <8 x i16>*
+  %155 = load <8 x i16>, <8 x i16>* %154, align 16, !tbaa !24
+  %156 = xor <8 x i16> %155, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %157 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 232
+  %158 = bitcast i16* %157 to <8 x i16>*
+  store <8 x i16> %156, <8 x i16>* %158, align 16, !tbaa !24
+  %159 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 112
+  %160 = bitcast i16* %159 to <8 x i16>*
+  %161 = load <8 x i16>, <8 x i16>* %160, align 16, !tbaa !24
+  %162 = xor <8 x i16> %161, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %163 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 240
+  %164 = bitcast i16* %163 to <8 x i16>*
+  store <8 x i16> %162, <8 x i16>* %164, align 16, !tbaa !24
+  %165 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 120
+  %166 = bitcast i16* %165 to <8 x i16>*
+  %167 = load <8 x i16>, <8 x i16>* %166, align 16, !tbaa !24
+  %168 = xor <8 x i16> %167, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %169 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 248
+  %170 = bitcast i16* %169 to <8 x i16>*
+  store <8 x i16> %168, <8 x i16>* %170, align 16, !tbaa !24
+  %171 = bitcast %"struct.std::array"* %3 to <8 x i16>*
+  %172 = load <8 x i16>, <8 x i16>* %171, align 16, !tbaa !24
+  %173 = xor <8 x i16> %172, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %174 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 256
+  %175 = bitcast i16* %174 to <8 x i16>*
+  store <8 x i16> %173, <8 x i16>* %175, align 16, !tbaa !24
+  %176 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 8
+  %177 = bitcast i16* %176 to <8 x i16>*
+  %178 = load <8 x i16>, <8 x i16>* %177, align 16, !tbaa !24
+  %179 = xor <8 x i16> %178, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %180 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 264
+  %181 = bitcast i16* %180 to <8 x i16>*
+  store <8 x i16> %179, <8 x i16>* %181, align 16, !tbaa !24
+  %182 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 16
+  %183 = bitcast i16* %182 to <8 x i16>*
+  %184 = load <8 x i16>, <8 x i16>* %183, align 16, !tbaa !24
+  %185 = xor <8 x i16> %184, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %186 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 272
+  %187 = bitcast i16* %186 to <8 x i16>*
+  store <8 x i16> %185, <8 x i16>* %187, align 16, !tbaa !24
+  %188 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 24
+  %189 = bitcast i16* %188 to <8 x i16>*
+  %190 = load <8 x i16>, <8 x i16>* %189, align 16, !tbaa !24
+  %191 = xor <8 x i16> %190, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %192 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 280
+  %193 = bitcast i16* %192 to <8 x i16>*
+  store <8 x i16> %191, <8 x i16>* %193, align 16, !tbaa !24
+  %194 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 32
+  %195 = bitcast i16* %194 to <8 x i16>*
+  %196 = load <8 x i16>, <8 x i16>* %195, align 16, !tbaa !24
+  %197 = xor <8 x i16> %196, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %198 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 288
+  %199 = bitcast i16* %198 to <8 x i16>*
+  store <8 x i16> %197, <8 x i16>* %199, align 16, !tbaa !24
+  %200 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 40
+  %201 = bitcast i16* %200 to <8 x i16>*
+  %202 = load <8 x i16>, <8 x i16>* %201, align 16, !tbaa !24
+  %203 = xor <8 x i16> %202, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %204 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 296
+  %205 = bitcast i16* %204 to <8 x i16>*
+  store <8 x i16> %203, <8 x i16>* %205, align 16, !tbaa !24
+  %206 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 48
+  %207 = bitcast i16* %206 to <8 x i16>*
+  %208 = load <8 x i16>, <8 x i16>* %207, align 16, !tbaa !24
+  %209 = xor <8 x i16> %208, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %210 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 304
+  %211 = bitcast i16* %210 to <8 x i16>*
+  store <8 x i16> %209, <8 x i16>* %211, align 16, !tbaa !24
+  %212 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 56
+  %213 = bitcast i16* %212 to <8 x i16>*
+  %214 = load <8 x i16>, <8 x i16>* %213, align 16, !tbaa !24
+  %215 = xor <8 x i16> %214, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %216 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 312
+  %217 = bitcast i16* %216 to <8 x i16>*
+  store <8 x i16> %215, <8 x i16>* %217, align 16, !tbaa !24
+  %218 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 64
+  %219 = bitcast i16* %218 to <8 x i16>*
+  %220 = load <8 x i16>, <8 x i16>* %219, align 16, !tbaa !24
+  %221 = xor <8 x i16> %220, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %222 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 320
+  %223 = bitcast i16* %222 to <8 x i16>*
+  store <8 x i16> %221, <8 x i16>* %223, align 16, !tbaa !24
+  %224 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 72
+  %225 = bitcast i16* %224 to <8 x i16>*
+  %226 = load <8 x i16>, <8 x i16>* %225, align 16, !tbaa !24
+  %227 = xor <8 x i16> %226, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %228 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 328
+  %229 = bitcast i16* %228 to <8 x i16>*
+  store <8 x i16> %227, <8 x i16>* %229, align 16, !tbaa !24
+  %230 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 80
+  %231 = bitcast i16* %230 to <8 x i16>*
+  %232 = load <8 x i16>, <8 x i16>* %231, align 16, !tbaa !24
+  %233 = xor <8 x i16> %232, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %234 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 336
+  %235 = bitcast i16* %234 to <8 x i16>*
+  store <8 x i16> %233, <8 x i16>* %235, align 16, !tbaa !24
+  %236 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 88
+  %237 = bitcast i16* %236 to <8 x i16>*
+  %238 = load <8 x i16>, <8 x i16>* %237, align 16, !tbaa !24
+  %239 = xor <8 x i16> %238, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %240 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 344
+  %241 = bitcast i16* %240 to <8 x i16>*
+  store <8 x i16> %239, <8 x i16>* %241, align 16, !tbaa !24
+  %242 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 96
+  %243 = bitcast i16* %242 to <8 x i16>*
+  %244 = load <8 x i16>, <8 x i16>* %243, align 16, !tbaa !24
+  %245 = xor <8 x i16> %244, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %246 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 352
+  %247 = bitcast i16* %246 to <8 x i16>*
+  store <8 x i16> %245, <8 x i16>* %247, align 16, !tbaa !24
+  %248 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 104
+  %249 = bitcast i16* %248 to <8 x i16>*
+  %250 = load <8 x i16>, <8 x i16>* %249, align 16, !tbaa !24
+  %251 = xor <8 x i16> %250, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %252 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 360
+  %253 = bitcast i16* %252 to <8 x i16>*
+  store <8 x i16> %251, <8 x i16>* %253, align 16, !tbaa !24
+  %254 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 112
+  %255 = bitcast i16* %254 to <8 x i16>*
+  %256 = load <8 x i16>, <8 x i16>* %255, align 16, !tbaa !24
+  %257 = xor <8 x i16> %256, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %258 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 368
+  %259 = bitcast i16* %258 to <8 x i16>*
+  store <8 x i16> %257, <8 x i16>* %259, align 16, !tbaa !24
+  %260 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 120
+  %261 = bitcast i16* %260 to <8 x i16>*
+  %262 = load <8 x i16>, <8 x i16>* %261, align 16, !tbaa !24
+  %263 = xor <8 x i16> %262, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %264 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 376
+  %265 = bitcast i16* %264 to <8 x i16>*
+  store <8 x i16> %263, <8 x i16>* %265, align 16, !tbaa !24
+  %266 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 128
+  %267 = bitcast i16* %266 to <8 x i16>*
+  %268 = load <8 x i16>, <8 x i16>* %267, align 16, !tbaa !24
+  %269 = xor <8 x i16> %268, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %270 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 384
+  %271 = bitcast i16* %270 to <8 x i16>*
+  store <8 x i16> %269, <8 x i16>* %271, align 16, !tbaa !24
+  %272 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 136
+  %273 = bitcast i16* %272 to <8 x i16>*
+  %274 = load <8 x i16>, <8 x i16>* %273, align 16, !tbaa !24
+  %275 = xor <8 x i16> %274, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %276 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 392
+  %277 = bitcast i16* %276 to <8 x i16>*
+  store <8 x i16> %275, <8 x i16>* %277, align 16, !tbaa !24
+  %278 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 144
+  %279 = bitcast i16* %278 to <8 x i16>*
+  %280 = load <8 x i16>, <8 x i16>* %279, align 16, !tbaa !24
+  %281 = xor <8 x i16> %280, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %282 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 400
+  %283 = bitcast i16* %282 to <8 x i16>*
+  store <8 x i16> %281, <8 x i16>* %283, align 16, !tbaa !24
+  %284 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 152
+  %285 = bitcast i16* %284 to <8 x i16>*
+  %286 = load <8 x i16>, <8 x i16>* %285, align 16, !tbaa !24
+  %287 = xor <8 x i16> %286, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %288 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 408
+  %289 = bitcast i16* %288 to <8 x i16>*
+  store <8 x i16> %287, <8 x i16>* %289, align 16, !tbaa !24
+  %290 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 160
+  %291 = bitcast i16* %290 to <8 x i16>*
+  %292 = load <8 x i16>, <8 x i16>* %291, align 16, !tbaa !24
+  %293 = xor <8 x i16> %292, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %294 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 416
+  %295 = bitcast i16* %294 to <8 x i16>*
+  store <8 x i16> %293, <8 x i16>* %295, align 16, !tbaa !24
+  %296 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 168
+  %297 = bitcast i16* %296 to <8 x i16>*
+  %298 = load <8 x i16>, <8 x i16>* %297, align 16, !tbaa !24
+  %299 = xor <8 x i16> %298, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %300 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 424
+  %301 = bitcast i16* %300 to <8 x i16>*
+  store <8 x i16> %299, <8 x i16>* %301, align 16, !tbaa !24
+  %302 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 176
+  %303 = bitcast i16* %302 to <8 x i16>*
+  %304 = load <8 x i16>, <8 x i16>* %303, align 16, !tbaa !24
+  %305 = xor <8 x i16> %304, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %306 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 432
+  %307 = bitcast i16* %306 to <8 x i16>*
+  store <8 x i16> %305, <8 x i16>* %307, align 16, !tbaa !24
+  %308 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 184
+  %309 = bitcast i16* %308 to <8 x i16>*
+  %310 = load <8 x i16>, <8 x i16>* %309, align 16, !tbaa !24
+  %311 = xor <8 x i16> %310, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %312 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 440
+  %313 = bitcast i16* %312 to <8 x i16>*
+  store <8 x i16> %311, <8 x i16>* %313, align 16, !tbaa !24
+  %314 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 192
+  %315 = bitcast i16* %314 to <8 x i16>*
+  %316 = load <8 x i16>, <8 x i16>* %315, align 16, !tbaa !24
+  %317 = xor <8 x i16> %316, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %318 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 448
+  %319 = bitcast i16* %318 to <8 x i16>*
+  store <8 x i16> %317, <8 x i16>* %319, align 16, !tbaa !24
+  %320 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 200
+  %321 = bitcast i16* %320 to <8 x i16>*
+  %322 = load <8 x i16>, <8 x i16>* %321, align 16, !tbaa !24
+  %323 = xor <8 x i16> %322, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %324 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 456
+  %325 = bitcast i16* %324 to <8 x i16>*
+  store <8 x i16> %323, <8 x i16>* %325, align 16, !tbaa !24
+  %326 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 208
+  %327 = bitcast i16* %326 to <8 x i16>*
+  %328 = load <8 x i16>, <8 x i16>* %327, align 16, !tbaa !24
+  %329 = xor <8 x i16> %328, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %330 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 464
+  %331 = bitcast i16* %330 to <8 x i16>*
+  store <8 x i16> %329, <8 x i16>* %331, align 16, !tbaa !24
+  %332 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 216
+  %333 = bitcast i16* %332 to <8 x i16>*
+  %334 = load <8 x i16>, <8 x i16>* %333, align 16, !tbaa !24
+  %335 = xor <8 x i16> %334, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %336 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 472
+  %337 = bitcast i16* %336 to <8 x i16>*
+  store <8 x i16> %335, <8 x i16>* %337, align 16, !tbaa !24
+  %338 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 224
+  %339 = bitcast i16* %338 to <8 x i16>*
+  %340 = load <8 x i16>, <8 x i16>* %339, align 16, !tbaa !24
+  %341 = xor <8 x i16> %340, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %342 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 480
+  %343 = bitcast i16* %342 to <8 x i16>*
+  store <8 x i16> %341, <8 x i16>* %343, align 16, !tbaa !24
+  %344 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 232
+  %345 = bitcast i16* %344 to <8 x i16>*
+  %346 = load <8 x i16>, <8 x i16>* %345, align 16, !tbaa !24
+  %347 = xor <8 x i16> %346, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %348 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 488
+  %349 = bitcast i16* %348 to <8 x i16>*
+  store <8 x i16> %347, <8 x i16>* %349, align 16, !tbaa !24
+  %350 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 240
+  %351 = bitcast i16* %350 to <8 x i16>*
+  %352 = load <8 x i16>, <8 x i16>* %351, align 16, !tbaa !24
+  %353 = xor <8 x i16> %352, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %354 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 496
+  %355 = bitcast i16* %354 to <8 x i16>*
+  store <8 x i16> %353, <8 x i16>* %355, align 16, !tbaa !24
+  %356 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 248
+  %357 = bitcast i16* %356 to <8 x i16>*
+  %358 = load <8 x i16>, <8 x i16>* %357, align 16, !tbaa !24
+  %359 = xor <8 x i16> %358, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %360 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 504
+  %361 = bitcast i16* %360 to <8 x i16>*
+  store <8 x i16> %359, <8 x i16>* %361, align 16, !tbaa !24
+  br label %390
+
+362:                                              ; preds = %362, %2
+  %363 = phi i64 [ 0, %2 ], [ %388, %362 ]
+  %364 = phi i64 [ 1, %2 ], [ %387, %362 ]
+  %365 = trunc i64 %363 to i16
+  %366 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %4, i64 0, i32 0, i64 %364
+  store i16 %365, i16* %366, align 2, !tbaa !24
+  %367 = icmp ult i64 %364, 32768
+  %368 = shl i64 %364, 1
+  %369 = and i64 %368, 65534
+  %370 = xor i64 %369, 45
+  %371 = select i1 %367, i64 %368, i64 %370
+  %372 = trunc i64 %363 to i16
+  %373 = add i16 %372, 1
+  %374 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %4, i64 0, i32 0, i64 %371
+  store i16 %373, i16* %374, align 2, !tbaa !24
+  %375 = icmp ult i64 %371, 32768
+  %376 = shl i64 %371, 1
+  %377 = and i64 %376, 65534
+  %378 = xor i64 %377, 45
+  %379 = select i1 %375, i64 %376, i64 %378
+  %380 = trunc i64 %363 to i16
+  %381 = add i16 %380, 2
+  %382 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %4, i64 0, i32 0, i64 %379
+  store i16 %381, i16* %382, align 2, !tbaa !24
+  %383 = icmp ult i64 %379, 32768
+  %384 = shl i64 %379, 1
+  %385 = and i64 %384, 65534
+  %386 = xor i64 %385, 45
+  %387 = select i1 %383, i64 %384, i64 %386
+  %388 = add nuw nsw i64 %363, 3
+  %389 = icmp eq i64 %388, 65535
+  br i1 %389, label %12, label %362, !llvm.loop !26
+
+390:                                              ; preds = %390, %12
+  %391 = phi i64 [ 0, %12 ], [ %423, %390 ]
+  %392 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %391
+  %393 = bitcast i16* %392 to <8 x i16>*
+  %394 = load <8 x i16>, <8 x i16>* %393, align 16, !tbaa !24
+  %395 = xor <8 x i16> %394, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %396 = add nuw nsw i64 %391, 512
+  %397 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %396
+  %398 = bitcast i16* %397 to <8 x i16>*
+  store <8 x i16> %395, <8 x i16>* %398, align 16, !tbaa !24
+  %399 = or i64 %391, 8
+  %400 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %399
+  %401 = bitcast i16* %400 to <8 x i16>*
+  %402 = load <8 x i16>, <8 x i16>* %401, align 16, !tbaa !24
+  %403 = xor <8 x i16> %402, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %404 = add nuw nsw i64 %391, 520
+  %405 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %404
+  %406 = bitcast i16* %405 to <8 x i16>*
+  store <8 x i16> %403, <8 x i16>* %406, align 16, !tbaa !24
+  %407 = or i64 %391, 16
+  %408 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %407
+  %409 = bitcast i16* %408 to <8 x i16>*
+  %410 = load <8 x i16>, <8 x i16>* %409, align 16, !tbaa !24
+  %411 = xor <8 x i16> %410, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %412 = add nuw nsw i64 %391, 528
+  %413 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %412
+  %414 = bitcast i16* %413 to <8 x i16>*
+  store <8 x i16> %411, <8 x i16>* %414, align 16, !tbaa !24
+  %415 = or i64 %391, 24
+  %416 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %415
+  %417 = bitcast i16* %416 to <8 x i16>*
+  %418 = load <8 x i16>, <8 x i16>* %417, align 16, !tbaa !24
+  %419 = xor <8 x i16> %418, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %420 = add nuw nsw i64 %391, 536
+  %421 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %420
+  %422 = bitcast i16* %421 to <8 x i16>*
+  store <8 x i16> %419, <8 x i16>* %422, align 16, !tbaa !24
+  %423 = add nuw nsw i64 %391, 32
+  %424 = icmp eq i64 %423, 512
+  br i1 %424, label %425, label %390, !llvm.loop !28
+
+425:                                              ; preds = %390, %425
+  %426 = phi i64 [ %458, %425 ], [ 0, %390 ]
+  %427 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %426
+  %428 = bitcast i16* %427 to <8 x i16>*
+  %429 = load <8 x i16>, <8 x i16>* %428, align 16, !tbaa !24
+  %430 = xor <8 x i16> %429, <i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250>
+  %431 = add nuw nsw i64 %426, 1024
+  %432 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %431
+  %433 = bitcast i16* %432 to <8 x i16>*
+  store <8 x i16> %430, <8 x i16>* %433, align 16, !tbaa !24
+  %434 = or i64 %426, 8
+  %435 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %434
+  %436 = bitcast i16* %435 to <8 x i16>*
+  %437 = load <8 x i16>, <8 x i16>* %436, align 16, !tbaa !24
+  %438 = xor <8 x i16> %437, <i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250>
+  %439 = add nuw nsw i64 %426, 1032
+  %440 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %439
+  %441 = bitcast i16* %440 to <8 x i16>*
+  store <8 x i16> %438, <8 x i16>* %441, align 16, !tbaa !24
+  %442 = or i64 %426, 16
+  %443 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %442
+  %444 = bitcast i16* %443 to <8 x i16>*
+  %445 = load <8 x i16>, <8 x i16>* %444, align 16, !tbaa !24
+  %446 = xor <8 x i16> %445, <i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250>
+  %447 = add nuw nsw i64 %426, 1040
+  %448 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %447
+  %449 = bitcast i16* %448 to <8 x i16>*
+  store <8 x i16> %446, <8 x i16>* %449, align 16, !tbaa !24
+  %450 = or i64 %426, 24
+  %451 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %450
+  %452 = bitcast i16* %451 to <8 x i16>*
+  %453 = load <8 x i16>, <8 x i16>* %452, align 16, !tbaa !24
+  %454 = xor <8 x i16> %453, <i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250>
+  %455 = add nuw nsw i64 %426, 1048
+  %456 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %455
+  %457 = bitcast i16* %456 to <8 x i16>*
+  store <8 x i16> %454, <8 x i16>* %457, align 16, !tbaa !24
+  %458 = add nuw nsw i64 %426, 32
+  %459 = icmp eq i64 %458, 1024
+  br i1 %459, label %460, label %425, !llvm.loop !30
+
+460:                                              ; preds = %425, %460
+  %461 = phi i64 [ %493, %460 ], [ 0, %425 ]
+  %462 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %461
+  %463 = bitcast i16* %462 to <8 x i16>*
+  %464 = load <8 x i16>, <8 x i16>* %463, align 16, !tbaa !24
+  %465 = xor <8 x i16> %464, <i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176>
+  %466 = add nuw nsw i64 %461, 2048
+  %467 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %466
+  %468 = bitcast i16* %467 to <8 x i16>*
+  store <8 x i16> %465, <8 x i16>* %468, align 16, !tbaa !24
+  %469 = or i64 %461, 8
+  %470 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %469
+  %471 = bitcast i16* %470 to <8 x i16>*
+  %472 = load <8 x i16>, <8 x i16>* %471, align 16, !tbaa !24
+  %473 = xor <8 x i16> %472, <i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176>
+  %474 = add nuw nsw i64 %461, 2056
+  %475 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %474
+  %476 = bitcast i16* %475 to <8 x i16>*
+  store <8 x i16> %473, <8 x i16>* %476, align 16, !tbaa !24
+  %477 = or i64 %461, 16
+  %478 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %477
+  %479 = bitcast i16* %478 to <8 x i16>*
+  %480 = load <8 x i16>, <8 x i16>* %479, align 16, !tbaa !24
+  %481 = xor <8 x i16> %480, <i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176>
+  %482 = add nuw nsw i64 %461, 2064
+  %483 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %482
+  %484 = bitcast i16* %483 to <8 x i16>*
+  store <8 x i16> %481, <8 x i16>* %484, align 16, !tbaa !24
+  %485 = or i64 %461, 24
+  %486 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %485
+  %487 = bitcast i16* %486 to <8 x i16>*
+  %488 = load <8 x i16>, <8 x i16>* %487, align 16, !tbaa !24
+  %489 = xor <8 x i16> %488, <i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176>
+  %490 = add nuw nsw i64 %461, 2072
+  %491 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %490
+  %492 = bitcast i16* %491 to <8 x i16>*
+  store <8 x i16> %489, <8 x i16>* %492, align 16, !tbaa !24
+  %493 = add nuw nsw i64 %461, 32
+  %494 = icmp eq i64 %493, 2048
+  br i1 %494, label %495, label %460, !llvm.loop !31
+
+495:                                              ; preds = %460, %495
+  %496 = phi i64 [ %528, %495 ], [ 0, %460 ]
+  %497 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %496
+  %498 = bitcast i16* %497 to <8 x i16>*
+  %499 = load <8 x i16>, <8 x i16>* %498, align 16, !tbaa !24
+  %500 = xor <8 x i16> %499, <i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584>
+  %501 = add nuw nsw i64 %496, 4096
+  %502 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %501
+  %503 = bitcast i16* %502 to <8 x i16>*
+  store <8 x i16> %500, <8 x i16>* %503, align 16, !tbaa !24
+  %504 = or i64 %496, 8
+  %505 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %504
+  %506 = bitcast i16* %505 to <8 x i16>*
+  %507 = load <8 x i16>, <8 x i16>* %506, align 16, !tbaa !24
+  %508 = xor <8 x i16> %507, <i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584>
+  %509 = add nuw nsw i64 %496, 4104
+  %510 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %509
+  %511 = bitcast i16* %510 to <8 x i16>*
+  store <8 x i16> %508, <8 x i16>* %511, align 16, !tbaa !24
+  %512 = or i64 %496, 16
+  %513 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %512
+  %514 = bitcast i16* %513 to <8 x i16>*
+  %515 = load <8 x i16>, <8 x i16>* %514, align 16, !tbaa !24
+  %516 = xor <8 x i16> %515, <i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584>
+  %517 = add nuw nsw i64 %496, 4112
+  %518 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %517
+  %519 = bitcast i16* %518 to <8 x i16>*
+  store <8 x i16> %516, <8 x i16>* %519, align 16, !tbaa !24
+  %520 = or i64 %496, 24
+  %521 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %520
+  %522 = bitcast i16* %521 to <8 x i16>*
+  %523 = load <8 x i16>, <8 x i16>* %522, align 16, !tbaa !24
+  %524 = xor <8 x i16> %523, <i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584>
+  %525 = add nuw nsw i64 %496, 4120
+  %526 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %525
+  %527 = bitcast i16* %526 to <8 x i16>*
+  store <8 x i16> %524, <8 x i16>* %527, align 16, !tbaa !24
+  %528 = add nuw nsw i64 %496, 32
+  %529 = icmp eq i64 %528, 4096
+  br i1 %529, label %530, label %495, !llvm.loop !32
+
+530:                                              ; preds = %495, %530
+  %531 = phi i64 [ %563, %530 ], [ 0, %495 ]
+  %532 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %531
+  %533 = bitcast i16* %532 to <8 x i16>*
+  %534 = load <8 x i16>, <8 x i16>* %533, align 16, !tbaa !24
+  %535 = xor <8 x i16> %534, <i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228>
+  %536 = add nuw nsw i64 %531, 8192
+  %537 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %536
+  %538 = bitcast i16* %537 to <8 x i16>*
+  store <8 x i16> %535, <8 x i16>* %538, align 16, !tbaa !24
+  %539 = or i64 %531, 8
+  %540 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %539
+  %541 = bitcast i16* %540 to <8 x i16>*
+  %542 = load <8 x i16>, <8 x i16>* %541, align 16, !tbaa !24
+  %543 = xor <8 x i16> %542, <i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228>
+  %544 = add nuw nsw i64 %531, 8200
+  %545 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %544
+  %546 = bitcast i16* %545 to <8 x i16>*
+  store <8 x i16> %543, <8 x i16>* %546, align 16, !tbaa !24
+  %547 = or i64 %531, 16
+  %548 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %547
+  %549 = bitcast i16* %548 to <8 x i16>*
+  %550 = load <8 x i16>, <8 x i16>* %549, align 16, !tbaa !24
+  %551 = xor <8 x i16> %550, <i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228>
+  %552 = add nuw nsw i64 %531, 8208
+  %553 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %552
+  %554 = bitcast i16* %553 to <8 x i16>*
+  store <8 x i16> %551, <8 x i16>* %554, align 16, !tbaa !24
+  %555 = or i64 %531, 24
+  %556 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %555
+  %557 = bitcast i16* %556 to <8 x i16>*
+  %558 = load <8 x i16>, <8 x i16>* %557, align 16, !tbaa !24
+  %559 = xor <8 x i16> %558, <i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228>
+  %560 = add nuw nsw i64 %531, 8216
+  %561 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %560
+  %562 = bitcast i16* %561 to <8 x i16>*
+  store <8 x i16> %559, <8 x i16>* %562, align 16, !tbaa !24
+  %563 = add nuw nsw i64 %531, 32
+  %564 = icmp eq i64 %563, 8192
+  br i1 %564, label %565, label %530, !llvm.loop !33
+
+565:                                              ; preds = %530, %565
+  %566 = phi i64 [ %598, %565 ], [ 0, %530 ]
+  %567 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %566
+  %568 = bitcast i16* %567 to <8 x i16>*
+  %569 = load <8 x i16>, <8 x i16>* %568, align 16, !tbaa !24
+  %570 = xor <8 x i16> %569, <i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200>
+  %571 = add nuw nsw i64 %566, 16384
+  %572 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %571
+  %573 = bitcast i16* %572 to <8 x i16>*
+  store <8 x i16> %570, <8 x i16>* %573, align 16, !tbaa !24
+  %574 = or i64 %566, 8
+  %575 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %574
+  %576 = bitcast i16* %575 to <8 x i16>*
+  %577 = load <8 x i16>, <8 x i16>* %576, align 16, !tbaa !24
+  %578 = xor <8 x i16> %577, <i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200>
+  %579 = add nuw nsw i64 %566, 16392
+  %580 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %579
+  %581 = bitcast i16* %580 to <8 x i16>*
+  store <8 x i16> %578, <8 x i16>* %581, align 16, !tbaa !24
+  %582 = or i64 %566, 16
+  %583 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %582
+  %584 = bitcast i16* %583 to <8 x i16>*
+  %585 = load <8 x i16>, <8 x i16>* %584, align 16, !tbaa !24
+  %586 = xor <8 x i16> %585, <i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200>
+  %587 = add nuw nsw i64 %566, 16400
+  %588 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %587
+  %589 = bitcast i16* %588 to <8 x i16>*
+  store <8 x i16> %586, <8 x i16>* %589, align 16, !tbaa !24
+  %590 = or i64 %566, 24
+  %591 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %590
+  %592 = bitcast i16* %591 to <8 x i16>*
+  %593 = load <8 x i16>, <8 x i16>* %592, align 16, !tbaa !24
+  %594 = xor <8 x i16> %593, <i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200>
+  %595 = add nuw nsw i64 %566, 16408
+  %596 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %595
+  %597 = bitcast i16* %596 to <8 x i16>*
+  store <8 x i16> %594, <8 x i16>* %597, align 16, !tbaa !24
+  %598 = add nuw nsw i64 %566, 32
+  %599 = icmp eq i64 %598, 16384
+  br i1 %599, label %600, label %565, !llvm.loop !34
+
+600:                                              ; preds = %565, %600
+  %601 = phi i64 [ %633, %600 ], [ 0, %565 ]
+  %602 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %601
+  %603 = bitcast i16* %602 to <8 x i16>*
+  %604 = load <8 x i16>, <8 x i16>* %603, align 16, !tbaa !24
+  %605 = xor <8 x i16> %604, <i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338>
+  %606 = add nuw nsw i64 %601, 32768
+  %607 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %606
+  %608 = bitcast i16* %607 to <8 x i16>*
+  store <8 x i16> %605, <8 x i16>* %608, align 16, !tbaa !24
+  %609 = or i64 %601, 8
+  %610 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %609
+  %611 = bitcast i16* %610 to <8 x i16>*
+  %612 = load <8 x i16>, <8 x i16>* %611, align 16, !tbaa !24
+  %613 = xor <8 x i16> %612, <i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338>
+  %614 = add nuw nsw i64 %601, 32776
+  %615 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %614
+  %616 = bitcast i16* %615 to <8 x i16>*
+  store <8 x i16> %613, <8 x i16>* %616, align 16, !tbaa !24
+  %617 = or i64 %601, 16
+  %618 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %617
+  %619 = bitcast i16* %618 to <8 x i16>*
+  %620 = load <8 x i16>, <8 x i16>* %619, align 16, !tbaa !24
+  %621 = xor <8 x i16> %620, <i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338>
+  %622 = add nuw nsw i64 %601, 32784
+  %623 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %622
+  %624 = bitcast i16* %623 to <8 x i16>*
+  store <8 x i16> %621, <8 x i16>* %624, align 16, !tbaa !24
+  %625 = or i64 %601, 24
+  %626 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %625
+  %627 = bitcast i16* %626 to <8 x i16>*
+  %628 = load <8 x i16>, <8 x i16>* %627, align 16, !tbaa !24
+  %629 = xor <8 x i16> %628, <i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338>
+  %630 = add nuw nsw i64 %601, 32792
+  %631 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %630
+  %632 = bitcast i16* %631 to <8 x i16>*
+  store <8 x i16> %629, <8 x i16>* %632, align 16, !tbaa !24
+  %633 = add nuw nsw i64 %601, 32
+  %634 = icmp eq i64 %633, 32768
+  br i1 %634, label %635, label %600, !llvm.loop !35
+
+635:                                              ; preds = %600, %635
+  %636 = phi i64 [ %660, %635 ], [ 0, %600 ]
+  %637 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %636
+  %638 = load i16, i16* %637, align 8, !tbaa !24
+  %639 = zext i16 %638 to i64
+  %640 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %4, i64 0, i32 0, i64 %639
+  %641 = load i16, i16* %640, align 2, !tbaa !24
+  store i16 %641, i16* %637, align 8, !tbaa !24
+  %642 = or i64 %636, 1
+  %643 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %642
+  %644 = load i16, i16* %643, align 2, !tbaa !24
+  %645 = zext i16 %644 to i64
+  %646 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %4, i64 0, i32 0, i64 %645
+  %647 = load i16, i16* %646, align 2, !tbaa !24
+  store i16 %647, i16* %643, align 2, !tbaa !24
+  %648 = or i64 %636, 2
+  %649 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %648
+  %650 = load i16, i16* %649, align 4, !tbaa !24
+  %651 = zext i16 %650 to i64
+  %652 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %4, i64 0, i32 0, i64 %651
+  %653 = load i16, i16* %652, align 2, !tbaa !24
+  store i16 %653, i16* %649, align 4, !tbaa !24
+  %654 = or i64 %636, 3
+  %655 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %654
+  %656 = load i16, i16* %655, align 2, !tbaa !24
+  %657 = zext i16 %656 to i64
+  %658 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %4, i64 0, i32 0, i64 %657
+  %659 = load i16, i16* %658, align 2, !tbaa !24
+  store i16 %659, i16* %655, align 2, !tbaa !24
+  %660 = add nuw nsw i64 %636, 4
+  %661 = icmp eq i64 %660, 65536
+  br i1 %661, label %738, label %635, !llvm.loop !36
+
+662:                                              ; preds = %738
+  %663 = load i16, i16* %13, align 2, !tbaa !24
+  %664 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %4, i64 0, i32 0, i64 65535
+  store i16 %663, i16* %664, align 2, !tbaa !24
+  %665 = bitcast %"struct.std::array"* %5 to i8*
+  call void @llvm.lifetime.start.p0i8(i64 131072, i8* nonnull %665) #9
+  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 2 dereferenceable(131072) %665, i8* noundef nonnull align 16 dereferenceable(131072) %6, i64 131072, i1 false), !tbaa.struct !37
+  %666 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %5, i64 0, i32 0, i64 0
+  store i16 0, i16* %666, align 2, !tbaa !24
+  br label %669
+
+667:                                              ; preds = %708
+  %668 = icmp ult i64 %670, 32768
+  br i1 %668, label %669, label %732, !llvm.loop !39
+
+669:                                              ; preds = %667, %662
+  %670 = phi i64 [ 1, %662 ], [ %671, %667 ]
+  %671 = shl i64 %670, 1
+  %672 = icmp ult i64 %670, 8
+  %673 = and i64 %670, -8
+  %674 = icmp eq i64 %670, %673
+  br label %675
+
+675:                                              ; preds = %708, %669
+  %676 = phi i64 [ %670, %669 ], [ %711, %708 ]
+  %677 = phi i64 [ 0, %669 ], [ %709, %708 ]
+  br i1 %672, label %706, label %678
+
+678:                                              ; preds = %675
+  %679 = add i64 %677, %673
+  br label %680
+
+680:                                              ; preds = %680, %678
+  %681 = phi i64 [ 0, %678 ], [ %703, %680 ]
+  %682 = add i64 %677, %681
+  %683 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %5, i64 0, i32 0, i64 %682
+  %684 = bitcast i16* %683 to <8 x i16>*
+  %685 = load <8 x i16>, <8 x i16>* %684, align 2, !tbaa !24
+  %686 = zext <8 x i16> %685 to <8 x i32>
+  %687 = add nuw nsw <8 x i32> %686, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
+  %688 = add nuw nsw i64 %682, %670
+  %689 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %5, i64 0, i32 0, i64 %688
+  %690 = bitcast i16* %689 to <8 x i16>*
+  %691 = load <8 x i16>, <8 x i16>* %690, align 2, !tbaa !24
+  %692 = zext <8 x i16> %691 to <8 x i32>
+  %693 = sub nuw nsw <8 x i32> %687, %692
+  %694 = add nuw nsw <8 x i32> %692, %686
+  %695 = lshr <8 x i32> %694, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
+  %696 = add nuw nsw <8 x i32> %695, %694
+  %697 = trunc <8 x i32> %696 to <8 x i16>
+  %698 = bitcast i16* %683 to <8 x i16>*
+  store <8 x i16> %697, <8 x i16>* %698, align 2, !tbaa !24
+  %699 = lshr <8 x i32> %693, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
+  %700 = add nuw nsw <8 x i32> %699, %693
+  %701 = trunc <8 x i32> %700 to <8 x i16>
+  %702 = bitcast i16* %689 to <8 x i16>*
+  store <8 x i16> %701, <8 x i16>* %702, align 2, !tbaa !24
+  %703 = add nuw i64 %681, 8
+  %704 = icmp eq i64 %703, %673
+  br i1 %704, label %705, label %680, !llvm.loop !40
+
+705:                                              ; preds = %680
+  br i1 %674, label %708, label %706
+
+706:                                              ; preds = %675, %705
+  %707 = phi i64 [ %677, %675 ], [ %679, %705 ]
+  br label %712
+
+708:                                              ; preds = %712, %705
+  %709 = add nuw nsw i64 %677, %671
+  %710 = icmp ult i64 %709, 65536
+  %711 = add nuw nsw i64 %676, %671
+  br i1 %710, label %675, label %667, !llvm.loop !41
+
+712:                                              ; preds = %706, %712
+  %713 = phi i64 [ %730, %712 ], [ %707, %706 ]
+  %714 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %5, i64 0, i32 0, i64 %713
+  %715 = load i16, i16* %714, align 2, !tbaa !24
+  %716 = zext i16 %715 to i32
+  %717 = add nuw nsw i32 %716, 65535
+  %718 = add nuw nsw i64 %713, %670
+  %719 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %5, i64 0, i32 0, i64 %718
+  %720 = load i16, i16* %719, align 2, !tbaa !24
+  %721 = zext i16 %720 to i32
+  %722 = sub nuw nsw i32 %717, %721
+  %723 = add nuw nsw i32 %721, %716
+  %724 = lshr i32 %723, 16
+  %725 = add nuw nsw i32 %724, %723
+  %726 = trunc i32 %725 to i16
+  store i16 %726, i16* %714, align 2, !tbaa !24
+  %727 = lshr i32 %722, 16
+  %728 = add nuw nsw i32 %727, %722
+  %729 = trunc i32 %728 to i16
+  store i16 %729, i16* %719, align 2, !tbaa !24
+  %730 = add nuw nsw i64 %713, 1
+  %731 = icmp eq i64 %730, %676
+  br i1 %731, label %708, label %712, !llvm.loop !42
+
+732:                                              ; preds = %667
+  %733 = bitcast %"class.std::tuple"* %0 to i8*
+  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 2 dereferenceable(131072) %733, i8* noundef nonnull align 2 dereferenceable(131072) %665, i64 131072, i1 false) #9, !tbaa.struct !37
+  %734 = getelementptr inbounds %"class.std::tuple", %"class.std::tuple"* %0, i64 0, i32 0, i32 0, i32 1
+  %735 = bitcast %"struct.std::_Head_base.2"* %734 to i8*
+  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 2 dereferenceable(131072) %735, i8* noundef nonnull align 2 dereferenceable(131072) %9, i64 131072, i1 false) #9, !tbaa.struct !37
+  %736 = getelementptr inbounds %"class.std::tuple", %"class.std::tuple"* %0, i64 0, i32 0, i32 1
+  %737 = bitcast %"struct.std::_Head_base.3"* %736 to i8*
+  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 2 dereferenceable(131072) %737, i8* noundef nonnull align 16 dereferenceable(131072) %6, i64 131072, i1 false) #9, !tbaa.struct !37
+  call void @llvm.lifetime.end.p0i8(i64 131072, i8* nonnull %665) #9
+  call void @llvm.lifetime.end.p0i8(i64 131072, i8* nonnull %9) #9
+  call void @llvm.lifetime.end.p0i8(i64 131072, i8* nonnull %6) #9
+  ret void
+
+738:                                              ; preds = %635, %738
+  %739 = phi i64 [ %763, %738 ], [ 0, %635 ]
+  %740 = trunc i64 %739 to i16
+  %741 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %739
+  %742 = load i16, i16* %741, align 8, !tbaa !24
+  %743 = zext i16 %742 to i64
+  %744 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %4, i64 0, i32 0, i64 %743
+  store i16 %740, i16* %744, align 2, !tbaa !24
+  %745 = or i64 %739, 1
+  %746 = trunc i64 %745 to i16
+  %747 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %745
+  %748 = load i16, i16* %747, align 2, !tbaa !24
+  %749 = zext i16 %748 to i64
+  %750 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %4, i64 0, i32 0, i64 %749
+  store i16 %746, i16* %750, align 2, !tbaa !24
+  %751 = or i64 %739, 2
+  %752 = trunc i64 %751 to i16
+  %753 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %751
+  %754 = load i16, i16* %753, align 4, !tbaa !24
+  %755 = zext i16 %754 to i64
+  %756 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %4, i64 0, i32 0, i64 %755
+  store i16 %752, i16* %756, align 2, !tbaa !24
+  %757 = or i64 %739, 3
+  %758 = trunc i64 %757 to i16
+  %759 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %3, i64 0, i32 0, i64 %757
+  %760 = load i16, i16* %759, align 2, !tbaa !24
+  %761 = zext i16 %760 to i64
+  %762 = getelementptr inbounds %"struct.std::array", %"struct.std::array"* %4, i64 0, i32 0, i64 %761
+  store i16 %758, i16* %762, align 2, !tbaa !24
+  %763 = add nuw nsw i64 %739, 4
+  %764 = icmp eq i64 %763, 65536
+  br i1 %764, label %662, label %738, !llvm.loop !44
+}
+
+; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
+declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4
+
+; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
+declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5
+
+declare i32 @__gxx_personality_v0(...)
+
+; Function Attrs: mustprogress uwtable
+define linkonce_odr void @_ZN6ec_cpp11AdditiveFFTINS_16f2e16_DescriptorEE9initalizeERKSt5tupleIJSt5arrayItLm65536EES5_S5_EE(%"struct.ec_cpp::AdditiveFFT"* noalias sret(%"struct.ec_cpp::AdditiveFFT") align 2 %0, %"class.std::tuple"* noundef nonnull align 2 dereferenceable(393216) %1) local_unnamed_addr #6 comdat align 2 {
+  %3 = alloca [15 x i16], align 16
+  %4 = alloca [65535 x %"struct.ec_cpp::Additive"], align 16
+  %5 = bitcast [15 x i16]* %3 to i8*
+  call void @llvm.lifetime.start.p0i8(i64 30, i8* nonnull %5) #9
+  %6 = bitcast [65535 x %"struct.ec_cpp::Additive"]* %4 to i8*
+  call void @llvm.lifetime.start.p0i8(i64 131070, i8* nonnull %6) #9
+  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(131070) %6, i8 0, i64 131070, i1 false)
+  %7 = bitcast [15 x i16]* %3 to <8 x i16>*
+  store <8 x i16> <i16 2, i16 4, i16 8, i16 16, i16 32, i16 64, i16 128, i16 256>, <8 x i16>* %7, align 16, !tbaa !24
+  %8 = getelementptr inbounds [15 x i16], [15 x i16]* %3, i64 0, i64 8
+  store i16 512, i16* %8, align 16, !tbaa !24
+  %9 = getelementptr inbounds [15 x i16], [15 x i16]* %3, i64 0, i64 9
+  store i16 1024, i16* %9, align 2, !tbaa !24
+  %10 = getelementptr inbounds [15 x i16], [15 x i16]* %3, i64 0, i64 10
+  store i16 2048, i16* %10, align 4, !tbaa !24
+  %11 = getelementptr inbounds [15 x i16], [15 x i16]* %3, i64 0, i64 11
+  store i16 4096, i16* %11, align 2, !tbaa !24
+  %12 = getelementptr inbounds [15 x i16], [15 x i16]* %3, i64 0, i64 12
+  store i16 8192, i16* %12, align 8, !tbaa !24
+  %13 = getelementptr inbounds [15 x i16], [15 x i16]* %3, i64 0, i64 13
+  store i16 16384, i16* %13, align 2, !tbaa !24
+  %14 = getelementptr inbounds [15 x i16], [15 x i16]* %3, i64 0, i64 14
+  store i16 -32768, i16* %14, align 4, !tbaa !24
+  br label %17
+
+15:                                               ; preds = %97, %47
+  %16 = icmp eq i64 %19, 15
+  br i1 %16, label %102, label %17, !llvm.loop !45
+
+17:                                               ; preds = %15, %2
+  %18 = phi i64 [ %19, %15 ], [ 0, %2 ]
+  %19 = add nuw nsw i64 %18, 1
+  %20 = shl i64 2, %18
+  %21 = shl nsw i64 -1, %18
+  %22 = xor i64 %21, -1
+  %23 = getelementptr inbounds [65535 x %"struct.ec_cpp::Additive"], [65535 x %"struct.ec_cpp::Additive"]* %4, i64 0, i64 %22, i32 0
+  store i16 0, i16* %23, align 2, !tbaa.struct !46
+  br label %54
+
+24:                                               ; preds = %62, %54
+  %25 = icmp ult i64 %55, 14
+  br i1 %25, label %54, label %26, !llvm.loop !47
+
+26:                                               ; preds = %24
+  %27 = getelementptr inbounds [15 x i16], [15 x i16]* %3, i64 0, i64 %18
+  %28 = load i16, i16* %27, align 2, !tbaa !24
+  %29 = icmp eq i16 %28, 0
+  br i1 %29, label %47, label %30
+
+30:                                               ; preds = %26
+  %31 = xor i16 %28, 1
+  %32 = zext i16 %31 to i64
+  %33 = getelementptr inbounds %"class.std::tuple", %"class.std::tuple"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i64 %32
+  %34 = load i16, i16* %33, align 2, !tbaa !24
+  %35 = zext i16 %28 to i64
+  %36 = getelementptr inbounds %"class.std::tuple", %"class.std::tuple"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i64 %35
+  %37 = load i16, i16* %36, align 2, !tbaa !24
+  %38 = zext i16 %37 to i32
+  %39 = zext i16 %34 to i32
+  %40 = add nuw nsw i32 %38, %39
+  %41 = and i32 %40, 65535
+  %42 = lshr i32 %40, 16
+  %43 = add nuw nsw i32 %41, %42
+  %44 = zext i32 %43 to i64
+  %45 = getelementptr inbounds %"class.std::tuple", %"class.std::tuple"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 %44
+  %46 = load i16, i16* %45, align 2, !tbaa !24
+  br label %47
+
+47:                                               ; preds = %26, %30
+  %48 = phi i16 [ %46, %30 ], [ 0, %26 ]
+  %49 = zext i16 %48 to i64
+  %50 = getelementptr inbounds %"class.std::tuple", %"class.std::tuple"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i64 %49
+  %51 = load i16, i16* %50, align 2, !tbaa !24
+  %52 = xor i16 %51, -1
+  store i16 %52, i16* %27, align 2, !tbaa !24
+  %53 = icmp ult i64 %18, 14
+  br i1 %53, label %71, label %15
+
+54:                                               ; preds = %17, %24
+  %55 = phi i64 [ %56, %24 ], [ %18, %17 ]
+  %56 = add nuw nsw i64 %55, 1
+  %57 = shl i64 2, %55
+  %58 = icmp ugt i64 %57, %22
+  br i1 %58, label %59, label %24
+
+59:                                               ; preds = %54
+  %60 = getelementptr inbounds [15 x i16], [15 x i16]* %3, i64 0, i64 %55
+  %61 = load i16, i16* %60, align 2, !tbaa !24
+  br label %62
+
+62:                                               ; preds = %59, %62
+  %63 = phi i64 [ %22, %59 ], [ %69, %62 ]
+  %64 = getelementptr inbounds [65535 x %"struct.ec_cpp::Additive"], [65535 x %"struct.ec_cpp::Additive"]* %4, i64 0, i64 %63, i32 0
+  %65 = load i16, i16* %64, align 2, !tbaa !48
+  %66 = xor i16 %61, %65
+  %67 = add i64 %63, %57
+  %68 = getelementptr inbounds [65535 x %"struct.ec_cpp::Additive"], [65535 x %"struct.ec_cpp::Additive"]* %4, i64 0, i64 %67, i32 0
+  store i16 %66, i16* %68, align 2, !tbaa.struct !46
+  %69 = add i64 %63, %20
+  %70 = icmp ult i64 %69, %57
+  br i1 %70, label %62, label %24, !llvm.loop !50
+
+71:                                               ; preds = %47, %97
+  %72 = phi i64 [ %99, %97 ], [ %19, %47 ]
+  %73 = getelementptr inbounds [15 x i16], [15 x i16]* %3, i64 0, i64 %72
+  %74 = load i16, i16* %73, align 2, !tbaa !24
+  %75 = icmp eq i16 %74, 0
+  br i1 %75, label %97, label %76
+
+76:                                               ; preds = %71
+  %77 = xor i16 %74, 1
+  %78 = zext i16 %77 to i64
+  %79 = getelementptr inbounds %"class.std::tuple", %"class.std::tuple"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i64 %78
+  %80 = load i16, i16* %79, align 2, !tbaa !24
+  %81 = zext i16 %80 to i32
+  %82 = load i16, i16* %27, align 2, !tbaa !24
+  %83 = zext i16 %82 to i32
+  %84 = add nuw nsw i32 %83, %81
+  %85 = urem i32 %84, 65535
+  %86 = zext i16 %74 to i64
+  %87 = getelementptr inbounds %"class.std::tuple", %"class.std::tuple"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i64 %86
+  %88 = load i16, i16* %87, align 2, !tbaa !24
+  %89 = zext i16 %88 to i32
+  %90 = add nuw nsw i32 %85, %89
+  %91 = and i32 %90, 65535
+  %92 = lshr i32 %90, 16
+  %93 = add nuw nsw i32 %91, %92
+  %94 = zext i32 %93 to i64
+  %95 = getelementptr inbounds %"class.std::tuple", %"class.std::tuple"* %1, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i64 %94
+  %96 = load i16, i16* %95, align 2, !tbaa !24
+  br label %97
+
+97:                                               ; preds = %71, %76
+  %98 = phi i16 [ %96, %76 ], [ 0, %71 ]
+  store i16 %98, i16* %73, align 2, !tbaa !24
+  %99 = add nuw nsw i64 %72, 1
+  %100 = icmp ult i64 %72, 14
+  br i1 %100, label %71, label %15, !llvm.loop !51
+
+101:                                              ; preds = %102
+  call void @llvm.lifetime.end.p0i8(i64 131070, i8* nonnull %6) #9
+  call void @llvm.lifetime.end.p0i8(i64 30, i8* nonnull %5) #9
+  ret void
+
+102:                                              ; preds = %15, %102
+  %103 = phi i64 [ %138, %102 ], [ 0, %15 ]
+  %104 = getelementptr inbounds [65535 x %"struct.ec_cpp::Additive"], [65535 x %"struct.ec_cpp::Additive"]* %4, i64 0, i64 %103, i32 0
+  %105 = load i16, i16* %104, align 2, !tbaa !48
+  %106 = zext i16 %105 to i64
+  %107 = getelementptr inbounds %"class.std::tuple", %"class.std::tuple"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i64 %106
+  %108 = load i16, i16* %107, align 2, !tbaa !24
+  %109 = getelementptr inbounds %"struct.ec_cpp::AdditiveFFT", %"struct.ec_cpp::AdditiveFFT"* %0, i64 0, i32 0, i64 %103
+  store i16 %108, i16* %109, align 2, !tbaa !24
+  %110 = add nuw nsw i64 %103, 1
+  %111 = getelementptr inbounds [65535 x %"struct.ec_cpp::Additive"], [65535 x %"struct.ec_cpp::Additive"]* %4, i64 0, i64 %110, i32 0
+  %112 = load i16, i16* %111, align 2, !tbaa !48
+  %113 = zext i16 %112 to i64
+  %114 = getelementptr inbounds %"class.std::tuple", %"class.std::tuple"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i64 %113
+  %115 = load i16, i16* %114, align 2, !tbaa !24
+  %116 = getelementptr inbounds %"struct.ec_cpp::AdditiveFFT", %"struct.ec_cpp::AdditiveFFT"* %0, i64 0, i32 0, i64 %110
+  store i16 %115, i16* %116, align 2, !tbaa !24
+  %117 = add nuw nsw i64 %103, 2
+  %118 = getelementptr inbounds [65535 x %"struct.ec_cpp::Additive"], [65535 x %"struct.ec_cpp::Additive"]* %4, i64 0, i64 %117, i32 0
+  %119 = load i16, i16* %118, align 2, !tbaa !48
+  %120 = zext i16 %119 to i64
+  %121 = getelementptr inbounds %"class.std::tuple", %"class.std::tuple"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i64 %120
+  %122 = load i16, i16* %121, align 2, !tbaa !24
+  %123 = getelementptr inbounds %"struct.ec_cpp::AdditiveFFT", %"struct.ec_cpp::AdditiveFFT"* %0, i64 0, i32 0, i64 %117
+  store i16 %122, i16* %123, align 2, !tbaa !24
+  %124 = add nuw nsw i64 %103, 3
+  %125 = getelementptr inbounds [65535 x %"struct.ec_cpp::Additive"], [65535 x %"struct.ec_cpp::Additive"]* %4, i64 0, i64 %124, i32 0
+  %126 = load i16, i16* %125, align 2, !tbaa !48
+  %127 = zext i16 %126 to i64
+  %128 = getelementptr inbounds %"class.std::tuple", %"class.std::tuple"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i64 %127
+  %129 = load i16, i16* %128, align 2, !tbaa !24
+  %130 = getelementptr inbounds %"struct.ec_cpp::AdditiveFFT", %"struct.ec_cpp::AdditiveFFT"* %0, i64 0, i32 0, i64 %124
+  store i16 %129, i16* %130, align 2, !tbaa !24
+  %131 = add nuw nsw i64 %103, 4
+  %132 = getelementptr inbounds [65535 x %"struct.ec_cpp::Additive"], [65535 x %"struct.ec_cpp::Additive"]* %4, i64 0, i64 %131, i32 0
+  %133 = load i16, i16* %132, align 2, !tbaa !48
+  %134 = zext i16 %133 to i64
+  %135 = getelementptr inbounds %"class.std::tuple", %"class.std::tuple"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i64 %134
+  %136 = load i16, i16* %135, align 2, !tbaa !24
+  %137 = getelementptr inbounds %"struct.ec_cpp::AdditiveFFT", %"struct.ec_cpp::AdditiveFFT"* %0, i64 0, i32 0, i64 %131
+  store i16 %136, i16* %137, align 2, !tbaa !24
+  %138 = add nuw nsw i64 %103, 5
+  %139 = icmp eq i64 %138, 65535
+  br i1 %139, label %101, label %102, !llvm.loop !52
+}
+
+; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
+declare i64 @llvm.ctlz.i64(i64, i1 immarg) #7
+
+; Function Attrs: uwtable
+define internal void @_GLOBAL__sub_I_ec_cpp.cpp() #2 section ".text.startup" {
+  %1 = alloca %class.anon, align 1
+  %2 = getelementptr inbounds %class.anon, %class.anon* %1, i64 0, i32 0
+  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %2) #9
+  call void @_ZNK6ec_cpp16f2e16_Descriptor7kTablesMUlvE_clEv(%"class.std::tuple"* nonnull sret(%"class.std::tuple") align 2 getelementptr inbounds (%"struct.ec_cpp::f2e16_Descriptor", %"struct.ec_cpp::f2e16_Descriptor"* @_ZN6ec_cpp16field_descriptorE, i64 0, i32 0), %class.anon* noundef nonnull align 1 dereferenceable(1) %1)
+  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %2) #9
+  store %"struct.ec_cpp::f2e16_Descriptor"* @_ZN6ec_cpp16field_descriptorE, %"struct.ec_cpp::f2e16_Descriptor"** getelementptr inbounds (%"struct.ec_cpp::PolyEncoder", %"struct.ec_cpp::PolyEncoder"* @_ZN6ec_cpp12poly_encoderE, i64 0, i32 0), align 8, !tbaa !17
+  call void @_ZN6ec_cpp11AdditiveFFTINS_16f2e16_DescriptorEE9initalizeERKSt5tupleIJSt5arrayItLm65536EES5_S5_EE(%"struct.ec_cpp::AdditiveFFT"* nonnull sret(%"struct.ec_cpp::AdditiveFFT") align 2 getelementptr inbounds (%"struct.ec_cpp::PolyEncoder", %"struct.ec_cpp::PolyEncoder"* @_ZN6ec_cpp12poly_encoderE, i64 0, i32 1), %"class.std::tuple"* noundef nonnull align 2 dereferenceable(393216) getelementptr inbounds (%"struct.ec_cpp::f2e16_Descriptor", %"struct.ec_cpp::f2e16_Descriptor"* @_ZN6ec_cpp16field_descriptorE, i64 0, i32 0))
+  ret void
+}
+
+; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
+declare i64 @llvm.ctpop.i64(i64) #8
+
+attributes #0 = { mustprogress nofree nosync nounwind readnone uwtable willreturn "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
+attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
+attributes #2 = { uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
+attributes #3 = { inlinehint uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
+attributes #4 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
+attributes #5 = { argmemonly mustprogress nofree nounwind willreturn }
+attributes #6 = { mustprogress uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
+attributes #7 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
+attributes #8 = { nofree nosync nounwind readnone speculatable willreturn }
+attributes #9 = { nounwind }
+
+!llvm.linker.options = !{}
+!llvm.module.flags = !{!0, !1, !2}
+!llvm.ident = !{!3}
+
+!0 = !{i32 1, !"wchar_size", i32 4}
+!1 = !{i32 7, !"PIC Level", i32 2}
+!2 = !{i32 7, !"uwtable", i32 1}
+!3 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
+!4 = !{!5, !6, i64 0}
+!5 = !{!"_ZTSNSt8__detail9__variant14_UninitializedIN6ec_cpp5ErrorELb1EEE", !6, i64 0}
+!6 = !{!"_ZTSN6ec_cpp5ErrorE", !7, i64 0}
+!7 = !{!"omnipotent char", !8, i64 0}
+!8 = !{!"Simple C++ TBAA"}
+!9 = !{i64 1, i64 65}
+!10 = !{i64 0, i64 65}
+!11 = !{!12}
+!12 = distinct !{!12, !13, !"_ZN6ec_cpp11ReedSolomonINS_11PolyEncoderINS_16f2e16_DescriptorEEEE6createEmmRKS3_: argument 0"}
+!13 = distinct !{!13, !"_ZN6ec_cpp11ReedSolomonINS_11PolyEncoderINS_16f2e16_DescriptorEEEE6createEmmRKS3_"}
+!14 = !{i64 0, i64 8, !15, i64 8, i64 8, !15, i64 16, i64 8, !15, i64 24, i64 8, !17}
+!15 = !{!16, !16, i64 0}
+!16 = !{!"long", !7, i64 0}
+!17 = !{!18, !18, i64 0}
+!18 = !{!"any pointer", !7, i64 0}
+!19 = !{i64 0, i64 8, !15, i64 8, i64 8, !15, i64 16, i64 8, !17}
+!20 = !{i64 0, i64 8, !15, i64 8, i64 8, !17}
+!21 = !{i64 0, i64 8, !17}
+!22 = !{!23, !7, i64 32}
+!23 = !{!"_ZTSNSt8__detail9__variant16_Variant_storageILb1EJN6ec_cpp11ReedSolomonINS2_11PolyEncoderINS2_16f2e16_DescriptorEEEEENS2_5ErrorEEEE", !7, i64 0, !7, i64 32}
+!24 = !{!25, !25, i64 0}
+!25 = !{!"short", !7, i64 0}
+!26 = distinct !{!26, !27}
+!27 = !{!"llvm.loop.mustprogress"}
+!28 = distinct !{!28, !27, !29}
+!29 = !{!"llvm.loop.isvectorized", i32 1}
+!30 = distinct !{!30, !27, !29}
+!31 = distinct !{!31, !27, !29}
+!32 = distinct !{!32, !27, !29}
+!33 = distinct !{!33, !27, !29}
+!34 = distinct !{!34, !27, !29}
+!35 = distinct !{!35, !27, !29}
+!36 = distinct !{!36, !27}
+!37 = !{i64 0, i64 131072, !38}
+!38 = !{!7, !7, i64 0}
+!39 = distinct !{!39, !27}
+!40 = distinct !{!40, !27, !29}
+!41 = distinct !{!41, !27}
+!42 = distinct !{!42, !27, !43, !29}
+!43 = !{!"llvm.loop.unroll.runtime.disable"}
+!44 = distinct !{!44, !27}
+!45 = distinct !{!45, !27}
+!46 = !{i64 0, i64 2, !24}
+!47 = distinct !{!47, !27}
+!48 = !{!49, !25, i64 0}
+!49 = !{!"_ZTSN6ec_cpp8AdditiveINS_16f2e16_DescriptorEEE", !25, i64 0}
+!50 = distinct !{!50, !27}
+!51 = distinct !{!51, !27}
+!52 = distinct !{!52, !27}
diff --git a/ec-cpp/CMakeLists.txt b/ec-cpp/CMakeLists.txt
index 00ff535..4d0894a 100644
--- a/ec-cpp/CMakeLists.txt
+++ b/ec-cpp/CMakeLists.txt
@@ -3,10 +3,18 @@ add_library(ec-cpp
     ./ec-cpp.cpp
 )
 
+add_library(reed-solomon-c
+    ./reed-solomon-c.cpp
+)
+
 target_include_directories(ec-cpp PRIVATE
     $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
 )
 
+target_include_directories(reed-solomon-c PRIVATE
+    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
+)
+
 install(
     TARGETS ec-cpp EXPORT erasure_coding_crust_targets
     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
@@ -14,3 +22,11 @@ install(
     RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
     INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ec-cpp
 )
+
+install(
+    TARGETS reed-solomon-c EXPORT erasure_coding_crust_targets
+    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ec-cpp
+)
diff --git a/ec-cpp/reed-solomon-c.cpp b/ec-cpp/reed-solomon-c.cpp
new file mode 100644
index 0000000..22f8c75
--- /dev/null
+++ b/ec-cpp/reed-solomon-c.cpp
@@ -0,0 +1,99 @@
+#include <assert.h>
+#include <cstdint>
+#include <optional>
+#include <stdlib.h>
+#include <vector>
+#include <iostream>
+
+#include <ec-cpp/errors.hpp>
+#include <ec-cpp/types.hpp>
+#include <ec-cpp/math.hpp>
+#include <ec-cpp/ec-cpp.hpp>
+
+struct Shard {
+    size_t len;
+    uint8_t* data;
+};
+
+struct Shards {
+    // Points to the original vector
+    void* original_ptr;
+    size_t count;
+    Shard* shards;
+};
+
+struct DecodedData {
+    void* original_ptr;
+    size_t len;
+    uint8_t* data;
+};
+
+// using PolyEncoder_f2e16 = PolyEncoder<f2e16_Descriptor>;
+ec_cpp::f2e16_Descriptor field_descriptor;
+
+ec_cpp::PolyEncoder_f2e16 poly_encoder(field_descriptor);
+
+constexpr size_t kMaxValidators = ec_cpp::f2e16_Descriptor::kFieldSize;
+
+size_t getRecoveryThreshold(size_t n_validators) {
+  assert(n_validators <= kMaxValidators);
+  assert(n_validators > 1);
+
+  const auto needed = ec_cpp::math::sat_sub_unsigned(n_validators, size_t(1ull)) / 3ull;
+  return (needed + 1ull);
+}
+
+ec_cpp::ReedSolomon<ec_cpp::PolyEncoder_f2e16> create(size_t n_validators) {
+  const auto n_wanted = n_validators;
+  auto k_wanted_result = getRecoveryThreshold(n_wanted);
+
+  return ec_cpp::resultGetValue(std::move(ec_cpp::ReedSolomon<ec_cpp::PolyEncoder_f2e16>::create(
+      n_wanted, k_wanted_result, poly_encoder)));
+}
+
+
+// Return -1 for error. Otherwise return 0
+// We assume output is already initialised.
+uint8_t encode(size_t n_validators, uint8_t* bytes, size_t bytes_len, Shards *output) {
+    auto rs = create(n_validators);
+
+    auto shards = rs.c_encode(
+        ec_cpp::Slice<uint8_t>((uint8_t *)bytes, bytes_len));
+
+    output->original_ptr = shards;
+    output->count = shards->size();
+    for (size_t i = 0; i < n_validators; i++) {
+        (output->shards[i]).data = (*shards)[i].data();
+        (output->shards[i]).len = (*shards)[i].size();
+    }
+    return 0;
+}
+
+DecodedData decode(size_t n_validators, Shard *shards, size_t n_shards) {
+    auto rs = create(n_validators);
+    std::vector<std::vector<uint8_t>> new_shards;
+    new_shards.resize(n_validators);
+
+    for (auto i = 0; i < n_shards; i++) {
+        if (shards[i].data && shards[i].len > 0) {
+            std::vector<uint8_t> new_shard(shards[i].data, shards[i].data + shards[i].len);
+            new_shards[i] = new_shard;
+        }
+    }
+    auto decoded = rs.c_reconstruct(new_shards);
+    auto bytes = ec_cpp::resultGetValue(std::move(decoded));
+
+    return DecodedData {
+        .original_ptr = bytes,
+        .len = bytes->size(),
+        .data = bytes->data()
+    };
+}
+
+void drop_decoded_data(void *original_ptr) {
+    delete ((std::vector<uint8_t>*) original_ptr);
+}
+
+void drop_shards(void *original_ptr) {
+    delete ((std::vector<std::vector<uint8_t>> *) original_ptr);
+}
diff --git a/include/ec-cpp/reed-solomon.hpp b/include/ec-cpp/reed-solomon.hpp
index d5f582b..2aac243 100644
--- a/include/ec-cpp/reed-solomon.hpp
+++ b/include/ec-cpp/reed-solomon.hpp
@@ -44,6 +44,39 @@ template <typename TPolyEncoder> struct ReedSolomon final {
     return ReedSolomon{n_po2, k_po2, n, poly_enc};
   }
 
+  std::vector<Shard>* c_encode(const Slice<uint8_t> bytes) {
+    assert(!bytes.empty());
+
+    const auto shard_len = shardLen(bytes.size());
+    assert(shard_len > 0);
+
+    const auto validator_count = wanted_n_;
+    const auto k2 = k_ * 2;
+
+    std::vector<Shard> *shards = new std::vector<Shard>;
+    shards->assign(validator_count, Shard(shard_len));
+
+    for (size_t i = 0ull; i < bytes.size(); i += k2) {
+      const size_t chunk_idx = i / k2;
+      const auto end = std::min(i + k2, bytes.size());
+      assert(i != end);
+
+      Slice<uint8_t> data_piece(&bytes[i], end - i);
+      assert(!data_piece.empty());
+      assert(data_piece.size() <= k2);
+
+      auto result = poly_enc_.encodeSub(local(), data_piece, n_, k_);
+      assert(!resultHasError(result));
+      for (size_t val_idx = 0ull; val_idx < validator_count; ++val_idx) {
+        auto &shard = (*shards)[val_idx];
+        const auto src = local()[val_idx].point_0;
+        TPolyEncoder::Descriptor::toBEBytes((uint8_t *)&shard[chunk_idx * 2ull],
+                                            src);
+      }
+    }
+    return shards;
+  }
+
   Result<std::vector<Shard>> encode(const Slice<uint8_t> bytes) {
     if (bytes.empty())
       return Error::kPayloadSizeIsZero;
@@ -133,6 +166,59 @@ template <typename TPolyEncoder> struct ReedSolomon final {
     return acc;
   }
 
+  Result<std::vector<uint8_t> *>
+  c_reconstruct(const std::vector<Shard> &received_shards) {
+    const auto gap = math::sat_sub_unsigned(n_, received_shards.size());
+
+    size_t existential_count(0ull);
+    std::optional<size_t> first_shard_len;
+    for (size_t i = 0ull; i < std::min(n_, received_shards.size()); ++i) {
+      if (!received_shards[i].empty()) {
+        ++existential_count;
+        if (!first_shard_len)
+          first_shard_len = received_shards[i].size() / 2ull;
+        else if (*first_shard_len != received_shards[i].size() / 2ull)
+          return Error::kInconsistentShardLengths;
+      }
+    }
+
+    if (existential_count < k_)
+      return Error::kNeedMoreShards;
+
+    std::array<typename TPolyEncoder::Descriptor::Multiplier,
+               TPolyEncoder::Descriptor::kFieldSize>
+        error_poly_in_log = {0};
+
+    poly_enc_.evalErrorPolynomial(received_shards, gap, error_poly_in_log,
+                                  TPolyEncoder::Descriptor::kFieldSize);
+    const auto shard_len_in_syms = *first_shard_len;
+
+    auto acc = new std::vector<uint8_t>;
+    acc->reserve(shard_len_in_syms * 2ull * k_);
+
+    local().clear();
+    local().reserve(received_shards.size());
+
+    for (size_t i = 0; i < shard_len_in_syms; ++i) {
+      local().clear();
+
+      for (const auto &s : received_shards) {
+        if (s.empty())
+          local().emplace_back(Additive<typename TPolyEncoder::Descriptor>{0});
+        else
+          local().emplace_back(Additive<typename TPolyEncoder::Descriptor>{
+              TPolyEncoder::Descriptor::fromBEBytes(
+                  &s[i * sizeof(typename TPolyEncoder::Descriptor::Elt)])});
+      }
+
+      assert(local().size() + gap == n_);
+      auto result = poly_enc_.reconstructSub(*acc, local(), received_shards, gap,
+                                             n_, k_, error_poly_in_log);
+      assert(!resultHasError(result));
+    }
+    return acc;
+  }
+
 private:
   ReedSolomon(size_t n, size_t k, size_t wanted_n, const TPolyEncoder &poly_enc)
       : n_(n), k_(k), wanted_n_(wanted_n), poly_enc_(poly_enc) {}
diff --git a/notes.md b/notes.md
new file mode 100644
index 0000000..3ead79a
--- /dev/null
+++ b/notes.md
@@ -0,0 +1,368 @@
+/usr/local/lib/libec-cpp.dylib
+
+cd build
+cmake .. -DTESTING=OFF -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=FALSE -DBENCHMARK=ON
+make DESTDIR=/home/alin/lib install
+
+output: /usr/local/lib/libec-cpp.dylib
+
+WITH AVX
+
+Encode RUST (100 cycles): 4402 us
+Decode RUST (100 cycles): 70.67 ms
+Encode C++ (100 cycles): 4195 us
+Decode C++ (100 cycles): 105.871 ms
+
+~~~ [ Benchmark case: 5000 bytes ] ~~~
+Encode RUST (100 cycles): 21.918 ms
+Decode RUST (100 cycles): 109.149 ms
+Encode C++ (100 cycles): 12.886 ms
+Decode C++ (100 cycles): 127.41 ms
+
+~~~ [ Benchmark case: 100000 bytes ] ~~~
+Encode RUST (100 cycles): 391.366 ms
+Decode RUST (100 cycles): 911.2 ms
+Encode C++ (100 cycles): 203.895 ms
+Decode C++ (100 cycles): 613.559 ms
+
+
+~~~ [ Benchmark case: 1000000 bytes ] ~~~
+Encode RUST (100 cycles): 4091.55 ms
+Decode RUST (100 cycles): 8.54421 s
+Encode C++ (100 cycles): 2193.34 ms
+Decode C++ (100 cycles): 5.13551 s
+
+~~~ [ Benchmark case: 2500000 bytes ] ~~~
+Encode RUST (100 cycles): 10.6708 s
+Decode RUST (100 cycles): 21.3144 s
+Encode C++ (100 cycles): 6.14726 s
+Decode C++ (100 cycles): 12.7057 s
+
+
+~~~ [ Benchmark case: 5000000 bytes ] ~~~
+Encode RUST (100 cycles): 21.2214 s
+Decode RUST (100 cycles): 42.4559 s
+Encode C++ (100 cycles): 12.241 s
+Decode C++ (100 cycles): 25.2984 s
+
+~~~ [ Benchmark case: 10000000 bytes ] ~~~
+Encode RUST (100 cycles): 42.3902 s
+Decode RUST (100 cycles): 84.8268 s
+Encode C++ (100 cycles): 24.4366 s
+Decode C++ (100 cycles): 50.5093 s
+
+encode 303 bytes: C++ is 5% faster
+decode 303 bytes: Rust is 50% faster
+encode 5007 bytes: C++ is 70% faster
+decode 5007 bytes: Rust is 16% faster
+encode ~100Kib: C++ is 92% faster
+decode ~100Kib: C++ 48% faster
+encode ~1Mib: C++ is 86% faster
+decode ~1Mib: C++ is 66% faster
+encode ~2.5Mib: C++ is 73% faster
+decode ~2.5Mib: C++ is 55% faster
+encode ~5Mib: C++ is 73% faster
+decode ~5Mib: C++ is 67% faster
+encode ~10Mib: C++ is 73% faster
+decode ~10Mib: C++ is 68% faster
+
+no avx
+
+~~~ [ Benchmark case: 15 bytes ] ~~~
+Encode RUST (100 cycles): 4025 us
+Decode RUST (100 cycles): 137.561 ms
+Encode C++ (100 cycles): 4066 us
+Decode C++ (100 cycles): 104.86 ms
+
+~~~ [ Benchmark case: 300 bytes ] ~~~
+Encode RUST (100 cycles): 4406 us
+Decode RUST (100 cycles): 136.427 ms
+Encode C++ (100 cycles): 4157 us
+Decode C++ (100 cycles): 104.627 ms
+
+~~~ [ Benchmark case: 5000 bytes ] ~~~
+Encode RUST (100 cycles): 22.106 ms
+Decode RUST (100 cycles): 178.086 ms
+Encode C++ (100 cycles): 13.085 ms
+Decode C++ (100 cycles): 127.525 ms
+
+~~~ [ Benchmark case: 100000 bytes ] ~~~
+Encode RUST (100 cycles): 401.68 ms
+Decode RUST (100 cycles): 1021.08 ms
+Encode C++ (100 cycles): 201.145 ms
+Decode C++ (100 cycles): 603.177 ms
+
+~~~ [ Benchmark case: 1000000 bytes ] ~~~
+Encode RUST (100 cycles): 4173.91 ms
+Decode RUST (100 cycles): 9.03875 s
+Encode C++ (100 cycles): 2211.17 ms
+Decode C++ (100 cycles): 5.12931 s
+
+~~~ [ Benchmark case: 2500000 bytes ] ~~~
+Encode RUST (100 cycles): 10.6742 s
+Decode RUST (100 cycles): 22.4129 s
+Encode C++ (100 cycles): 5.80844 s
+Decode C++ (100 cycles): 12.7385 s
+
+~~~ [ Benchmark case: 5000000 bytes ] ~~~
+Encode RUST (100 cycles): 21.8632 s
+Decode RUST (100 cycles): 44.6495 s
+Encode C++ (100 cycles): 12.3079 s
+Decode C++ (100 cycles): 25.3659 s
+
+~~~ [ Benchmark case: 10000000 bytes ] ~~~
+Encode RUST (100 cycles): 43.8973 s
+Decode RUST (100 cycles): 89.1058 s
+Encode C++ (100 cycles): 24.5755 s
+Decode C++ (100 cycles): 50.6714 s
+
+----
+RUSTFLAGS="-C target-feature=-sse3,-avx,-avx2,-sse4.2" make benchmark
+CXX_FLAGS="-mno-sse" CC="/usr/bin/clang" CXX="/usr/bin/clang++" cmake .. -DTESTING=OFF -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=FALSE -DBENCHMARK=ON
+
+grep %xmm cpp.asm | grep -P '([[:xdigit:]]{2}\s)+\s*[[:alnum:]]+p[sd]\s+' | wc -l
+
+
+awk '/[ \t](vmovapd|vmulpd|vaddpd|vsubpd|vfmadd213pd|vfmadd231pd|vfmadd132pd|vmulsd|vaddsd|vmosd|vsubsd|vbroadcastss|vbroadcastsd|vblendpd|vshufpd|vroundpd|vroundsd|vxorpd|vfnmadd231pd|vfnmadd213pd|vfnmadd132pd|vandpd|vmaxpd|vmovmskpd|vcmppd|vpaddd|vbroadcastf128|vinsertf128|vextractf128|vfmsub231pd|vfmsub132pd|vfmsub213pd|vmaskmovps|vmaskmovpd|vpermilps|vpermilpd|vperm2f128|vzeroall|vzeroupper|vpbroadcastb|vpbroadcastw|vpbroadcastd|vpbroadcastq|vbroadcasti128|vinserti128|vextracti128|vpminud|vpmuludq|vgatherdpd|vgatherqpd|vgatherdps|vgatherqps|vpgatherdd|vpgatherdq|vpgatherqd|vpgatherqq|vpmaskmovd|vpmaskmovq|vpermps|vpermd|vpermpd|vpermq|vperm2i128|vpblendd|vpsllvd|vpsllvq|vpsrlvd|vpsrlvq|vpsravd|vblendmpd|vblendmps|vpblendmd|vpblendmq|vpblendmb|vpblendmw|vpcmpd|vpcmpud|vpcmpq|vpcmpuq|vpcmpb|vpcmpub|vpcmpw|vpcmpuw|vptestmd|vptestmq|vptestnmd|vptestnmq|vptestmb|vptestmw|vptestnmb|vptestnmw|vcompresspd|vcompressps|vpcompressd|vpcompressq|vexpandpd|vexpandps|vpexpandd|vpexpandq|vpermb|vpermw|vpermt2b|vpermt2w|vpermi2pd|vpermi2ps|vpermi2d|vpermi2q|vpermi2b|vpermi2w|vpermt2ps|vpermt2pd|vpermt2d|vpermt2q|vshuff32x4|vshuff64x2|vshuffi32x4|vshuffi64x2|vpmultishiftqb|vpternlogd|vpternlogq|vpmovqd|vpmovsqd|vpmovusqd|vpmovqw|vpmovsqw|vpmovusqw|vpmovqb|vpmovsqb|vpmovusqb|vpmovdw|vpmovsdw|vpmovusdw|vpmovdb|vpmovsdb|vpmovusdb|vpmovwb|vpmovswb|vpmovuswb|vcvtps2udq|vcvtpd2udq|vcvttps2udq|vcvttpd2udq|vcvtss2usi|vcvtsd2usi|vcvttss2usi|vcvttsd2usi|vcvtps2qq|vcvtpd2qq|vcvtps2uqq|vcvtpd2uqq|vcvttps2qq|vcvttpd2qq|vcvttps2uqq|vcvttpd2uqq|vcvtudq2ps|vcvtudq2pd|vcvtusi2ps|vcvtusi2pd|vcvtusi2sd|vcvtusi2ss|vcvtuqq2ps|vcvtuqq2pd|vcvtqq2pd|vcvtqq2ps|vgetexppd|vgetexpps|vgetexpsd|vgetexpss|vgetmantpd|vgetmantps|vgetmantsd|vgetmantss|vfixupimmpd|vfixupimmps|vfixupimmsd|vfixupimmss|vrcp14pd|vrcp14ps|vrcp14sd|vrcp14ss|vrndscaleps|vrndscalepd|vrndscaless|vrndscalesd|vrsqrt14pd|vrsqrt14ps|vrsqrt14sd|vrsqrt14ss|vscalefps|vscalefpd|vscalefss|vscalefsd|valignd|valignq|vdbpsadbw|vpabsq|vpmaxsq|vpmaxuq|vpminsq|vpminuq|vprold|vprolvd|vprolq|vprolvq|vprord|vprorvd|vprorq|vprorvq|vpscatterdd|vpscatterdq|vpscatterqd|vpscatterqq|vscatterdps|vscatterdpd|vscatterqps|vscatterqpd|vpconflictd|vpconflictq|vplzcntd|vplzcntq|vpbroadcastmb2q|vpbroadcastmw2d|vexp2pd|vexp2ps|vrcp28pd|vrcp28ps|vrcp28sd|vrcp28ss|vrsqrt28pd|vrsqrt28ps|vrsqrt28sd|vrsqrt28ss|vgatherpf0dps|vgatherpf0qps|vgatherpf0dpd|vgatherpf0qpd|vgatherpf1dps|vgatherpf1qps|vgatherpf1dpd|vgatherpf1qpd|vscatterpf0dps|vscatterpf0qps|vscatterpf0dpd|vscatterpf0qpd|vscatterpf1dps|vscatterpf1qps|vscatterpf1dpd|vscatterpf1qpd|vfpclassps|vfpclasspd|vfpclassss|vfpclasssd|vrangeps|vrangepd|vrangess|vrangesd|vreduceps|vreducepd|vreducess|vreducesd|vpmovm2d|vpmovm2q|vpmovm2b|vpmovm2w|vpmovd2m|vpmovq2m|vpmovb2m|vpmovw2m|vpmullq|vpmadd52luq|vpmadd52huq|v4fmaddps|v4fmaddss|v4fnmaddps|v4fnmaddss|vp4dpwssd|vp4dpwssds|vpdpbusd|vpdpbusds|vpdpwssd|vpdpwssds|vpcompressb|vpcompressw|vpexpandb|vpexpandw|vpshld|vpshldv|vpshrd|vpshrdv|vpopcntd|vpopcntq|vpopcntb|vpopcntw|vpshufbitqmb|gf2p8affineinvqb|gf2p8affineqb|gf2p8mulb|vpclmulqdq|vaesdec|vaesdeclast|vaesenc|vaesenclast)[ \t]/' cpp.asm
+
+
+
+NO AVX with initial commmit:
+Encode RUST (1 cycles): 99.879 ms
+Decode RUST (1 cycles): 205.558 ms
+
+AVX with initial commit:
+Encode RUST (1 cycles): 86.933 ms
+Decode RUST (1 cycles): 212.567 ms
+
+rust: total heap usage: 10,770 allocs, 10,770 frees, 32,364,497 bytes allocated
+
+cpp: total heap usage: 1,009 allocs, 1,009 frees, 12,377,655 bytes allocated
+
+
+
+~~~ [ Benchmark case: 100000 bytes ] ~~~
+Encode RUST (100 cycles): 214.619 ms
+Decode RUST (100 cycles): 619.778 ms
+Encode C++ (100 cycles): 207.604 ms
+Decode C++ (100 cycles): 576.653 ms
+
+~~~ [ Benchmark case: 1000000 bytes ] ~~~
+Encode RUST (100 cycles): 2286.93 ms
+Decode RUST (100 cycles): 5.26045 s
+Encode C++ (100 cycles): 2313.82 ms
+Decode C++ (100 cycles): 5.23196 s
+
+~~~ [ Benchmark case: 2500000 bytes ] ~~~
+Encode RUST (100 cycles): 5.5359 s
+Decode RUST (100 cycles): 12.9864 s
+Encode C++ (100 cycles): 6.09832 s
+Decode C++ (100 cycles): 12.9724 s
+
+~~~ [ Benchmark case: 5000000 bytes ] ~~~
+Encode RUST (100 cycles): 11.846 s
+Decode RUST (100 cycles): 25.8033 s
+Encode C++ (100 cycles): 12.2738 s
+Decode C++ (100 cycles): 25.7331 s
+
+~~~ [ Benchmark case: 10000000 bytes ] ~~~
+Encode RUST (100 cycles): 24.1998 s
+Decode RUST (100 cycles): 51.4948 s
+Encode C++ (100 cycles): 25.3328 s
+Decode C++ (100 cycles): 51.4026 s
+
+
+
+LATEST RESULTS"
+
+
+~~~ [ Benchmark case: 15 bytes ] ~~~
+Encode RUST (100 cycles): 2939 us
+Decode RUST (100 cycles): 118.198 ms
+Encode C++ (100 cycles): 3864 us
+Decode C++ (100 cycles): 68.892 ms
+
+~~~ [ Benchmark case: 300 bytes ] ~~~
+Encode RUST (100 cycles): 3084 us
+Decode RUST (100 cycles): 118.263 ms
+Encode C++ (100 cycles): 3984 us
+Decode C++ (100 cycles): 69.356 ms
+
+~~~ [ Benchmark case: 5000 bytes ] ~~~
+Encode RUST (100 cycles): 12.629 ms
+Decode RUST (100 cycles): 145.179 ms
+Encode C++ (100 cycles): 13.092 ms
+Decode C++ (100 cycles): 95.122 ms
+
+~~~ [ Benchmark case: 100000 bytes ] ~~~
+Encode RUST (100 cycles): 218.124 ms
+Decode RUST (100 cycles): 704.007 ms
+Encode C++ (100 cycles): 215.032 ms
+Decode C++ (100 cycles): 640.78 ms
+
+~~~ [ Benchmark case: 1000000 bytes ] ~~~
+Encode RUST (100 cycles): 2324.64 ms
+Decode RUST (100 cycles): 6.10608 s
+Encode C++ (100 cycles): 2306.07 ms
+Decode C++ (100 cycles): 5.91824 s
+
+~~~ [ Benchmark case: 2500000 bytes ] ~~~
+Encode RUST (100 cycles): 6.06192 s
+Decode RUST (100 cycles): 15.42 s
+Encode C++ (100 cycles): 6.1352 s
+Decode C++ (100 cycles): 14.9452 s
+
+~~~ [ Benchmark case: 5000000 bytes ] ~~~
+Encode RUST (100 cycles): 12.2251 s
+Decode RUST (100 cycles): 30.48 s
+Encode C++ (100 cycles): 12.2505 s
+Decode C++ (100 cycles): 29.4412 s
+
+~~~ [ Benchmark case: 10000000 bytes ] ~~~
+Encode RUST (100 cycles): 25.2412 s
+Decode RUST (100 cycles): 61.626 s
+Encode C++ (100 cycles): 25.5375 s
+Decode C++ (100 cycles): 59.524 s
+
+
+
+
+AVX:
+
+~~~ [ Benchmark case: 15 bytes ] ~~~
+Encode RUST (100 cycles): 3012 us
+Decode RUST (100 cycles): 52.178 ms
+Encode C++ (100 cycles): 3814 us
+Decode C++ (100 cycles): 69.38 ms
+
+~~~ [ Benchmark case: 300 bytes ] ~~~
+Encode RUST (100 cycles): 3215 us
+Decode RUST (100 cycles): 52.674 ms
+Encode C++ (100 cycles): 3940 us
+Decode C++ (100 cycles): 69.371 ms
+
+~~~ [ Benchmark case: 5000 bytes ] ~~~
+Encode RUST (100 cycles): 13.734 ms
+Decode RUST (100 cycles): 79.759 ms
+Encode C++ (100 cycles): 12.474 ms
+Decode C++ (100 cycles): 94.123 ms
+
+~~~ [ Benchmark case: 100000 bytes ] ~~~
+Encode RUST (100 cycles): 241.637 ms
+Decode RUST (100 cycles): 651.442 ms
+Encode C++ (100 cycles): 202.42 ms
+Decode C++ (100 cycles): 614.242 ms
+
+~~~ [ Benchmark case: 1000000 bytes ] ~~~
+Encode RUST (100 cycles): 2494.13 ms
+Decode RUST (100 cycles): 6.1339 s
+Encode C++ (100 cycles): 2120.54 ms
+Decode C++ (100 cycles): 5.64137 s
+
+~~~ [ Benchmark case: 2500000 bytes ] ~~~
+Encode RUST (100 cycles): 6.61661 s
+Decode RUST (100 cycles): 15.659 s
+Encode C++ (100 cycles): 5.87244 s
+Decode C++ (100 cycles): 14.5167 s
+
+~~~ [ Benchmark case: 5000000 bytes ] ~~~
+Encode RUST (100 cycles): 13.2285 s
+Decode RUST (100 cycles): 31.0328 s
+Encode C++ (100 cycles): 11.7713 s
+Decode C++ (100 cycles): 28.6572 s
+
+~~~ [ Benchmark case: 10000000 bytes ] ~~~
+Encode RUST (100 cycles): 26.7584 s
+Decode RUST (100 cycles): 62.1535 s
+Encode C++ (100 cycles): 24.1558 s
+Decode C++ (100 cycles): 57.647 s
+
+
+-----
+
+Encode RUST (10 cycles): 608.367 ms
+Decode RUST (10 cycles): 1508.99 ms
+Encode C++ (10 cycles): 649.872 ms
+Decode C++ (10 cycles): 1466.95 ms
+
+
+--------
+
+BEFORE, WITH UNSAFE
+
+~~~ [ Benchmark case: 2500000 bytes ] ~~~
+Encode RUST (10 cycles): 601.676 ms
+Decode RUST (10 cycles): 1511.31 ms
+Encode C++ (10 cycles): 643.472 ms
+Decode C++ (10 cycles): 1461.33 ms
+
+~~~ [ Benchmark case: 2500000 bytes ] ~~~
+Encode RUST (10 cycles): 613.973 ms
+Decode RUST (10 cycles): 1519.63 ms
+Encode C++ (10 cycles): 657.828 ms
+Decode C++ (10 cycles): 1472.27 ms
+
+~~~ [ Benchmark case: 2500000 bytes ] ~~~
+Encode RUST (10 cycles): 607.915 ms
+Decode RUST (10 cycles): 1521.19 ms
+Encode C++ (10 cycles): 651.306 ms
+Decode C++ (10 cycles): 1465.56 ms
+
+
+
+
+
+--- with totally safe optimisations:
+
+~~~ [ Benchmark case: 1000000 bytes ] ~~~
+Encode RUST (10 cycles): 335.291 ms -> 18.5%
+Decode RUST (10 cycles): 739.528 ms -> 30%
+Encode C++ (10 cycles): 211.608 ms
+Decode C++ (10 cycles): 562.939 ms
+
+~~~ [ Benchmark case: 2500000 bytes ] ~~~
+Encode RUST (10 cycles): 855.59 ms -> 19%
+Decode RUST (10 cycles): 1830.64 ms -> 32%
+Encode C++ (10 cycles): 559.997 ms
+Decode C++ (10 cycles): 1434.1 ms
+
+~~~ [ Benchmark case: 5000000 bytes ] ~~~
+Encode RUST (10 cycles): 1730.34 ms -> 18%
+Decode RUST (10 cycles): 3633.53 ms -> 32%
+Encode C++ (10 cycles): 1177.38 ms
+Decode C++ (10 cycles): 2863.14 ms
+
+~~~ [ Benchmark case: 10000000 bytes ] ~~~
+Encode RUST (10 cycles): 3475.36 ms -> 17.8%
+Decode RUST (10 cycles): 7.25712 s -> 32.5%
+Encode C++ (10 cycles): 2372.91 ms
+Decode C++ (10 cycles): 5.7262 s
+
+--- with code from master
+
+~~~ [ Benchmark case: 1000000 bytes ] ~~~
+Encode RUST (10 cycles): 397.182 ms
+Decode RUST (10 cycles): 961.006 ms
+Encode C++ (10 cycles): 221.003 ms
+Decode C++ (10 cycles): 572.489 ms
+
+~~~ [ Benchmark case: 2500000 bytes ] ~~~
+Encode RUST (10 cycles): 1018.27 ms
+Decode RUST (10 cycles): 2424.6 ms
+Encode C++ (10 cycles): 602.386 ms
+Decode C++ (10 cycles): 1459.45 ms
+
+~~~ [ Benchmark case: 5000000 bytes ] ~~~
+Encode RUST (10 cycles): 2043.65 ms
+Decode RUST (10 cycles): 4813.27 ms
+Encode C++ (10 cycles): 1208.36 ms
+Decode C++ (10 cycles): 2892.14 ms
+
+~~~ [ Benchmark case: 10000000 bytes ] ~~~
+Encode RUST (10 cycles): 4095.26 ms
+Decode RUST (10 cycles): 9.61965 s
+Encode C++ (10 cycles): 2416.67 ms
+Decode C++ (10 cycles): 5.76792 s
+
+
+Improvement with totally safe optimisations: 20-30%
diff --git a/reed-solomon-c.hpp b/reed-solomon-c.hpp
new file mode 100644
index 0000000..3ff3191
--- /dev/null
+++ b/reed-solomon-c.hpp
@@ -0,0 +1,30 @@
+#include <cstdint>
+#include <stddef.h>
+
+struct Shard {
+    size_t len;
+    uint8_t* data;
+};
+
+struct Shards {
+// Points to the original vector
+    void* original_ptr;
+    size_t count;
+    Shard* shards;
+};
+
+struct DecodedData {
+    void* original_ptr;
+    size_t len;
+    uint8_t* data;
+};
+
+// Return -1 for error. Otherwise return 0
+// We assume output is already initialised.
+uint8_t encode(size_t n_validators, uint8_t* bytes, size_t bytes_len, Shards *output);
+
+void drop_shards(void *original_ptr);
+
+DecodedData decode(size_t n_validators, Shard *shards, size_t n_shards);
+
+void drop_decoded_data(void *original_ptr);
diff --git a/reed_solomon_novelpoly-e7f9373e66f5f657.ll b/reed_solomon_novelpoly-e7f9373e66f5f657.ll
new file mode 100644
index 0000000..6e102d0
--- /dev/null
+++ b/reed_solomon_novelpoly-e7f9373e66f5f657.ll
@@ -0,0 +1,5944 @@
+; ModuleID = 'reed_solomon_novelpoly.be3e966f96638472-cgu.0'
+source_filename = "reed_solomon_novelpoly.be3e966f96638472-cgu.0"
+target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
+target triple = "x86_64-unknown-linux-gnu"
+
+%"core::fmt::builders::DebugList<'_, '_>" = type { %"core::fmt::builders::DebugInner<'_, '_>" }
+%"core::fmt::builders::DebugInner<'_, '_>" = type { ptr, i8, i8, [6 x i8] }
+%"core::option::Option<(core::ptr::non_null::NonNull<u8>, core::alloc::layout::Layout)>" = type { [1 x i64], i64, [1 x i64] }
+%"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>::Err" = type { [1 x i64], { i64, i64 } }
+%"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>::Ok" = type { [1 x i64], { ptr, i64 } }
+%"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>" = type { i64, [2 x i64] }
+%"core::fmt::rt::Placeholder" = type { { i64, i64 }, { i64, i64 }, i64, i32, i32, i8, [7 x i8] }
+%"core::fmt::Arguments<'_>" = type { { ptr, i64 }, { ptr, i64 }, { ptr, i64 } }
+%"core::result::Result<novel_poly_basis::CodeParams, errors::Error>" = type { i64, [3 x i64] }
+%"core::result::Result<novel_poly_basis::CodeParams, errors::Error>::Ok" = type { [1 x i64], %"novel_poly_basis::CodeParams" }
+%"novel_poly_basis::CodeParams" = type { i64, i64, i64 }
+%"novel_poly_basis::ReedSolomon" = type { i64, i64, i64 }
+%"errors::Error" = type { i64, [3 x i64] }
+%"wrapped_shard::WrappedShard" = type { %"alloc::vec::Vec<u8>" }
+%"alloc::vec::Vec<u8>" = type { { ptr, i64 }, i64 }
+%"core::option::Option<core::fmt::Arguments<'_>>" = type { ptr, [5 x i64] }
+%"errors::Error::WantedShardCountTooHigh" = type { [1 x i64], i64 }
+%"errors::Error::WantedShardCountTooLow" = type { [1 x i64], i64 }
+%"errors::Error::WantedPayloadShardCountTooLow" = type { [1 x i64], i64 }
+%"errors::Error::NeedMoreShards" = type { [1 x i64], i64, i64, i64 }
+%"errors::Error::ParamterMustBePowerOf2" = type { [1 x i64], i64, i64 }
+%"errors::Error::InconsistentShardLengths" = type { [1 x i64], i64, i64 }
+%"field::f2e16::AdditiveFFT" = type { [65536 x i16], [65536 x i16], [65536 x i16], [65535 x i16] }
+%"core::result::Result<alloc::vec::Vec<field::f2e16::Additive>, errors::Error>" = type { i64, [3 x i64] }
+%"core::result::Result<alloc::vec::Vec<field::f2e16::Additive>, errors::Error>::Ok" = type { [1 x i64], %"alloc::vec::Vec<field::f2e16::Additive>" }
+%"alloc::vec::Vec<field::f2e16::Additive>" = type { { ptr, i64 }, i64 }
+%"core::result::Result<alloc::vec::Vec<u8>, errors::Error>" = type { i64, [3 x i64] }
+%"core::result::Result<alloc::vec::Vec<u8>, errors::Error>::Ok" = type { [1 x i64], %"alloc::vec::Vec<u8>" }
+
+@alloc_513570631223a12912d85da2bec3b15a = private unnamed_addr constant <{}> zeroinitializer, align 8
+@vtable.0 = private unnamed_addr constant <{ ptr, [16 x i8], ptr }> <{ ptr @"_ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE", [16 x i8] c"\08\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00", ptr @"_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03f8b3d393e0291bE" }>, align 8
+@str.1 = internal constant [25 x i8] c"attempt to divide by zero"
+@alloc_fddaeef1fe1a23c45402ef8f58614acb = private unnamed_addr constant <{ [35 x i8] }> <{ [35 x i8] c"assertion failed: mid <= self.len()" }>, align 1
+@vtable.3 = private unnamed_addr constant <{ ptr, [16 x i8], ptr }> <{ ptr @"_ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE", [16 x i8] c" \00\00\00\00\00\00\00\08\00\00\00\00\00\00\00", ptr @"_ZN74_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h84ba04202c855280E" }>, align 8
+@vtable.4 = private unnamed_addr constant <{ ptr, [16 x i8], ptr }> <{ ptr @"_ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE", [16 x i8] c"\08\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00", ptr @"_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17ha700999c63438872E" }>, align 8
+@__rust_no_alloc_shim_is_unstable = external global i8
+@alloc_ffa3cdb3ae88e54a1cc225f31dd07672 = private unnamed_addr constant <{ ptr, [8 x i8] }> <{ ptr @alloc_513570631223a12912d85da2bec3b15a, [8 x i8] zeroinitializer }>, align 8
+@alloc_a6ba4ba59f54069c6f4e5a0d352dbb33 = private unnamed_addr constant <{ [40 x i8] }> <{ [40 x i8] c"assertion failed: n * k_po2 <= n_po2 * k" }>, align 1
+@alloc_3a271df0daeaaba8ae02426e08e041bd = private unnamed_addr constant <{ [89 x i8] }> <{ [89 x i8] c"/home/alin/code/reed-solomon-novelpoly/reed-solomon-novelpoly/src/novel_poly_basis/mod.rs" }>, align 1
+@alloc_2598e2c73d45f0ad757785479793afc9 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_3a271df0daeaaba8ae02426e08e041bd, [16 x i8] c"Y\00\00\00\00\00\00\007\00\00\00\09\00\00\00" }>, align 8
+@alloc_0110dc38ab58539a2927da7e26f3223f = private unnamed_addr constant <{ [57 x i8] }> <{ [57 x i8] c"this struct is not created with invalid shard number; qed" }>, align 1
+@alloc_8c314ccc98be31f3cfe675f15a6e996a = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_3a271df0daeaaba8ae02426e08e041bd, [16 x i8] c"Y\00\00\00\00\00\00\00L\00\00\00\0E\00\00\00" }>, align 8
+@alloc_4d952c8c1b6b45bfc235d3fc3d65935b = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_3a271df0daeaaba8ae02426e08e041bd, [16 x i8] c"Y\00\00\00\00\00\00\00h\00\00\00\22\00\00\00" }>, align 8
+@alloc_53973d2fe29b4adba8bb7390b5678745 = private unnamed_addr constant <{ [8 x i8] }> zeroinitializer, align 8
+@alloc_359d9f4078aae48e00b3cc1d1463bd60 = private unnamed_addr constant <{ [82 x i8] }> <{ [82 x i8] c"/home/alin/code/reed-solomon-novelpoly/reed-solomon-novelpoly/src/wrapped_shard.rs" }>, align 1
+@alloc_b86467376db6421fc556c058f417d9a6 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_359d9f4078aae48e00b3cc1d1463bd60, [16 x i8] c"R\00\00\00\00\00\00\00+\00\00\00\09\00\00\00" }>, align 8
+@alloc_0bd23fa426c9bc0dc8ebc33ecc08bd68 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_359d9f4078aae48e00b3cc1d1463bd60, [16 x i8] c"R\00\00\00\00\00\00\006\00\00\00\09\00\00\00" }>, align 8
+@alloc_59c98faa38f9ae5541d0ff0bd840601c = private unnamed_addr constant <{ [23 x i8] }> <{ [23 x i8] c"WantedShardCountTooHigh" }>, align 1
+@alloc_04e002b9ce253569fb18ec28abd88d7b = private unnamed_addr constant <{ [22 x i8] }> <{ [22 x i8] c"WantedShardCountTooLow" }>, align 1
+@alloc_0fb607e558499de3dd87735cb5fda174 = private unnamed_addr constant <{ [29 x i8] }> <{ [29 x i8] c"WantedPayloadShardCountTooLow" }>, align 1
+@alloc_546917b113142dfbb21c07d3be88197d = private unnamed_addr constant <{ [17 x i8] }> <{ [17 x i8] c"PayloadSizeIsZero" }>, align 1
+@alloc_6615aecf679b91f6ca2d1e1e60a68b42 = private unnamed_addr constant <{ [14 x i8] }> <{ [14 x i8] c"NeedMoreShards" }>, align 1
+@alloc_6b17e6867e56a9d9db24ffe82fd83a15 = private unnamed_addr constant <{ [4 x i8] }> <{ [4 x i8] c"have" }>, align 1
+@vtable.6 = private unnamed_addr constant <{ ptr, [16 x i8], ptr }> <{ ptr @"_ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE", [16 x i8] c"\08\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00", ptr @"_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hda6ef4ff662f905dE" }>, align 8
+@alloc_e2daa29ca462c82251b78e1c93f7f411 = private unnamed_addr constant <{ [3 x i8] }> <{ [3 x i8] c"min" }>, align 1
+@alloc_e654b0a32953a2f5c7caa90c611494da = private unnamed_addr constant <{ [3 x i8] }> <{ [3 x i8] c"all" }>, align 1
+@alloc_8edfafbe3dee5f49838ac211bc06618d = private unnamed_addr constant <{ [22 x i8] }> <{ [22 x i8] c"ParamterMustBePowerOf2" }>, align 1
+@alloc_e09e9ac7227dea4ed31edb4bbc3d6adf = private unnamed_addr constant <{ [1 x i8] }> <{ [1 x i8] c"n" }>, align 1
+@alloc_3629cf37e45f4088c031426ac602bbb6 = private unnamed_addr constant <{ [1 x i8] }> <{ [1 x i8] c"k" }>, align 1
+@alloc_3efa03448d369fceaa6dac294733e091 = private unnamed_addr constant <{ [24 x i8] }> <{ [24 x i8] c"InconsistentShardLengths" }>, align 1
+@alloc_4986dd618090c125bc3e853ec5468cc0 = private unnamed_addr constant <{ [5 x i8] }> <{ [5 x i8] c"first" }>, align 1
+@alloc_3eb2a1a5566a11839f0ac63c9931ad0f = private unnamed_addr constant <{ [5 x i8] }> <{ [5 x i8] c"other" }>, align 1
+@alloc_48c542c1b070c5e9c8eb62b0af828a3c = private unnamed_addr constant <{ [24 x i8] }> <{ [24 x i8] c"Number of wanted shards " }>, align 1
+@alloc_51eaf4d277a66ba33ec443958471d92b = private unnamed_addr constant <{ [20 x i8] }> <{ [20 x i8] c" exceeds max of 2^16" }>, align 1
+@alloc_d3143b57ec0541b3fe44f74c05c63238 = private unnamed_addr constant <{ ptr, [8 x i8], ptr, [8 x i8] }> <{ ptr @alloc_48c542c1b070c5e9c8eb62b0af828a3c, [8 x i8] c"\18\00\00\00\00\00\00\00", ptr @alloc_51eaf4d277a66ba33ec443958471d92b, [8 x i8] c"\14\00\00\00\00\00\00\00" }>, align 8
+@alloc_63df1fe61a1e189c0ee209d5ed1a4cf4 = private unnamed_addr constant <{ [51 x i8] }> <{ [51 x i8] c"Number of wanted shards must be at least 2, but is " }>, align 1
+@alloc_4ab960860fe3cc837e93eb2a799c64c6 = private unnamed_addr constant <{ ptr, [8 x i8] }> <{ ptr @alloc_63df1fe61a1e189c0ee209d5ed1a4cf4, [8 x i8] c"3\00\00\00\00\00\00\00" }>, align 8
+@alloc_536483a84c37603d89529fec2e212eb7 = private unnamed_addr constant <{ [59 x i8] }> <{ [59 x i8] c"Number of wanted payload shards must be at least 1, but is " }>, align 1
+@alloc_e3e6ae743b3f3996f407a9eb01b42730 = private unnamed_addr constant <{ ptr, [8 x i8] }> <{ ptr @alloc_536483a84c37603d89529fec2e212eb7, [8 x i8] c";\00\00\00\00\00\00\00" }>, align 8
+@alloc_133e090f22f33e592f9b907087dac535 = private unnamed_addr constant <{ [27 x i8] }> <{ [27 x i8] c"Size of the payload is zero" }>, align 1
+@alloc_8676b8f2c8e3f1d77447888cd9708d40 = private unnamed_addr constant <{ ptr, [8 x i8] }> <{ ptr @alloc_133e090f22f33e592f9b907087dac535, [8 x i8] c"\1B\00\00\00\00\00\00\00" }>, align 8
+@alloc_7124c553e76746d2ef7f57a40679da63 = private unnamed_addr constant <{ [15 x i8] }> <{ [15 x i8] c"Needs at least " }>, align 1
+@alloc_9c0d924f36133766a3c10e4dca202c7a = private unnamed_addr constant <{ [11 x i8] }> <{ [11 x i8] c" shards of " }>, align 1
+@alloc_fb90b867272580a18b3d5ae1e810c278 = private unnamed_addr constant <{ [18 x i8] }> <{ [18 x i8] c" to recover, have " }>, align 1
+@alloc_b2919af1863dfb7a75a14afa0ba77f01 = private unnamed_addr constant <{ ptr, [8 x i8], ptr, [8 x i8], ptr, [8 x i8] }> <{ ptr @alloc_7124c553e76746d2ef7f57a40679da63, [8 x i8] c"\0F\00\00\00\00\00\00\00", ptr @alloc_9c0d924f36133766a3c10e4dca202c7a, [8 x i8] c"\0B\00\00\00\00\00\00\00", ptr @alloc_fb90b867272580a18b3d5ae1e810c278, [8 x i8] c"\12\00\00\00\00\00\00\00" }>, align 8
+@alloc_d59896b63df0a2c50a06aaaa8782a153 = private unnamed_addr constant <{ [17 x i8] }> <{ [17 x i8] c"Parameters: n (= " }>, align 1
+@alloc_7614019b88f24e664264b78b90a77706 = private unnamed_addr constant <{ [11 x i8] }> <{ [11 x i8] c") and k (= " }>, align 1
+@alloc_f31816f175a008a9345df2f46e57fadb = private unnamed_addr constant <{ [27 x i8] }> <{ [27 x i8] c") both must be a power of 2" }>, align 1
+@alloc_e3bea075e5e4ccda95b98b8fda32d7e8 = private unnamed_addr constant <{ ptr, [8 x i8], ptr, [8 x i8], ptr, [8 x i8] }> <{ ptr @alloc_d59896b63df0a2c50a06aaaa8782a153, [8 x i8] c"\11\00\00\00\00\00\00\00", ptr @alloc_7614019b88f24e664264b78b90a77706, [8 x i8] c"\0B\00\00\00\00\00\00\00", ptr @alloc_f31816f175a008a9345df2f46e57fadb, [8 x i8] c"\1B\00\00\00\00\00\00\00" }>, align 8
+@alloc_d74ef2a24a2c658c9ba57c38fe52c334 = private unnamed_addr constant <{ [45 x i8] }> <{ [45 x i8] c"Shards do have inconsistent lengths: first = " }>, align 1
+@alloc_3917c1891ef4cb48b3ba2e546c50a906 = private unnamed_addr constant <{ [10 x i8] }> <{ [10 x i8] c", other = " }>, align 1
+@alloc_9e3f62b0e6490cc45676dc85f910c2d0 = private unnamed_addr constant <{ [1 x i8] }> <{ [1 x i8] c")" }>, align 1
+@alloc_0a40c07aae6f7eb2b694d5c90bed315a = private unnamed_addr constant <{ ptr, [8 x i8], ptr, [8 x i8], ptr, [8 x i8] }> <{ ptr @alloc_d74ef2a24a2c658c9ba57c38fe52c334, [8 x i8] c"-\00\00\00\00\00\00\00", ptr @alloc_3917c1891ef4cb48b3ba2e546c50a906, [8 x i8] c"\0A\00\00\00\00\00\00\00", ptr @alloc_9e3f62b0e6490cc45676dc85f910c2d0, [8 x i8] c"\01\00\00\00\00\00\00\00" }>, align 8
+@alloc_799519dc79a65a2864cbd4ccf0de74ac = private unnamed_addr constant <{ [86 x i8] }> <{ [86 x i8] c"/home/alin/code/reed-solomon-novelpoly/reed-solomon-novelpoly/src/field/inc_log_mul.rs" }>, align 1
+@alloc_a00263033520f5f8af44777671310e84 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_799519dc79a65a2864cbd4ccf0de74ac, [16 x i8] c"V\00\00\00\00\00\00\005\00\00\00\12\00\00\00" }>, align 8
+@alloc_a995c1b115ddac8a49a962bb459f7a82 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_799519dc79a65a2864cbd4ccf0de74ac, [16 x i8] c"V\00\00\00\00\00\00\00@\00\00\00\12\00\00\00" }>, align 8
+@alloc_27cca3636828088e60ce450d2eca2060 = private unnamed_addr constant <{ [1 x i8] }> <{ [1 x i8] c"_" }>, align 1
+@alloc_03d1f09ad8d01e9be6c783127cb2a21b = private unnamed_addr constant <{ ptr, [8 x i8] }> <{ ptr @alloc_27cca3636828088e60ce450d2eca2060, [8 x i8] c"\01\00\00\00\00\00\00\00" }>, align 8
+@alloc_f835a666fb2fb9eb6998cab602faabdd = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_799519dc79a65a2864cbd4ccf0de74ac, [16 x i8] c"V\00\00\00\00\00\00\00w\00\00\00\22\00\00\00" }>, align 8
+@alloc_1db96d5b1a328d476c67fbf01169719e = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_799519dc79a65a2864cbd4ccf0de74ac, [16 x i8] c"V\00\00\00\00\00\00\00w\00\00\00=\00\00\00" }>, align 8
+@alloc_525b4dc54c895abc1c8b3f3627413691 = private unnamed_addr constant <{ [83 x i8] }> <{ [83 x i8] c"/home/alin/code/reed-solomon-novelpoly/reed-solomon-novelpoly/src/field/inc_afft.rs" }>, align 1
+@alloc_6da96708b40fa6682fd8f5f72b14ed61 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_525b4dc54c895abc1c8b3f3627413691, [16 x i8] c"S\00\00\00\00\00\00\00\0E\00\00\00\09\00\00\00" }>, align 8
+@alloc_ecc59e7dc869fb361f705f461689af87 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_525b4dc54c895abc1c8b3f3627413691, [16 x i8] c"S\00\00\00\00\00\00\00b\00\00\00\0D\00\00\00" }>, align 8
+@alloc_86a600d7da35dcf067baec31a68b790d = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_525b4dc54c895abc1c8b3f3627413691, [16 x i8] c"S\00\00\00\00\00\00\00\\\00\00\00\0D\00\00\00" }>, align 8
+@alloc_f2bda5b351dc94361263959555f65ba0 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_525b4dc54c895abc1c8b3f3627413691, [16 x i8] c"S\00\00\00\00\00\00\00\FC\00\00\00\15\00\00\00" }>, align 8
+@alloc_129a651a97dfb7a7cb6e5c0896c28cd0 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_525b4dc54c895abc1c8b3f3627413691, [16 x i8] c"S\00\00\00\00\00\00\00\09\01\00\00\19\00\00\00" }>, align 8
+@alloc_7d1752f895550b65c8b0b25a2dee062f = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_525b4dc54c895abc1c8b3f3627413691, [16 x i8] c"S\00\00\00\00\00\00\00\09\01\00\00$\00\00\00" }>, align 8
+@alloc_bd81994d216b0baab57b479e1386845a = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_525b4dc54c895abc1c8b3f3627413691, [16 x i8] c"S\00\00\00\00\00\00\00\F1\00\00\00\15\00\00\00" }>, align 8
+@alloc_98b7f0628fdd87e30f3030cfe9b984cf = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_525b4dc54c895abc1c8b3f3627413691, [16 x i8] c"S\00\00\00\00\00\00\00\F1\00\00\00,\00\00\00" }>, align 8
+@alloc_af5458d08bf8e3877912ae40e08608e8 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_525b4dc54c895abc1c8b3f3627413691, [16 x i8] c"S\00\00\00\00\00\00\00m\01\00\00\1C\00\00\00" }>, align 8
+@alloc_cb8e3e2502d53c2a02c21e2681bb5e6f = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_525b4dc54c895abc1c8b3f3627413691, [16 x i8] c"S\00\00\00\00\00\00\00~\01\00\00\15\00\00\00" }>, align 8
+@alloc_a221c1a2360062e2a832e15ee17bc655 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_525b4dc54c895abc1c8b3f3627413691, [16 x i8] c"S\00\00\00\00\00\00\00~\01\00\00,\00\00\00" }>, align 8
+@alloc_9c862686bbc2e43cf998685e57f71a69 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_525b4dc54c895abc1c8b3f3627413691, [16 x i8] c"S\00\00\00\00\00\00\00v\01\00\00\19\00\00\00" }>, align 8
+@alloc_de3627cd7ea65296f01e0bdae05e1504 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_525b4dc54c895abc1c8b3f3627413691, [16 x i8] c"S\00\00\00\00\00\00\00v\01\00\00$\00\00\00" }>, align 8
+@alloc_f94f82537a892f0cff1d205984cd5415 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_525b4dc54c895abc1c8b3f3627413691, [16 x i8] c"S\00\00\00\00\00\00\00\D6\01\00\00\15\00\00\00" }>, align 8
+@alloc_9645b7ea97e11e530962bac2f32506ac = private unnamed_addr constant <{ [28 x i8] }> <{ [28 x i8] c"assertion failed: k + k <= n" }>, align 1
+@alloc_ed02a348f96e3a38c865d90936a8d6bb = private unnamed_addr constant <{ [85 x i8] }> <{ [85 x i8] c"/home/alin/code/reed-solomon-novelpoly/reed-solomon-novelpoly/src/field/inc_encode.rs" }>, align 1
+@alloc_7a9d2309199b3f0dabc76abc14719015 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00\10\00\00\00\05\00\00\00" }>, align 8
+@alloc_526f11c18707b12f3812c109556c482a = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00\11\00\00\00\05\00\00\00" }>, align 8
+@alloc_e9d3ac4b69bef9ec6510babe5e3500dd = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00\12\00\00\00\05\00\00\00" }>, align 8
+@alloc_88c85b72894c45b5bd1102c45d36615c = private unnamed_addr constant <{ [34 x i8] }> <{ [34 x i8] c"assertion failed: is_power_of_2(n)" }>, align 1
+@alloc_80ba7062d26907dfab576787212b0e16 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00\14\00\00\00\05\00\00\00" }>, align 8
+@alloc_ebab1fa1c8764925fb61c89c3a8b4711 = private unnamed_addr constant <{ [34 x i8] }> <{ [34 x i8] c"assertion failed: is_power_of_2(k)" }>, align 1
+@alloc_b565664364830caebe8531352cb295b3 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00\15\00\00\00\05\00\00\00" }>, align 8
+@alloc_54bbe7d664be606d9c2fec86cf1399bc = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00\18\00\00\00\05\00\00\00" }>, align 8
+@alloc_5088b06d17e4d1bf31605007e8b5aeb3 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00\1E\00\00\00>\00\00\00" }>, align 8
+@alloc_dc7c0bafb1ee24bd5411a1f8ad7f549c = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00'\00\00\00;\00\00\00" }>, align 8
+@alloc_2b34cb3706a08cd5e8dd351bf1c50524 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00x\00\00\00\0C\00\00\00" }>, align 8
+@alloc_bf5facbc0203c3c9b17b7e0140adce04 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00x\00\00\00'\00\00\00" }>, align 8
+@alloc_9682ffdcded58010cb1958767eb6ef1a = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00x\00\00\00\12\00\00\00" }>, align 8
+@alloc_9e5273400af4d74bef4b62bbb08b5853 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00|\00\00\00\0D\00\00\00" }>, align 8
+@alloc_8fadc155b55c46db415df2915eae58f3 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00s\00\00\00\09\00\00\00" }>, align 8
+@alloc_f67a26d9ec9c4b6edbbfbb219df2a456 = private unnamed_addr constant <{ [40 x i8] }> <{ [40 x i8] c"Algorithm only works for 2^i sizes for N" }>, align 1
+@alloc_f4add719eaa34a8271973689f21b3b52 = private unnamed_addr constant <{ ptr, [8 x i8] }> <{ ptr @alloc_f67a26d9ec9c4b6edbbfbb219df2a456, [8 x i8] c"(\00\00\00\00\00\00\00" }>, align 8
+@alloc_2afbd3a968cecb813337a812b6fd4e75 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00\A7\00\00\00\05\00\00\00" }>, align 8
+@alloc_154b479d4148c078cda2034c3d165ed1 = private unnamed_addr constant <{ [40 x i8] }> <{ [40 x i8] c"Algorithm only works for 2^i sizes for K" }>, align 1
+@alloc_056501d170f1fadc090e6d380d80cd04 = private unnamed_addr constant <{ ptr, [8 x i8] }> <{ ptr @alloc_154b479d4148c078cda2034c3d165ed1, [8 x i8] c"(\00\00\00\00\00\00\00" }>, align 8
+@alloc_85aa81c0631db6c9eb4f3bc88b510f54 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00\A8\00\00\00\05\00\00\00" }>, align 8
+@alloc_da1237183331fa9a4026ffc9ac590458 = private unnamed_addr constant <{ [39 x i8] }> <{ [39 x i8] c"assertion failed: bytes.len() <= k << 1" }>, align 1
+@alloc_398940dfd68a307120fc91958cb06184 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00\A9\00\00\00\05\00\00\00" }>, align 8
+@alloc_0c0438671d5b44eff5edb13c53e898ef = private unnamed_addr constant <{ [28 x i8] }> <{ [28 x i8] c"assertion failed: k <= n / 2" }>, align 1
+@alloc_0a674a2b660622194cd9384c7caa0f33 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00\AA\00\00\00\05\00\00\00" }>, align 8
+@alloc_6b646b3f0eda2eb27e1021d407a59dad = private unnamed_addr constant <{ [42 x i8] }> <{ [42 x i8] c"assertion failed: is_power_of_2(upper_len)" }>, align 1
+@alloc_b28babb5c9f9e0beede2b4b1c53ac45d = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00\BA\00\00\00\05\00\00\00" }>, align 8
+@alloc_50aa0f52b05483e660bdef6f254a28c2 = private unnamed_addr constant <{ [40 x i8] }> <{ [40 x i8] c"assertion failed: upper_len >= bytes_len" }>, align 1
+@alloc_c7855daad1c0ba5e271eb1d5c93bff6e = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00\BB\00\00\00\05\00\00\00" }>, align 8
+@alloc_5a428aa0a8304ef609a21a89fc12e259 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00\CB\00\00\00\05\00\00\00" }>, align 8
+@alloc_cc0d035f505129e2d4008403bbcd8504 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_ed02a348f96e3a38c865d90936a8d6bb, [16 x i8] c"U\00\00\00\00\00\00\00\C2\00\00\00\11\00\00\00" }>, align 8
+@alloc_60e1a78b9d371058ca70d61092c51497 = private unnamed_addr constant <{ [90 x i8] }> <{ [90 x i8] c"/home/alin/code/reed-solomon-novelpoly/reed-solomon-novelpoly/src/field/inc_reconstruct.rs" }>, align 1
+@alloc_ec76c5ce7bf7f7a58b63dbd8f6e3ee3b = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_60e1a78b9d371058ca70d61092c51497, [16 x i8] c"Z\00\00\00\00\00\00\00\08\00\00\00\05\00\00\00" }>, align 8
+@alloc_a1459dd60c986ead9664c6b690ef7bc0 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_60e1a78b9d371058ca70d61092c51497, [16 x i8] c"Z\00\00\00\00\00\00\00\09\00\00\00\05\00\00\00" }>, align 8
+@alloc_ad1d5547ace4f2eefcadb03b7bffa26a = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_60e1a78b9d371058ca70d61092c51497, [16 x i8] c"Z\00\00\00\00\00\00\00\0A\00\00\00\05\00\00\00" }>, align 8
+@alloc_9ebe8e0cbac236667465f9f6192fa042 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_60e1a78b9d371058ca70d61092c51497, [16 x i8] c"Z\00\00\00\00\00\00\00\0B\00\00\00\05\00\00\00" }>, align 8
+@alloc_19bb0f56dfaa9426be6c2f395020994f = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_60e1a78b9d371058ca70d61092c51497, [16 x i8] c"Z\00\00\00\00\00\00\00(\00\00\00\05\00\00\00" }>, align 8
+@alloc_cfd24519969ce7f2426e4afcc9af3a34 = private unnamed_addr constant <{ [36 x i8] }> <{ [36 x i8] c"assertion failed: n >= recover_up_to" }>, align 1
+@alloc_cb46dca630ab2c227f72920456b77858 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_60e1a78b9d371058ca70d61092c51497, [16 x i8] c"Z\00\00\00\00\00\00\00E\00\00\00\05\00\00\00" }>, align 8
+@alloc_6c9d093d15a7e684f9061a9874ddc42a = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_60e1a78b9d371058ca70d61092c51497, [16 x i8] c"Z\00\00\00\00\00\00\00F\00\00\00\05\00\00\00" }>, align 8
+@alloc_dada7e7c04778dc39b4b021b0b373ec8 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_60e1a78b9d371058ca70d61092c51497, [16 x i8] c"Z\00\00\00\00\00\00\00S\00\00\007\00\00\00" }>, align 8
+@alloc_7d61feebca8684fd32c8d767ae100ded = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_60e1a78b9d371058ca70d61092c51497, [16 x i8] c"Z\00\00\00\00\00\00\00I\00\00\00L\00\00\00" }>, align 8
+@alloc_f1aa12ca0f369853a57abcfb504d4478 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_60e1a78b9d371058ca70d61092c51497, [16 x i8] c"Z\00\00\00\00\00\00\00j\00\00\003\00\00\00" }>, align 8
+@alloc_aff7f64644633cb3253a67eea439cb87 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_60e1a78b9d371058ca70d61092c51497, [16 x i8] c"Z\00\00\00\00\00\00\00d\00\00\00\13\00\00\00" }>, align 8
+@alloc_3f8850fa998896bdaf02ad3f4f1d861b = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_60e1a78b9d371058ca70d61092c51497, [16 x i8] c"Z\00\00\00\00\00\00\00d\00\00\00-\00\00\00" }>, align 8
+@alloc_970e5e2449e975ca8f0f014539cb1adf = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_60e1a78b9d371058ca70d61092c51497, [16 x i8] c"Z\00\00\00\00\00\00\00`\00\00\00\09\00\00\00" }>, align 8
+@alloc_0770269ece59578a7bd2110f9f31c864 = private unnamed_addr constant <{ ptr, [16 x i8] }> <{ ptr @alloc_60e1a78b9d371058ca70d61092c51497, [16 x i8] c"Z\00\00\00\00\00\00\00]\00\00\00\09\00\00\00" }>, align 8
+@alloc_62d755d4af4d628bab9af0e41ac2cae4 = private unnamed_addr constant <{ [10 x i8] }> <{ [10 x i8] c"CodeParams" }>, align 1
+@alloc_8cf0898dc872bc8dff55f49d0e992a3c = private unnamed_addr constant <{ [8 x i8] }> <{ [8 x i8] c"wanted_n" }>, align 1
+@alloc_30865dd7b0ebe566610fbe04988584e4 = private unnamed_addr constant <{ [11 x i8] }> <{ [11 x i8] c"ReedSolomon" }>, align 1
+@alloc_b0193283e17cf8976adff67317af9b3b = private unnamed_addr constant <{ [12 x i8] }> <{ [12 x i8] c"WrappedShard" }>, align 1
+@alloc_6c342f467cee9eb46aaa013cf1ccd49c = private unnamed_addr constant <{ [5 x i8] }> <{ [5 x i8] c"inner" }>, align 1
+@vtable.7 = private unnamed_addr constant <{ ptr, [16 x i8], ptr }> <{ ptr @"_ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE", [16 x i8] c"\08\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00", ptr @"_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4b55c2857193cb84E" }>, align 8
+@_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E = global <{ [524286 x i8] }> undef, align 2
+@_ZN22reed_solomon_novelpoly5field5f2e164AFFT51__static_init_constructor___static_init_initializer17heb1d8903642872dbE = constant <{ ptr }> <{ ptr @_ZN22reed_solomon_novelpoly5field5f2e164AFFT25__static_init_initializer17heef256c84ca9d3d1E }>, section ".init_array.65535", align 8
+@alloc_88bfea4fabafdbb0e94416283adb6d98 = private unnamed_addr constant <{ [10 x i8] }> <{ [10 x i8] c"Multiplier" }>, align 1
+@vtable.8 = private unnamed_addr constant <{ ptr, [16 x i8], ptr }> <{ ptr @"_ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE", [16 x i8] c"\08\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00", ptr @"_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb4548768d1434584E" }>, align 8
+@llvm.compiler.used = appending global [1 x ptr] [ptr @_ZN22reed_solomon_novelpoly5field5f2e164AFFT51__static_init_constructor___static_init_initializer17heb1d8903642872dbE], section "llvm.metadata"
+
+@"_ZN85_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..fmt..Display$GT$3fmt17h14acab410f045160E" = unnamed_addr alias i1 (ptr, ptr), ptr @"_ZN83_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..fmt..Debug$GT$3fmt17h80587c494ba364a6E"
+@"_ZN112_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsRef$LT$$u5b$u8$u5d$$GT$$GT$6as_ref17h9ba04e48f6d6b330E" = unnamed_addr alias { ptr, i64 } (ptr), ptr @"_ZN112_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsMut$LT$$u5b$u8$u5d$$GT$$GT$6as_mut17h9040ed54cdf1da03E"
+
+; <&T as core::fmt::Debug>::fmt
+; Function Attrs: nonlazybind uwtable
+define internal noundef zeroext i1 @"_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03f8b3d393e0291bE"(ptr noalias nocapture noundef readonly align 8 dereferenceable(8) %self, ptr noalias noundef align 8 dereferenceable(64) %f) unnamed_addr #0 {
+start:
+  %_3 = load ptr, ptr %self, align 8, !nonnull !3, !align !4, !noundef !3
+; call core::fmt::Formatter::debug_lower_hex
+  %_3.i = tail call noundef zeroext i1 @_ZN4core3fmt9Formatter15debug_lower_hex17h02451919f875e20fE(ptr noalias noundef nonnull readonly align 8 dereferenceable(64) %f), !noalias !5
+  br i1 %_3.i, label %bb2.i, label %bb3.i
+
+bb3.i:                                            ; preds = %start
+; call core::fmt::Formatter::debug_upper_hex
+  %_5.i = tail call noundef zeroext i1 @_ZN4core3fmt9Formatter15debug_upper_hex17ha0597c99843b7c7fE(ptr noalias noundef nonnull readonly align 8 dereferenceable(64) %f), !noalias !5
+  br i1 %_5.i, label %bb5.i, label %bb6.i
+
+bb2.i:                                            ; preds = %start
+; call core::fmt::num::<impl core::fmt::LowerHex for u8>::fmt
+  %0 = tail call noundef zeroext i1 @"_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17h4887ced3a43cbb7bE"(ptr noalias noundef nonnull readonly align 1 dereferenceable(1) %_3, ptr noalias noundef nonnull align 8 dereferenceable(64) %f)
+  br label %"_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hb9743ec7083ac4f0E.exit"
+
+bb6.i:                                            ; preds = %bb3.i
+; call core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt
+  %1 = tail call noundef zeroext i1 @"_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5ab4f508d380af32E"(ptr noalias noundef nonnull readonly align 1 dereferenceable(1) %_3, ptr noalias noundef nonnull align 8 dereferenceable(64) %f)
+  br label %"_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hb9743ec7083ac4f0E.exit"
+
+bb5.i:                                            ; preds = %bb3.i
+; call core::fmt::num::<impl core::fmt::UpperHex for u8>::fmt
+  %2 = tail call noundef zeroext i1 @"_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h1292c8b8bfbad611E"(ptr noalias noundef nonnull readonly align 1 dereferenceable(1) %_3, ptr noalias noundef nonnull align 8 dereferenceable(64) %f)
+  br label %"_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hb9743ec7083ac4f0E.exit"
+
+"_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hb9743ec7083ac4f0E.exit": ; preds = %bb2.i, %bb6.i, %bb5.i
+  %_0.0.in.i = phi i1 [ %0, %bb2.i ], [ %2, %bb5.i ], [ %1, %bb6.i ]
+  ret i1 %_0.0.in.i
+}
+
+; <&T as core::fmt::Debug>::fmt
+; Function Attrs: nonlazybind uwtable
+define internal noundef zeroext i1 @"_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4b55c2857193cb84E"(ptr noalias nocapture noundef readonly align 8 dereferenceable(8) %self, ptr noalias noundef align 8 dereferenceable(64) %f) unnamed_addr #0 personality ptr @rust_eh_personality {
+start:
+  %entry.i.i.i = alloca ptr, align 8
+  %_6.i.i = alloca %"core::fmt::builders::DebugList<'_, '_>", align 8
+  %_3 = load ptr, ptr %self, align 8, !nonnull !3, !align !8, !noundef !3
+  %_3.val = load ptr, ptr %_3, align 8, !nonnull !3, !noundef !3
+  %0 = getelementptr i8, ptr %_3, i64 16
+  %_3.val1 = load i64, ptr %0, align 8, !noundef !3
+  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %_6.i.i), !noalias !9
+; call core::fmt::Formatter::debug_list
+  call void @_ZN4core3fmt9Formatter10debug_list17ha6f679d6ea0da051E(ptr noalias nocapture noundef nonnull sret(%"core::fmt::builders::DebugList<'_, '_>") align 8 dereferenceable(16) %_6.i.i, ptr noalias noundef nonnull align 8 dereferenceable(64) %f), !noalias !15
+  %1 = getelementptr inbounds i8, ptr %_3.val, i64 %_3.val1
+  %2 = icmp eq i64 %_3.val1, 0
+  br i1 %2, label %"_ZN65_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hfb04d40fa165d9a7E.exit", label %bb4.i.i.i
+
+bb4.i.i.i:                                        ; preds = %start, %bb4.i.i.i
+  %iter.sroa.0.06.i.i.i = phi ptr [ %_30.i.i.i.i, %bb4.i.i.i ], [ %_3.val, %start ]
+  %_30.i.i.i.i = getelementptr inbounds i8, ptr %iter.sroa.0.06.i.i.i, i64 1
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %entry.i.i.i), !noalias !16
+  store ptr %iter.sroa.0.06.i.i.i, ptr %entry.i.i.i, align 8, !noalias !16
+; call core::fmt::builders::DebugList::entry
+  %_9.i.i.i = call noundef align 8 dereferenceable(16) ptr @_ZN4core3fmt8builders9DebugList5entry17h7ad76c6fe3c0cf5aE(ptr noalias noundef nonnull align 8 dereferenceable(16) %_6.i.i, ptr noundef nonnull align 1 %entry.i.i.i, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.0)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %entry.i.i.i), !noalias !16
+  %3 = icmp eq ptr %_30.i.i.i.i, %1
+  br i1 %3, label %"_ZN65_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hfb04d40fa165d9a7E.exit", label %bb4.i.i.i
+
+"_ZN65_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hfb04d40fa165d9a7E.exit": ; preds = %bb4.i.i.i, %start
+; call core::fmt::builders::DebugList::finish
+  %_0.i.i = call noundef zeroext i1 @_ZN4core3fmt8builders9DebugList6finish17h7338d0230ed6c7b7E(ptr noalias noundef nonnull align 8 dereferenceable(16) %_6.i.i)
+  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %_6.i.i), !noalias !9
+  ret i1 %_0.i.i
+}
+
+; <&T as core::fmt::Debug>::fmt
+; Function Attrs: nonlazybind uwtable
+define internal noundef zeroext i1 @"_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17ha700999c63438872E"(ptr noalias nocapture noundef readonly align 8 dereferenceable(8) %self, ptr noalias noundef align 8 dereferenceable(64) %f) unnamed_addr #0 {
+start:
+  %_3 = load ptr, ptr %self, align 8, !nonnull !3, !align !8, !noundef !3
+; call core::fmt::Formatter::debug_lower_hex
+  %_3.i = tail call noundef zeroext i1 @_ZN4core3fmt9Formatter15debug_lower_hex17h02451919f875e20fE(ptr noalias noundef nonnull readonly align 8 dereferenceable(64) %f), !noalias !19
+  br i1 %_3.i, label %bb2.i, label %bb3.i
+
+bb3.i:                                            ; preds = %start
+; call core::fmt::Formatter::debug_upper_hex
+  %_5.i = tail call noundef zeroext i1 @_ZN4core3fmt9Formatter15debug_upper_hex17ha0597c99843b7c7fE(ptr noalias noundef nonnull readonly align 8 dereferenceable(64) %f), !noalias !19
+  br i1 %_5.i, label %bb5.i, label %bb6.i
+
+bb2.i:                                            ; preds = %start
+; call core::fmt::num::<impl core::fmt::LowerHex for usize>::fmt
+  %0 = tail call noundef zeroext i1 @"_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h783d0409ebf978eaE"(ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %_3, ptr noalias noundef nonnull align 8 dereferenceable(64) %f)
+  br label %"_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hda6ef4ff662f905dE.exit"
+
+bb6.i:                                            ; preds = %bb3.i
+; call core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt
+  %1 = tail call noundef zeroext i1 @"_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h41ddf95380c12bacE"(ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %_3, ptr noalias noundef nonnull align 8 dereferenceable(64) %f)
+  br label %"_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hda6ef4ff662f905dE.exit"
+
+bb5.i:                                            ; preds = %bb3.i
+; call core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt
+  %2 = tail call noundef zeroext i1 @"_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h7921b150890d4ccbE"(ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %_3, ptr noalias noundef nonnull align 8 dereferenceable(64) %f)
+  br label %"_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hda6ef4ff662f905dE.exit"
+
+"_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hda6ef4ff662f905dE.exit": ; preds = %bb2.i, %bb6.i, %bb5.i
+  %_0.0.in.i = phi i1 [ %0, %bb2.i ], [ %2, %bb5.i ], [ %1, %bb6.i ]
+  ret i1 %_0.0.in.i
+}
+
+; <&T as core::fmt::Debug>::fmt
+; Function Attrs: nonlazybind uwtable
+define internal noundef zeroext i1 @"_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb4548768d1434584E"(ptr noalias nocapture noundef readonly align 8 dereferenceable(8) %self, ptr noalias noundef align 8 dereferenceable(64) %f) unnamed_addr #0 {
+start:
+  %_3 = load ptr, ptr %self, align 8, !nonnull !3, !align !22, !noundef !3
+; call core::fmt::Formatter::debug_lower_hex
+  %_3.i = tail call noundef zeroext i1 @_ZN4core3fmt9Formatter15debug_lower_hex17h02451919f875e20fE(ptr noalias noundef nonnull readonly align 8 dereferenceable(64) %f), !noalias !23
+  br i1 %_3.i, label %bb2.i, label %bb3.i
+
+bb3.i:                                            ; preds = %start
+; call core::fmt::Formatter::debug_upper_hex
+  %_5.i = tail call noundef zeroext i1 @_ZN4core3fmt9Formatter15debug_upper_hex17ha0597c99843b7c7fE(ptr noalias noundef nonnull readonly align 8 dereferenceable(64) %f), !noalias !23
+  br i1 %_5.i, label %bb5.i, label %bb6.i
+
+bb2.i:                                            ; preds = %start
+; call core::fmt::num::<impl core::fmt::LowerHex for u16>::fmt
+  %0 = tail call noundef zeroext i1 @"_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17h3e388c420aea3b33E"(ptr noalias noundef nonnull readonly align 2 dereferenceable(2) %_3, ptr noalias noundef nonnull align 8 dereferenceable(64) %f)
+  br label %"_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h84f1bfa5dc014928E.exit"
+
+bb6.i:                                            ; preds = %bb3.i
+; call core::fmt::num::imp::<impl core::fmt::Display for u16>::fmt
+  %1 = tail call noundef zeroext i1 @"_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h92d6ed61ed30e366E"(ptr noalias noundef nonnull readonly align 2 dereferenceable(2) %_3, ptr noalias noundef nonnull align 8 dereferenceable(64) %f)
+  br label %"_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h84f1bfa5dc014928E.exit"
+
+bb5.i:                                            ; preds = %bb3.i
+; call core::fmt::num::<impl core::fmt::UpperHex for u16>::fmt
+  %2 = tail call noundef zeroext i1 @"_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17h333cc88ae1837532E"(ptr noalias noundef nonnull readonly align 2 dereferenceable(2) %_3, ptr noalias noundef nonnull align 8 dereferenceable(64) %f)
+  br label %"_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h84f1bfa5dc014928E.exit"
+
+"_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h84f1bfa5dc014928E.exit": ; preds = %bb2.i, %bb6.i, %bb5.i
+  %_0.0.in.i = phi i1 [ %0, %bb2.i ], [ %2, %bb5.i ], [ %1, %bb6.i ]
+  ret i1 %_0.0.in.i
+}
+
+; <&T as core::fmt::Display>::fmt
+; Function Attrs: nonlazybind uwtable
+define internal noundef zeroext i1 @"_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E"(ptr noalias nocapture noundef readonly align 8 dereferenceable(8) %self, ptr noalias noundef align 8 dereferenceable(64) %f) unnamed_addr #0 {
+start:
+  %_3 = load ptr, ptr %self, align 8, !nonnull !3, !align !8, !noundef !3
+; call core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt
+  %_0 = tail call noundef zeroext i1 @"_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h41ddf95380c12bacE"(ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %_3, ptr noalias noundef nonnull align 8 dereferenceable(64) %f)
+  ret i1 %_0
+}
+
+; core::fmt::num::<impl core::fmt::Debug for usize>::fmt
+; Function Attrs: inlinehint nonlazybind uwtable
+define internal noundef zeroext i1 @"_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hda6ef4ff662f905dE"(ptr noalias noundef readonly align 8 dereferenceable(8) %self, ptr noalias noundef align 8 dereferenceable(64) %f) unnamed_addr #1 {
+start:
+; call core::fmt::Formatter::debug_lower_hex
+  %_3 = tail call noundef zeroext i1 @_ZN4core3fmt9Formatter15debug_lower_hex17h02451919f875e20fE(ptr noalias noundef nonnull readonly align 8 dereferenceable(64) %f)
+  br i1 %_3, label %bb2, label %bb3
+
+bb3:                                              ; preds = %start
+; call core::fmt::Formatter::debug_upper_hex
+  %_5 = tail call noundef zeroext i1 @_ZN4core3fmt9Formatter15debug_upper_hex17ha0597c99843b7c7fE(ptr noalias noundef nonnull readonly align 8 dereferenceable(64) %f)
+  br i1 %_5, label %bb5, label %bb6
+
+bb2:                                              ; preds = %start
+; call core::fmt::num::<impl core::fmt::LowerHex for usize>::fmt
+  %0 = tail call noundef zeroext i1 @"_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h783d0409ebf978eaE"(ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %self, ptr noalias noundef nonnull align 8 dereferenceable(64) %f)
+  br label %bb8
+
+bb6:                                              ; preds = %bb3
+; call core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt
+  %1 = tail call noundef zeroext i1 @"_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h41ddf95380c12bacE"(ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %self, ptr noalias noundef nonnull align 8 dereferenceable(64) %f)
+  br label %bb8
+
+bb5:                                              ; preds = %bb3
+; call core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt
+  %2 = tail call noundef zeroext i1 @"_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h7921b150890d4ccbE"(ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %self, ptr noalias noundef nonnull align 8 dereferenceable(64) %f)
+  br label %bb8
+
+bb8:                                              ; preds = %bb6, %bb5, %bb2
+  %_0.0.in = phi i1 [ %0, %bb2 ], [ %2, %bb5 ], [ %1, %bb6 ]
+  ret i1 %_0.0.in
+}
+
+; core::ptr::drop_in_place<core::iter::adapters::take::Take<alloc::vec::into_iter::IntoIter<reed_solomon_novelpoly::field::f2e16::Additive>>>
+; Function Attrs: nounwind nonlazybind uwtable
+define internal fastcc void @"_ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E"(ptr %_1.0.val, i64 %_1.8.val) unnamed_addr #2 personality ptr @rust_eh_personality {
+start:
+  %0 = icmp eq i64 %_1.8.val, 0
+  br i1 %0, label %"_ZN4core3ptr106drop_in_place$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$17h924fd9818b393997E.exit", label %bb2.i.i.i.i.i.i
+
+bb2.i.i.i.i.i.i:                                  ; preds = %start
+  %1 = icmp ne ptr %_1.0.val, null
+  tail call void @llvm.assume(i1 %1)
+  %size.i.i.i.i.i.i.i = shl nuw i64 %_1.8.val, 1
+  tail call void @__rust_dealloc(ptr noundef nonnull %_1.0.val, i64 noundef %size.i.i.i.i.i.i.i, i64 noundef 2) #24, !noalias !26
+  br label %"_ZN4core3ptr106drop_in_place$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$17h924fd9818b393997E.exit"
+
+"_ZN4core3ptr106drop_in_place$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$17h924fd9818b393997E.exit": ; preds = %start, %bb2.i.i.i.i.i.i
+  ret void
+}
+
+; core::ptr::drop_in_place<usize>
+; Function Attrs: inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn memory(none) uwtable
+define internal void @"_ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE"(ptr noalias nocapture readnone align 8 %_1) unnamed_addr #3 {
+start:
+  ret void
+}
+
+; core::ptr::drop_in_place<alloc::vec::Vec<u8>>
+; Function Attrs: nounwind nonlazybind uwtable
+define internal fastcc void @"_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17h01244c5b000d92deE"(ptr %_1.0.val, i64 %_1.8.val) unnamed_addr #2 personality ptr @rust_eh_personality {
+bb4:
+  %0 = icmp eq i64 %_1.8.val, 0
+  br i1 %0, label %"_ZN4core3ptr53drop_in_place$LT$alloc..raw_vec..RawVec$LT$u8$GT$$GT$17h00ff3ae2bbe0c1b2E.exit", label %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h1c19311da372666aE.exit.i.i"
+
+"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h1c19311da372666aE.exit.i.i": ; preds = %bb4
+  %1 = icmp ne ptr %_1.0.val, null
+  tail call void @llvm.assume(i1 %1)
+  tail call void @__rust_dealloc(ptr noundef nonnull %_1.0.val, i64 noundef %_1.8.val, i64 noundef 1) #24
+  br label %"_ZN4core3ptr53drop_in_place$LT$alloc..raw_vec..RawVec$LT$u8$GT$$GT$17h00ff3ae2bbe0c1b2E.exit"
+
+"_ZN4core3ptr53drop_in_place$LT$alloc..raw_vec..RawVec$LT$u8$GT$$GT$17h00ff3ae2bbe0c1b2E.exit": ; preds = %bb4, %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17h1c19311da372666aE.exit.i.i"
+  ret void
+}
+
+; core::panicking::assert_failed
+; Function Attrs: cold noinline noreturn nonlazybind uwtable
+define internal fastcc void @_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E(ptr noalias noundef readonly align 8 dereferenceable(8) %0, ptr noalias noundef readonly align 8 dereferenceable(8) %1, ptr noalias nocapture noundef readonly align 8 dereferenceable(48) %args, ptr noalias noundef readonly align 8 dereferenceable(24) %2) unnamed_addr #4 {
+start:
+  %right = alloca ptr, align 8
+  %left = alloca ptr, align 8
+  store ptr %0, ptr %left, align 8
+  store ptr %1, ptr %right, align 8
+; call core::panicking::assert_failed_inner
+  call void @_ZN4core9panicking19assert_failed_inner17h717c029df0cb454bE(i8 noundef 0, ptr noundef nonnull align 1 %left, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.4, ptr noundef nonnull align 1 %right, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.4, ptr noalias nocapture noundef nonnull readonly align 8 dereferenceable(48) %args, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %2) #25
+  unreachable
+}
+
+; alloc::raw_vec::finish_grow
+; Function Attrs: noinline nounwind nonlazybind uwtable
+define internal fastcc void @_ZN5alloc7raw_vec11finish_grow17hc2b15c976a1f0a5aE(ptr noalias nocapture noundef writeonly align 8 dereferenceable(24) %_0, i64 noundef %new_layout.0, i64 %new_layout.1, ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %current_memory) unnamed_addr #5 {
+start:
+  %0 = icmp eq i64 %new_layout.0, 0
+  br i1 %0, label %bb5, label %bb3
+
+bb3:                                              ; preds = %start
+  %1 = getelementptr inbounds %"core::option::Option<(core::ptr::non_null::NonNull<u8>, core::alloc::layout::Layout)>", ptr %current_memory, i64 0, i32 1
+  %2 = load i64, ptr %1, align 8, !range !29, !noundef !3
+  %.not = icmp eq i64 %2, 0
+  br i1 %.not, label %bb8, label %bb9
+
+bb5:                                              ; preds = %start
+  %3 = getelementptr inbounds %"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>::Err", ptr %_0, i64 0, i32 1
+  store i64 0, ptr %3, align 8
+  %4 = getelementptr inbounds %"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>::Err", ptr %_0, i64 0, i32 1, i32 1
+  br label %bb15
+
+bb9:                                              ; preds = %bb3
+  %ptr = load ptr, ptr %current_memory, align 8, !nonnull !3, !noundef !3
+  %5 = getelementptr inbounds { ptr, { i64, i64 } }, ptr %current_memory, i64 0, i32 1, i32 1
+  %old_layout.1 = load i64, ptr %5, align 8, !noundef !3
+  %_24 = icmp eq i64 %2, %new_layout.0
+  tail call void @llvm.assume(i1 %_24)
+  %6 = icmp eq i64 %old_layout.1, 0
+  br i1 %6, label %bb1.i.i, label %bb4.i.i
+
+bb1.i.i:                                          ; preds = %bb9
+  %7 = icmp eq i64 %new_layout.1, 0
+  br i1 %7, label %bb2.i.i.i, label %bb4.i.i.i
+
+bb2.i.i.i:                                        ; preds = %bb1.i.i
+  %ptr.i.i.i = inttoptr i64 %new_layout.0 to ptr
+  br label %bb12
+
+bb4.i.i.i:                                        ; preds = %bb1.i.i
+  %8 = load volatile i8, ptr @__rust_no_alloc_shim_is_unstable, align 1
+  %9 = tail call noundef ptr @__rust_alloc(i64 noundef %new_layout.1, i64 noundef %new_layout.0) #24
+  br label %bb12
+
+bb4.i.i:                                          ; preds = %bb9
+  %_21.i.i = icmp ule i64 %old_layout.1, %new_layout.1
+  tail call void @llvm.assume(i1 %_21.i.i)
+  %raw_ptr.i.i = tail call noundef ptr @__rust_realloc(ptr noundef nonnull %ptr, i64 noundef %old_layout.1, i64 noundef %new_layout.0, i64 noundef %new_layout.1) #24
+  br label %bb12
+
+bb8:                                              ; preds = %bb3
+  %10 = icmp eq i64 %new_layout.1, 0
+  br i1 %10, label %bb2.i.i, label %bb4.i.i18
+
+bb2.i.i:                                          ; preds = %bb8
+  %11 = add i64 %new_layout.0, -1
+  %_24.i.i = icmp sgt i64 %11, -1
+  tail call void @llvm.assume(i1 %_24.i.i)
+  %ptr.i.i = inttoptr i64 %new_layout.0 to ptr
+  br label %bb12
+
+bb4.i.i18:                                        ; preds = %bb8
+  %12 = load volatile i8, ptr @__rust_no_alloc_shim_is_unstable, align 1
+  %13 = add i64 %new_layout.0, -1
+  %_55.i.i = icmp sgt i64 %13, -1
+  tail call void @llvm.assume(i1 %_55.i.i)
+  %14 = tail call noundef ptr @__rust_alloc(i64 noundef %new_layout.1, i64 noundef %new_layout.0) #24
+  br label %bb12
+
+bb12:                                             ; preds = %bb4.i.i18, %bb2.i.i, %bb4.i.i, %bb4.i.i.i, %bb2.i.i.i
+  %_0.sroa.0.0.i.i.pn = phi ptr [ %raw_ptr.i.i, %bb4.i.i ], [ %ptr.i.i.i, %bb2.i.i.i ], [ %9, %bb4.i.i.i ], [ %ptr.i.i, %bb2.i.i ], [ %14, %bb4.i.i18 ]
+  %15 = icmp eq ptr %_0.sroa.0.0.i.i.pn, null
+  br i1 %15, label %bb1.i22, label %bb3.i20
+
+bb3.i20:                                          ; preds = %bb12
+  %16 = getelementptr inbounds %"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>::Ok", ptr %_0, i64 0, i32 1
+  store ptr %_0.sroa.0.0.i.i.pn, ptr %16, align 8, !alias.scope !30
+  %17 = getelementptr inbounds %"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>::Ok", ptr %_0, i64 0, i32 1, i32 1
+  br label %bb15
+
+bb1.i22:                                          ; preds = %bb12
+  %18 = getelementptr inbounds %"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>::Err", ptr %_0, i64 0, i32 1
+  store i64 %new_layout.0, ptr %18, align 8, !alias.scope !30
+  %19 = getelementptr inbounds %"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>::Err", ptr %_0, i64 0, i32 1, i32 1
+  br label %bb15
+
+bb15:                                             ; preds = %bb1.i22, %bb3.i20, %bb5
+  %.sink = phi ptr [ %19, %bb1.i22 ], [ %17, %bb3.i20 ], [ %4, %bb5 ]
+  %storemerge = phi i64 [ 1, %bb1.i22 ], [ 0, %bb3.i20 ], [ 1, %bb5 ]
+  store i64 %new_layout.1, ptr %.sink, align 8
+  store i64 %storemerge, ptr %_0, align 8
+  ret void
+}
+
+; alloc::raw_vec::RawVec<T,A>::reserve_for_push
+; Function Attrs: noinline nonlazybind uwtable
+define internal fastcc void @"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h66a5e27c35238407E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %self, i64 noundef %len) unnamed_addr #6 personality ptr @rust_eh_personality {
+start:
+  %_24.i = alloca %"core::option::Option<(core::ptr::non_null::NonNull<u8>, core::alloc::layout::Layout)>", align 8
+  %self4.i = alloca %"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>", align 8
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !33)
+  %0 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %len, i64 1)
+  %_35.1.i = extractvalue { i64, i1 } %0, 1
+  br i1 %_35.1.i, label %bb5.i1, label %bb5.i
+
+bb5.i:                                            ; preds = %start
+  %_35.0.i = extractvalue { i64, i1 } %0, 0
+  %1 = getelementptr inbounds { ptr, i64 }, ptr %self, i64 0, i32 1
+  %_16.i = load i64, ptr %1, align 8, !alias.scope !33, !noundef !3
+  %v1.i = shl i64 %_16.i, 1
+  %_0.0.sroa.speculated.i.i = tail call i64 @llvm.umax.i64(i64 %v1.i, i64 %_35.0.i)
+  %_0.0.sroa.speculated.i23.i = tail call i64 @llvm.umax.i64(i64 %_0.0.sroa.speculated.i.i, i64 8)
+  %_4.i.i = icmp sgt i64 %_0.0.sroa.speculated.i23.i, -1
+  %_0.sroa.0.0.i.i = zext i1 %_4.i.i to i64
+  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %self4.i), !noalias !33
+  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %_24.i), !noalias !33
+  %2 = icmp eq i64 %_16.i, 0
+  br i1 %2, label %bb2.i.i, label %bb3.i.i
+
+bb2.i.i:                                          ; preds = %bb5.i
+  %3 = getelementptr inbounds %"core::option::Option<(core::ptr::non_null::NonNull<u8>, core::alloc::layout::Layout)>", ptr %_24.i, i64 0, i32 1
+  store i64 0, ptr %3, align 8, !alias.scope !36, !noalias !33
+  br label %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h90659b6bc211e545E.exit.i"
+
+bb3.i.i:                                          ; preds = %bb5.i
+  %self.val.i = load ptr, ptr %self, align 8, !alias.scope !33, !nonnull !3, !noundef !3
+  store ptr %self.val.i, ptr %_24.i, align 8, !alias.scope !36, !noalias !33
+  %_9.sroa.4.0._0.sroa_idx.i.i = getelementptr inbounds i8, ptr %_24.i, i64 8
+  store i64 1, ptr %_9.sroa.4.0._0.sroa_idx.i.i, align 8, !alias.scope !36, !noalias !33
+  %_9.sroa.5.0._0.sroa_idx.i.i = getelementptr inbounds i8, ptr %_24.i, i64 16
+  store i64 %_16.i, ptr %_9.sroa.5.0._0.sroa_idx.i.i, align 8, !alias.scope !36, !noalias !33
+  br label %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h90659b6bc211e545E.exit.i"
+
+"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h90659b6bc211e545E.exit.i": ; preds = %bb3.i.i, %bb2.i.i
+; call alloc::raw_vec::finish_grow
+  call fastcc void @_ZN5alloc7raw_vec11finish_grow17hc2b15c976a1f0a5aE(ptr noalias nocapture noundef nonnull align 8 dereferenceable(24) %self4.i, i64 noundef %_0.sroa.0.0.i.i, i64 %_0.0.sroa.speculated.i23.i, ptr noalias nocapture noundef nonnull readonly align 8 dereferenceable(24) %_24.i), !noalias !33
+  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %_24.i), !noalias !33
+  %_51.i = load i64, ptr %self4.i, align 8, !range !39, !noalias !33, !noundef !3
+  %trunc.not.i = icmp eq i64 %_51.i, 0
+  %4 = getelementptr inbounds %"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>::Err", ptr %self4.i, i64 0, i32 1
+  %e.08.i = load i64, ptr %4, align 8, !noalias !33
+  %5 = getelementptr inbounds %"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>::Err", ptr %self4.i, i64 0, i32 1, i32 1
+  %e.19.i = load i64, ptr %5, align 8, !noalias !33
+  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %self4.i), !noalias !33
+  br i1 %trunc.not.i, label %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E.exit.thread", label %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E.exit"
+
+"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E.exit.thread": ; preds = %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h90659b6bc211e545E.exit.i"
+  %6 = inttoptr i64 %e.08.i to ptr
+  store ptr %6, ptr %self, align 8, !alias.scope !40
+  store i64 %_0.0.sroa.speculated.i23.i, ptr %1, align 8, !alias.scope !40
+  br label %_ZN5alloc7raw_vec14handle_reserve17h73e864725c80bc1bE.exit
+
+"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E.exit": ; preds = %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h90659b6bc211e545E.exit.i"
+  switch i64 %e.08.i, label %bb6.i [
+    i64 -9223372036854775807, label %_ZN5alloc7raw_vec14handle_reserve17h73e864725c80bc1bE.exit
+    i64 0, label %bb5.i1
+  ]
+
+bb5.i1:                                           ; preds = %start, %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E.exit"
+; call alloc::raw_vec::capacity_overflow
+  tail call void @_ZN5alloc7raw_vec17capacity_overflow17h7596d82a86d51ab8E() #25
+  unreachable
+
+bb6.i:                                            ; preds = %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E.exit"
+; call alloc::alloc::handle_alloc_error
+  tail call void @_ZN5alloc5alloc18handle_alloc_error17h6c194ef306599f55E(i64 noundef %e.08.i, i64 noundef %e.19.i) #25
+  unreachable
+
+_ZN5alloc7raw_vec14handle_reserve17h73e864725c80bc1bE.exit: ; preds = %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E.exit.thread", %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E.exit"
+  ret void
+}
+
+; alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
+; Function Attrs: cold nonlazybind uwtable
+define internal fastcc void @"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h9df8d8a6ecfddd52E"(ptr noalias nocapture noundef align 8 dereferenceable(16) %slf, i64 noundef %len, i64 noundef %additional) unnamed_addr #7 personality ptr @rust_eh_personality {
+start:
+  %_24.i = alloca %"core::option::Option<(core::ptr::non_null::NonNull<u8>, core::alloc::layout::Layout)>", align 8
+  %self4.i = alloca %"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>", align 8
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !43)
+  %0 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %len, i64 %additional)
+  %_35.1.i = extractvalue { i64, i1 } %0, 1
+  br i1 %_35.1.i, label %bb5.i1, label %bb5.i
+
+bb5.i:                                            ; preds = %start
+  %_35.0.i = extractvalue { i64, i1 } %0, 0
+  %1 = getelementptr inbounds { ptr, i64 }, ptr %slf, i64 0, i32 1
+  %_16.i = load i64, ptr %1, align 8, !alias.scope !43, !noundef !3
+  %v1.i = shl i64 %_16.i, 1
+  %_0.0.sroa.speculated.i.i = tail call i64 @llvm.umax.i64(i64 %v1.i, i64 %_35.0.i)
+  %_0.0.sroa.speculated.i23.i = tail call i64 @llvm.umax.i64(i64 %_0.0.sroa.speculated.i.i, i64 8)
+  %_4.i.i = icmp sgt i64 %_0.0.sroa.speculated.i23.i, -1
+  %_0.sroa.0.0.i.i = zext i1 %_4.i.i to i64
+  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %self4.i), !noalias !43
+  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %_24.i), !noalias !43
+  %2 = icmp eq i64 %_16.i, 0
+  br i1 %2, label %bb2.i.i, label %bb3.i.i
+
+bb2.i.i:                                          ; preds = %bb5.i
+  %3 = getelementptr inbounds %"core::option::Option<(core::ptr::non_null::NonNull<u8>, core::alloc::layout::Layout)>", ptr %_24.i, i64 0, i32 1
+  store i64 0, ptr %3, align 8, !alias.scope !46, !noalias !43
+  br label %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h90659b6bc211e545E.exit.i"
+
+bb3.i.i:                                          ; preds = %bb5.i
+  %self.val.i = load ptr, ptr %slf, align 8, !alias.scope !43, !nonnull !3, !noundef !3
+  store ptr %self.val.i, ptr %_24.i, align 8, !alias.scope !46, !noalias !43
+  %_9.sroa.4.0._0.sroa_idx.i.i = getelementptr inbounds i8, ptr %_24.i, i64 8
+  store i64 1, ptr %_9.sroa.4.0._0.sroa_idx.i.i, align 8, !alias.scope !46, !noalias !43
+  %_9.sroa.5.0._0.sroa_idx.i.i = getelementptr inbounds i8, ptr %_24.i, i64 16
+  store i64 %_16.i, ptr %_9.sroa.5.0._0.sroa_idx.i.i, align 8, !alias.scope !46, !noalias !43
+  br label %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h90659b6bc211e545E.exit.i"
+
+"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h90659b6bc211e545E.exit.i": ; preds = %bb3.i.i, %bb2.i.i
+; call alloc::raw_vec::finish_grow
+  call fastcc void @_ZN5alloc7raw_vec11finish_grow17hc2b15c976a1f0a5aE(ptr noalias nocapture noundef nonnull align 8 dereferenceable(24) %self4.i, i64 noundef %_0.sroa.0.0.i.i, i64 %_0.0.sroa.speculated.i23.i, ptr noalias nocapture noundef nonnull readonly align 8 dereferenceable(24) %_24.i), !noalias !43
+  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %_24.i), !noalias !43
+  %_51.i = load i64, ptr %self4.i, align 8, !range !39, !noalias !43, !noundef !3
+  %trunc.not.i = icmp eq i64 %_51.i, 0
+  %4 = getelementptr inbounds %"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>::Err", ptr %self4.i, i64 0, i32 1
+  %e.08.i = load i64, ptr %4, align 8, !noalias !43
+  %5 = getelementptr inbounds %"core::result::Result<core::ptr::non_null::NonNull<[u8]>, alloc::collections::TryReserveError>::Err", ptr %self4.i, i64 0, i32 1, i32 1
+  %e.19.i = load i64, ptr %5, align 8, !noalias !43
+  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %self4.i), !noalias !43
+  br i1 %trunc.not.i, label %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E.exit.thread", label %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E.exit"
+
+"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E.exit.thread": ; preds = %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h90659b6bc211e545E.exit.i"
+  %6 = inttoptr i64 %e.08.i to ptr
+  store ptr %6, ptr %slf, align 8, !alias.scope !49
+  store i64 %_0.0.sroa.speculated.i23.i, ptr %1, align 8, !alias.scope !49
+  br label %_ZN5alloc7raw_vec14handle_reserve17h73e864725c80bc1bE.exit
+
+"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E.exit": ; preds = %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h90659b6bc211e545E.exit.i"
+  switch i64 %e.08.i, label %bb6.i [
+    i64 -9223372036854775807, label %_ZN5alloc7raw_vec14handle_reserve17h73e864725c80bc1bE.exit
+    i64 0, label %bb5.i1
+  ]
+
+bb5.i1:                                           ; preds = %start, %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E.exit"
+; call alloc::raw_vec::capacity_overflow
+  tail call void @_ZN5alloc7raw_vec17capacity_overflow17h7596d82a86d51ab8E() #25
+  unreachable
+
+bb6.i:                                            ; preds = %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E.exit"
+; call alloc::alloc::handle_alloc_error
+  tail call void @_ZN5alloc5alloc18handle_alloc_error17h6c194ef306599f55E(i64 noundef %e.08.i, i64 noundef %e.19.i) #25
+  unreachable
+
+_ZN5alloc7raw_vec14handle_reserve17h73e864725c80bc1bE.exit: ; preds = %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E.exit.thread", %"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E.exit"
+  ret void
+}
+
+; reed_solomon_novelpoly::util::log2
+; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn memory(none) uwtable
+define noundef i64 @_ZN22reed_solomon_novelpoly4util4log217h811450e0482d939fE(i64 noundef %x) unnamed_addr #8 {
+start:
+  %0 = icmp eq i64 %x, 0
+  %1 = tail call i64 @llvm.ctlz.i64(i64 %x, i1 true), !range !52
+  %2 = xor i64 %1, 63
+  %_0.0 = select i1 %0, i64 0, i64 %2
+  ret i64 %_0.0
+}
+
+; reed_solomon_novelpoly::util::is_power_of_2
+; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn memory(none) uwtable
+define noundef zeroext i1 @_ZN22reed_solomon_novelpoly4util13is_power_of_217h2c7ff0eaf50d5901E(i64 noundef %x) unnamed_addr #8 {
+start:
+  %_2.not = icmp eq i64 %x, 0
+  br i1 %_2.not, label %bb3, label %bb1
+
+bb1:                                              ; preds = %start
+  %0 = tail call i64 @llvm.ctpop.i64(i64 %x), !range !52
+  %1 = icmp ult i64 %0, 2
+  br label %bb3
+
+bb3:                                              ; preds = %start, %bb1
+  %_0.0 = phi i1 [ %1, %bb1 ], [ false, %start ]
+  ret i1 %_0.0
+}
+
+; reed_solomon_novelpoly::util::next_higher_power_of_2
+; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn memory(none) uwtable
+define noundef i64 @_ZN22reed_solomon_novelpoly4util22next_higher_power_of_217h5f58c2f585fcfd0eE(i64 noundef %k) unnamed_addr #8 {
+start:
+  %0 = tail call i64 @llvm.ctpop.i64(i64 %k), !range !52
+  %or.cond = icmp eq i64 %0, 1
+  br i1 %or.cond, label %bb5, label %bb3
+
+bb3:                                              ; preds = %start
+  %_2.not.i.not = icmp eq i64 %k, 0
+  %1 = tail call i64 @llvm.ctlz.i64(i64 %k, i1 true), !range !52
+  %2 = sub nsw i64 0, %1
+  %3 = and i64 %2, 63
+  %4 = shl nuw i64 1, %3
+  %5 = select i1 %_2.not.i.not, i64 2, i64 %4
+  br label %bb5
+
+bb5:                                              ; preds = %start, %bb3
+  %_0.0 = phi i64 [ %5, %bb3 ], [ %k, %start ]
+  ret i64 %_0.0
+}
+
+; reed_solomon_novelpoly::util::next_lower_power_of_2
+; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn memory(none) uwtable
+define noundef i64 @_ZN22reed_solomon_novelpoly4util21next_lower_power_of_217h168b243b626fb326E(i64 noundef %k) unnamed_addr #8 {
+start:
+  %_2.not.i.not = icmp eq i64 %k, 0
+  %0 = tail call i64 @llvm.ctpop.i64(i64 %k), !range !52
+  %or.cond = icmp eq i64 %0, 1
+  %1 = tail call i64 @llvm.ctlz.i64(i64 %k, i1 true), !range !52
+  %2 = xor i64 %1, 63
+  %3 = shl nuw i64 1, %2
+  %4 = select i1 %_2.not.i.not, i64 1, i64 %3
+  %_0.0 = select i1 %or.cond, i64 %k, i64 %4
+  ret i64 %_0.0
+}
+
+; reed_solomon_novelpoly::util::recoverablity_subset_size
+; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn memory(none) uwtable
+define noundef i64 @_ZN22reed_solomon_novelpoly4util25recoverablity_subset_size17h59fc543c57be755cE(i64 noundef %n_wanted_shards) unnamed_addr #8 {
+start:
+  %0 = tail call i64 @llvm.usub.sat.i64(i64 %n_wanted_shards, i64 1)
+  %_2 = udiv i64 %0, 3
+  %_0 = add nuw nsw i64 %_2, 1
+  ret i64 %_0
+}
+
+; <reed_solomon_novelpoly::field::f2e16::Additive as core::fmt::Debug>::fmt
+; Function Attrs: nonlazybind uwtable
+define noundef zeroext i1 @"_ZN83_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..fmt..Debug$GT$3fmt17h80587c494ba364a6E"(ptr noalias noundef readonly align 2 dereferenceable(2) %self, ptr noalias noundef align 8 dereferenceable(64) %f) unnamed_addr #0 {
+start:
+  %_12 = alloca [1 x %"core::fmt::rt::Placeholder"], align 8
+  %_7 = alloca [1 x { ptr, ptr }], align 8
+  %_3 = alloca %"core::fmt::Arguments<'_>", align 8
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_3)
+  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %_7)
+  store ptr %self, ptr %_7, align 8
+  %0 = getelementptr inbounds { ptr, ptr }, ptr %_7, i64 0, i32 1
+  store ptr @"_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17h3e388c420aea3b33E", ptr %0, align 8
+  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %_12)
+  store i64 2, ptr %_12, align 8
+  %_13.sroa.5.0..sroa_idx = getelementptr inbounds i8, ptr %_12, i64 16
+  store i64 0, ptr %_13.sroa.5.0..sroa_idx, align 8
+  %_13.sroa.6.0..sroa_idx = getelementptr inbounds i8, ptr %_12, i64 24
+  store i64 4, ptr %_13.sroa.6.0..sroa_idx, align 8
+  %_13.sroa.7.0..sroa_idx = getelementptr inbounds i8, ptr %_12, i64 32
+  store i64 0, ptr %_13.sroa.7.0..sroa_idx, align 8
+  %_13.sroa.8.0..sroa_idx = getelementptr inbounds i8, ptr %_12, i64 40
+  store i32 32, ptr %_13.sroa.8.0..sroa_idx, align 8
+  %_13.sroa.9.0..sroa_idx = getelementptr inbounds i8, ptr %_12, i64 44
+  store i32 8, ptr %_13.sroa.9.0..sroa_idx, align 4
+  %_13.sroa.10.0..sroa_idx = getelementptr inbounds i8, ptr %_12, i64 48
+  store i8 3, ptr %_13.sroa.10.0..sroa_idx, align 8
+  store ptr @alloc_ffa3cdb3ae88e54a1cc225f31dd07672, ptr %_3, align 8
+  %1 = getelementptr inbounds { ptr, i64 }, ptr %_3, i64 0, i32 1
+  store i64 1, ptr %1, align 8
+  %2 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_3, i64 0, i32 2
+  store ptr %_12, ptr %2, align 8
+  %3 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_3, i64 0, i32 2, i32 1
+  store i64 1, ptr %3, align 8
+  %4 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_3, i64 0, i32 1
+  store ptr %_7, ptr %4, align 8
+  %5 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_3, i64 0, i32 1, i32 1
+  store i64 1, ptr %5, align 8
+; call core::fmt::Formatter::write_fmt
+  %_0 = call noundef zeroext i1 @_ZN4core3fmt9Formatter9write_fmt17hf01228dccc6fed43E(ptr noalias noundef nonnull align 8 dereferenceable(64) %f, ptr noalias nocapture noundef nonnull align 8 dereferenceable(48) %_3)
+  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %_3)
+  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %_12)
+  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %_7)
+  ret i1 %_0
+}
+
+; reed_solomon_novelpoly::novel_poly_basis::CodeParams::derive_parameters
+; Function Attrs: nonlazybind uwtable
+define void @_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams17derive_parameters17h6fee1a97c6778ac4E(ptr noalias nocapture noundef writeonly sret(%"core::result::Result<novel_poly_basis::CodeParams, errors::Error>") align 8 dereferenceable(32) %_0, i64 noundef %n, i64 noundef %k) unnamed_addr #0 {
+start:
+  %_3 = icmp ult i64 %n, 2
+  br i1 %_3, label %bb1, label %bb2
+
+bb2:                                              ; preds = %start
+  %_5 = icmp eq i64 %k, 0
+  br i1 %_5, label %bb3, label %bb4
+
+bb1:                                              ; preds = %start
+  store i64 1, ptr %_0, align 8
+  %_4.sroa.4.0._0.sroa_idx = getelementptr inbounds i8, ptr %_0, i64 8
+  store i64 %n, ptr %_4.sroa.4.0._0.sroa_idx, align 8
+  br label %bb11
+
+bb4:                                              ; preds = %bb2
+  %0 = tail call i64 @llvm.ctpop.i64(i64 %k), !range !52
+  %or.cond.i = icmp eq i64 %0, 1
+  %1 = tail call i64 @llvm.ctlz.i64(i64 %k, i1 true), !range !52
+  %2 = xor i64 %1, 63
+  %3 = shl nuw i64 1, %2
+  %_0.0.i = select i1 %or.cond.i, i64 %k, i64 %3
+  %4 = tail call i64 @llvm.ctpop.i64(i64 %n), !range !52
+  %or.cond.i1 = icmp eq i64 %4, 1
+  %5 = tail call i64 @llvm.ctlz.i64(i64 %n, i1 true), !range !52
+  %6 = sub nsw i64 0, %5
+  %7 = and i64 %6, 63
+  %8 = shl nuw i64 1, %7
+  %_0.0.i3 = select i1 %or.cond.i1, i64 %n, i64 %8
+  %_10 = mul i64 %_0.0.i, %n
+  %_12 = mul i64 %_0.0.i3, %k
+  %_9.not = icmp ugt i64 %_10, %_12
+  br i1 %_9.not, label %bb8, label %bb7
+
+bb3:                                              ; preds = %bb2
+  store i64 2, ptr %_0, align 8
+  %_6.sroa.4.0._0.sroa_idx = getelementptr inbounds i8, ptr %_0, i64 8
+  store i64 0, ptr %_6.sroa.4.0._0.sroa_idx, align 8
+  br label %bb11
+
+bb8:                                              ; preds = %bb4
+; call core::panicking::panic
+  tail call void @_ZN4core9panicking5panic17hcad0f3a89a1b36aaE(ptr noalias noundef nonnull readonly align 1 @alloc_a6ba4ba59f54069c6f4e5a0d352dbb33, i64 noundef 40, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_2598e2c73d45f0ad757785479793afc9) #25
+  unreachable
+
+bb7:                                              ; preds = %bb4
+  %_15 = icmp ugt i64 %_0.0.i3, 65536
+  br i1 %_15, label %bb9, label %bb10
+
+bb10:                                             ; preds = %bb7
+  %9 = getelementptr inbounds %"core::result::Result<novel_poly_basis::CodeParams, errors::Error>::Ok", ptr %_0, i64 0, i32 1
+  store i64 %_0.0.i3, ptr %9, align 8
+  %_18.sroa.4.0..sroa_idx = getelementptr inbounds %"core::result::Result<novel_poly_basis::CodeParams, errors::Error>::Ok", ptr %_0, i64 0, i32 1, i32 1
+  store i64 %_0.0.i, ptr %_18.sroa.4.0..sroa_idx, align 8
+  %_18.sroa.5.0..sroa_idx = getelementptr inbounds %"core::result::Result<novel_poly_basis::CodeParams, errors::Error>::Ok", ptr %_0, i64 0, i32 1, i32 2
+  store i64 %n, ptr %_18.sroa.5.0..sroa_idx, align 8
+  store i64 7, ptr %_0, align 8
+  br label %bb11
+
+bb9:                                              ; preds = %bb7
+  store i64 0, ptr %_0, align 8
+  %_17.sroa.4.0._0.sroa_idx = getelementptr inbounds i8, ptr %_0, i64 8
+  store i64 %n, ptr %_17.sroa.4.0._0.sroa_idx, align 8
+  br label %bb11
+
+bb11:                                             ; preds = %bb1, %bb3, %bb9, %bb10
+  ret void
+}
+
+; reed_solomon_novelpoly::novel_poly_basis::CodeParams::is_faster8
+; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind willreturn memory(none) uwtable
+define noundef zeroext i1 @_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams10is_faster817h9d7bda00b0acd947E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #9 {
+start:
+  ret i1 false
+}
+
+; reed_solomon_novelpoly::novel_poly_basis::CodeParams::make_encoder
+; Function Attrs: nonlazybind uwtable
+define void @_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams12make_encoder17h8b44647d13fda8efE(ptr noalias nocapture noundef writeonly sret(%"novel_poly_basis::ReedSolomon") align 8 dereferenceable(24) %_0, ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 personality ptr @rust_eh_personality {
+start:
+  %e.i = alloca %"errors::Error", align 8
+  %0 = getelementptr inbounds %"novel_poly_basis::CodeParams", ptr %self, i64 0, i32 2
+  %_5 = load i64, ptr %0, align 8, !noundef !3
+  %1 = load <2 x i64>, ptr %self, align 8
+  %2 = tail call <2 x i64> @llvm.ctpop.v2i64(<2 x i64> %1), !range !52
+  %3 = icmp eq <2 x i64> %2, <i64 1, i64 1>
+  %4 = extractelement <2 x i1> %3, i64 0
+  %5 = extractelement <2 x i1> %3, i64 1
+  %or.cond10.i = select i1 %4, i1 true, i1 %5
+  br i1 %or.cond10.i, label %"_ZN4core6result19Result$LT$T$C$E$GT$6expect17h9ffcb329ef52d96dE.exit", label %bb1.i
+
+bb1.i:                                            ; preds = %start
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !53)
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !56)
+  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %e.i), !noalias !58
+  store i64 5, ptr %e.i, align 8, !noalias !53
+  %_2.sroa.5.0.e.i.sroa_idx = getelementptr inbounds i8, ptr %e.i, i64 8
+  %6 = extractelement <2 x i64> %1, i64 0
+  store i64 %6, ptr %_2.sroa.5.0.e.i.sroa_idx, align 8, !noalias !53
+  %_2.sroa.8.0.e.i.sroa_idx = getelementptr inbounds i8, ptr %e.i, i64 16
+  %7 = extractelement <2 x i64> %1, i64 1
+  store i64 %7, ptr %_2.sroa.8.0.e.i.sroa_idx, align 8, !noalias !53
+  %_2.sroa.10.0.e.i.sroa_idx = getelementptr inbounds i8, ptr %e.i, i64 24
+  store i64 %_5, ptr %_2.sroa.10.0.e.i.sroa_idx, align 8, !noalias !53
+; call core::result::unwrap_failed
+  call void @_ZN4core6result13unwrap_failed17h8c4b86241881fbbbE(ptr noalias noundef nonnull readonly align 1 @alloc_0110dc38ab58539a2927da7e26f3223f, i64 noundef 57, ptr noundef nonnull align 1 %e.i, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.3, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_8c314ccc98be31f3cfe675f15a6e996a) #25, !noalias !58
+  unreachable
+
+"_ZN4core6result19Result$LT$T$C$E$GT$6expect17h9ffcb329ef52d96dE.exit": ; preds = %start
+  %8 = extractelement <2 x i64> %1, i64 0
+  store i64 %8, ptr %_0, align 8, !alias.scope !58
+  %_2.sroa.8.8._0.sroa_idx = getelementptr inbounds i8, ptr %_0, i64 8
+  %9 = extractelement <2 x i64> %1, i64 1
+  store i64 %9, ptr %_2.sroa.8.8._0.sroa_idx, align 8, !alias.scope !58
+  %_2.sroa.10.8._0.sroa_idx = getelementptr inbounds i8, ptr %_0, i64 16
+  store i64 %_5, ptr %_2.sroa.10.8._0.sroa_idx, align 8, !alias.scope !58
+  ret void
+}
+
+; reed_solomon_novelpoly::novel_poly_basis::CodeParams::n
+; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind willreturn memory(argmem: read) uwtable
+define noundef i64 @_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams1n17hfc67bf225e95359aE(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #10 {
+start:
+  %_0 = load i64, ptr %self, align 8, !noundef !3
+  ret i64 %_0
+}
+
+; reed_solomon_novelpoly::novel_poly_basis::CodeParams::k
+; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind willreturn memory(argmem: read) uwtable
+define noundef i64 @_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams1k17haca36551044c1d21E(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #10 {
+start:
+  %0 = getelementptr inbounds %"novel_poly_basis::CodeParams", ptr %self, i64 0, i32 1
+  %_0 = load i64, ptr %0, align 8, !noundef !3
+  ret i64 %_0
+}
+
+; reed_solomon_novelpoly::novel_poly_basis::ReedSolomon::shard_len
+; Function Attrs: nonlazybind uwtable
+define noundef i64 @_ZN22reed_solomon_novelpoly16novel_poly_basis11ReedSolomon9shard_len17h8a64e1ab6a1fd25fE(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %self, i64 noundef %payload_size) unnamed_addr #0 {
+start:
+  %0 = getelementptr inbounds %"novel_poly_basis::ReedSolomon", ptr %self, i64 0, i32 1
+  %_8 = load i64, ptr %0, align 8, !noundef !3
+  %_10 = icmp eq i64 %_8, 0
+  br i1 %_10, label %panic, label %bb1, !prof !59
+
+bb1:                                              ; preds = %start
+  %_4 = add i64 %payload_size, 1
+  %payload_symbols1 = lshr i64 %_4, 1
+  %_7 = add nsw i64 %payload_symbols1, -1
+  %_6 = add i64 %_7, %_8
+  %shard_symbols_ceil = udiv i64 %_6, %_8
+  %_0 = shl i64 %shard_symbols_ceil, 1
+  ret i64 %_0
+
+panic:                                            ; preds = %start
+; call core::panicking::panic
+  tail call void @_ZN4core9panicking5panic17hcad0f3a89a1b36aaE(ptr noalias noundef nonnull readonly align 1 @str.1, i64 noundef 25, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_4d952c8c1b6b45bfc235d3fc3d65935b) #25
+  unreachable
+}
+
+; reed_solomon_novelpoly::wrapped_shard::WrappedShard::new
+; Function Attrs: nonlazybind uwtable
+define void @_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard3new17h113340e5cbc1f570E(ptr noalias nocapture noundef writeonly sret(%"wrapped_shard::WrappedShard") align 8 dereferenceable(24) %_0, ptr noalias nocapture noundef align 8 dereferenceable(24) %data) unnamed_addr #0 personality ptr @rust_eh_personality {
+start:
+  %0 = getelementptr inbounds %"alloc::vec::Vec<u8>", ptr %data, i64 0, i32 1
+  %_3 = load i64, ptr %0, align 8, !noundef !3
+  %_2 = and i64 %_3, 1
+  %.not = icmp eq i64 %_2, 0
+  br i1 %.not, label %bb4, label %bb1
+
+bb1:                                              ; preds = %start
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !60)
+  %1 = getelementptr inbounds { ptr, i64 }, ptr %data, i64 0, i32 1
+  %2 = load i64, ptr %1, align 8, !alias.scope !60, !noundef !3
+  %_3.i = icmp eq i64 %_3, %2
+  br i1 %_3.i, label %bb1.i, label %"_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb941c2cca04652f0E.exit"
+
+bb1.i:                                            ; preds = %bb1
+; invoke alloc::raw_vec::RawVec<T,A>::reserve_for_push
+  invoke fastcc void @"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h66a5e27c35238407E"(ptr noalias noundef nonnull align 8 dereferenceable(16) %data, i64 noundef %_3)
+          to label %.noexc unwind label %cleanup
+
+.noexc:                                           ; preds = %bb1.i
+  %count.pre.i = load i64, ptr %0, align 8, !alias.scope !60
+  br label %"_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb941c2cca04652f0E.exit"
+
+"_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb941c2cca04652f0E.exit": ; preds = %bb1, %.noexc
+  %count.i = phi i64 [ %count.pre.i, %.noexc ], [ %_3, %bb1 ]
+  %self1.i = load ptr, ptr %data, align 8, !alias.scope !60, !nonnull !3, !noundef !3
+  %end.i = getelementptr inbounds i8, ptr %self1.i, i64 %count.i
+  store i8 0, ptr %end.i, align 1, !noalias !60
+  %3 = add i64 %count.i, 1
+  store i64 %3, ptr %0, align 8, !alias.scope !60
+  br label %bb4
+
+cleanup:                                          ; preds = %bb1.i
+  %4 = landingpad { ptr, i32 }
+          cleanup
+  %data.val = load ptr, ptr %data, align 8
+  %data.val1 = load i64, ptr %1, align 8
+; call core::ptr::drop_in_place<alloc::vec::Vec<u8>>
+  tail call fastcc void @"_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17h01244c5b000d92deE"(ptr %data.val, i64 %data.val1) #26
+  resume { ptr, i32 } %4
+
+bb4:                                              ; preds = %"_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb941c2cca04652f0E.exit", %start
+  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %_0, ptr noundef nonnull align 8 dereferenceable(24) %data, i64 24, i1 false)
+  ret void
+}
+
+; reed_solomon_novelpoly::wrapped_shard::WrappedShard::into_inner
+; Function Attrs: mustprogress nofree nosync nounwind nonlazybind willreturn memory(argmem: readwrite) uwtable
+define void @_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard10into_inner17h01423f49ab401ceaE(ptr noalias nocapture noundef writeonly sret(%"alloc::vec::Vec<u8>") align 8 dereferenceable(24) %_0, ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #11 {
+start:
+  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %_0, ptr noundef nonnull align 8 dereferenceable(24) %self, i64 24, i1 false)
+  ret void
+}
+
+; <reed_solomon_novelpoly::wrapped_shard::WrappedShard as core::convert::From<alloc::vec::Vec<u8>>>::from
+; Function Attrs: nonlazybind uwtable
+define void @"_ZN124_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..From$LT$alloc..vec..Vec$LT$u8$GT$$GT$$GT$4from17h20db296a8e5281a3E"(ptr noalias nocapture noundef writeonly sret(%"wrapped_shard::WrappedShard") align 8 dereferenceable(24) %_0, ptr noalias nocapture noundef align 8 dereferenceable(24) %data) unnamed_addr #0 personality ptr @rust_eh_personality {
+start:
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !63)
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !66)
+  %0 = getelementptr inbounds %"alloc::vec::Vec<u8>", ptr %data, i64 0, i32 1
+  %_3.i = load i64, ptr %0, align 8, !alias.scope !66, !noalias !63, !noundef !3
+  %_2.i = and i64 %_3.i, 1
+  %.not.i = icmp eq i64 %_2.i, 0
+  br i1 %.not.i, label %_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard3new17h113340e5cbc1f570E.exit, label %bb1.i
+
+bb1.i:                                            ; preds = %start
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !68)
+  %1 = getelementptr inbounds { ptr, i64 }, ptr %data, i64 0, i32 1
+  %2 = load i64, ptr %1, align 8, !alias.scope !71, !noalias !63, !noundef !3
+  %_3.i.i = icmp eq i64 %_3.i, %2
+  br i1 %_3.i.i, label %bb1.i.i, label %"_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb941c2cca04652f0E.exit.i"
+
+bb1.i.i:                                          ; preds = %bb1.i
+; invoke alloc::raw_vec::RawVec<T,A>::reserve_for_push
+  invoke fastcc void @"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h66a5e27c35238407E"(ptr noalias noundef nonnull align 8 dereferenceable(16) %data, i64 noundef %_3.i)
+          to label %.noexc.i unwind label %cleanup.i, !noalias !63
+
+.noexc.i:                                         ; preds = %bb1.i.i
+  %count.pre.i.i = load i64, ptr %0, align 8, !alias.scope !71, !noalias !63
+  br label %"_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb941c2cca04652f0E.exit.i"
+
+"_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb941c2cca04652f0E.exit.i": ; preds = %.noexc.i, %bb1.i
+  %count.i.i = phi i64 [ %count.pre.i.i, %.noexc.i ], [ %_3.i, %bb1.i ]
+  %self1.i.i = load ptr, ptr %data, align 8, !alias.scope !71, !noalias !63, !nonnull !3, !noundef !3
+  %end.i.i = getelementptr inbounds i8, ptr %self1.i.i, i64 %count.i.i
+  store i8 0, ptr %end.i.i, align 1, !noalias !72
+  %3 = add i64 %count.i.i, 1
+  store i64 %3, ptr %0, align 8, !alias.scope !71, !noalias !63
+  br label %_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard3new17h113340e5cbc1f570E.exit
+
+cleanup.i:                                        ; preds = %bb1.i.i
+  %4 = landingpad { ptr, i32 }
+          cleanup
+  %data.val.i = load ptr, ptr %data, align 8, !alias.scope !66, !noalias !63
+  %data.val1.i = load i64, ptr %1, align 8, !alias.scope !66, !noalias !63
+; call core::ptr::drop_in_place<alloc::vec::Vec<u8>>
+  tail call fastcc void @"_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17h01244c5b000d92deE"(ptr %data.val.i, i64 %data.val1.i) #26, !noalias !73
+  resume { ptr, i32 } %4
+
+_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard3new17h113340e5cbc1f570E.exit: ; preds = %start, %"_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb941c2cca04652f0E.exit.i"
+  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %_0, ptr noundef nonnull align 8 dereferenceable(24) %data, i64 24, i1 false), !alias.scope !73
+  ret void
+}
+
+; <reed_solomon_novelpoly::wrapped_shard::WrappedShard as core::convert::AsMut<[u8]>>::as_mut
+; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind willreturn memory(argmem: read) uwtable
+define { ptr, i64 } @"_ZN112_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsMut$LT$$u5b$u8$u5d$$GT$$GT$6as_mut17h9040ed54cdf1da03E"(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #10 {
+start:
+  %self1 = load ptr, ptr %self, align 8, !nonnull !3, !noundef !3
+  %0 = getelementptr inbounds %"alloc::vec::Vec<u8>", ptr %self, i64 0, i32 1
+  %len = load i64, ptr %0, align 8, !noundef !3
+  %1 = insertvalue { ptr, i64 } poison, ptr %self1, 0
+  %2 = insertvalue { ptr, i64 } %1, i64 %len, 1
+  ret { ptr, i64 } %2
+}
+
+; <reed_solomon_novelpoly::wrapped_shard::WrappedShard as core::convert::AsRef<[[u8; 2]]>>::as_ref
+; Function Attrs: nonlazybind uwtable
+define { ptr, i64 } @"_ZN133_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsRef$LT$$u5b$$u5b$u8$u3b$$u20$2$u5d$$u5d$$GT$$GT$6as_ref17h0744ecab546af373E"(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 personality ptr @rust_eh_personality {
+start:
+  %_8 = alloca %"core::option::Option<core::fmt::Arguments<'_>>", align 8
+  %_3 = alloca i64, align 8
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_3)
+  %0 = getelementptr inbounds %"alloc::vec::Vec<u8>", ptr %self, i64 0, i32 1
+  %_4 = load i64, ptr %0, align 8, !noundef !3
+  %1 = and i64 %_4, 1
+  store i64 %1, ptr %_3, align 8
+  %2 = icmp eq i64 %1, 0
+  br i1 %2, label %bb1, label %bb2
+
+bb1:                                              ; preds = %start
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_3)
+  %3 = icmp eq i64 %_4, 0
+  %self.val = load ptr, ptr %self, align 8, !nonnull !3
+  %len1 = lshr i64 %_4, 1
+  %_0.sroa.0.0 = select i1 %3, ptr @alloc_513570631223a12912d85da2bec3b15a, ptr %self.val
+  %4 = insertvalue { ptr, i64 } poison, ptr %_0.sroa.0.0, 0
+  %5 = insertvalue { ptr, i64 } %4, i64 %len1, 1
+  ret { ptr, i64 } %5
+
+bb2:                                              ; preds = %start
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_8)
+  store ptr null, ptr %_8, align 8
+; call core::panicking::assert_failed
+  call fastcc void @_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E(ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %_3, ptr noalias noundef nonnull readonly align 8 dereferenceable(8) @alloc_53973d2fe29b4adba8bb7390b5678745, ptr noalias nocapture noundef nonnull align 8 dereferenceable(48) %_8, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_b86467376db6421fc556c058f417d9a6) #25
+  unreachable
+}
+
+; <reed_solomon_novelpoly::wrapped_shard::WrappedShard as core::convert::AsMut<[[u8; 2]]>>::as_mut
+; Function Attrs: nonlazybind uwtable
+define { ptr, i64 } @"_ZN133_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsMut$LT$$u5b$$u5b$u8$u3b$$u20$2$u5d$$u5d$$GT$$GT$6as_mut17h0050005bc831c669E"(ptr noalias nocapture noundef readonly align 8 dereferenceable(24) %self) unnamed_addr #0 personality ptr @rust_eh_personality {
+start:
+  %_8 = alloca %"core::option::Option<core::fmt::Arguments<'_>>", align 8
+  %_5 = alloca i64, align 8
+  %0 = getelementptr inbounds %"alloc::vec::Vec<u8>", ptr %self, i64 0, i32 1
+  %len = load i64, ptr %0, align 8, !noundef !3
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_5)
+  %1 = and i64 %len, 1
+  store i64 %1, ptr %_5, align 8
+  %2 = icmp eq i64 %1, 0
+  br i1 %2, label %bb1, label %bb2
+
+bb1:                                              ; preds = %start
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_5)
+  %3 = icmp eq i64 %len, 0
+  %self.val = load ptr, ptr %self, align 8, !nonnull !3
+  %len12 = lshr i64 %len, 1
+  %_0.sroa.0.0 = select i1 %3, ptr @alloc_513570631223a12912d85da2bec3b15a, ptr %self.val
+  %4 = insertvalue { ptr, i64 } poison, ptr %_0.sroa.0.0, 0
+  %5 = insertvalue { ptr, i64 } %4, i64 %len12, 1
+  ret { ptr, i64 } %5
+
+bb2:                                              ; preds = %start
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_8)
+  store ptr null, ptr %_8, align 8
+; call core::panicking::assert_failed
+  call fastcc void @_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E(ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %_5, ptr noalias noundef nonnull readonly align 8 dereferenceable(8) @alloc_53973d2fe29b4adba8bb7390b5678745, ptr noalias nocapture noundef nonnull align 8 dereferenceable(48) %_8, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_0bd23fa426c9bc0dc8ebc33ecc08bd68) #25
+  unreachable
+}
+
+; <reed_solomon_novelpoly::errors::Error as core::fmt::Debug>::fmt
+; Function Attrs: nonlazybind uwtable
+define noundef zeroext i1 @"_ZN74_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h84ba04202c855280E"(ptr noalias noundef readonly align 8 dereferenceable(32) %self, ptr noalias noundef align 8 dereferenceable(64) %f) unnamed_addr #0 {
+start:
+  %__self_13 = alloca ptr, align 8
+  %__self_1 = alloca ptr, align 8
+  %__self_2 = alloca ptr, align 8
+  %__self_02 = alloca ptr, align 8
+  %__self_01 = alloca ptr, align 8
+  %__self_0 = alloca ptr, align 8
+  %_3 = load i64, ptr %self, align 8, !range !74, !noundef !3
+  switch i64 %_3, label %bb2 [
+    i64 0, label %bb3
+    i64 1, label %bb5
+    i64 2, label %bb7
+    i64 3, label %bb9
+    i64 4, label %bb10
+    i64 5, label %bb12
+    i64 6, label %bb1
+  ]
+
+bb2:                                              ; preds = %start
+  unreachable
+
+bb3:                                              ; preds = %start
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %__self_0)
+  %0 = getelementptr inbounds %"errors::Error::WantedShardCountTooHigh", ptr %self, i64 0, i32 1
+  store ptr %0, ptr %__self_0, align 8
+; call core::fmt::Formatter::debug_tuple_field1_finish
+  %1 = call noundef zeroext i1 @_ZN4core3fmt9Formatter25debug_tuple_field1_finish17h989fcf61d9a53692E(ptr noalias noundef nonnull align 8 dereferenceable(64) %f, ptr noalias noundef nonnull readonly align 1 @alloc_59c98faa38f9ae5541d0ff0bd840601c, i64 noundef 23, ptr noundef nonnull align 1 %__self_0, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.4)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %__self_0)
+  br label %bb15
+
+bb5:                                              ; preds = %start
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %__self_01)
+  %2 = getelementptr inbounds %"errors::Error::WantedShardCountTooLow", ptr %self, i64 0, i32 1
+  store ptr %2, ptr %__self_01, align 8
+; call core::fmt::Formatter::debug_tuple_field1_finish
+  %3 = call noundef zeroext i1 @_ZN4core3fmt9Formatter25debug_tuple_field1_finish17h989fcf61d9a53692E(ptr noalias noundef nonnull align 8 dereferenceable(64) %f, ptr noalias noundef nonnull readonly align 1 @alloc_04e002b9ce253569fb18ec28abd88d7b, i64 noundef 22, ptr noundef nonnull align 1 %__self_01, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.4)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %__self_01)
+  br label %bb15
+
+bb7:                                              ; preds = %start
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %__self_02)
+  %4 = getelementptr inbounds %"errors::Error::WantedPayloadShardCountTooLow", ptr %self, i64 0, i32 1
+  store ptr %4, ptr %__self_02, align 8
+; call core::fmt::Formatter::debug_tuple_field1_finish
+  %5 = call noundef zeroext i1 @_ZN4core3fmt9Formatter25debug_tuple_field1_finish17h989fcf61d9a53692E(ptr noalias noundef nonnull align 8 dereferenceable(64) %f, ptr noalias noundef nonnull readonly align 1 @alloc_0fb607e558499de3dd87735cb5fda174, i64 noundef 29, ptr noundef nonnull align 1 %__self_02, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.4)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %__self_02)
+  br label %bb15
+
+bb9:                                              ; preds = %start
+; call core::fmt::Formatter::write_str
+  %6 = tail call noundef zeroext i1 @_ZN4core3fmt9Formatter9write_str17hbd49080fe771c6c2E(ptr noalias noundef nonnull align 8 dereferenceable(64) %f, ptr noalias noundef nonnull readonly align 1 @alloc_546917b113142dfbb21c07d3be88197d, i64 noundef 17)
+  br label %bb15
+
+bb10:                                             ; preds = %start
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %__self_2)
+  %7 = getelementptr inbounds %"errors::Error::NeedMoreShards", ptr %self, i64 0, i32 3
+  store ptr %7, ptr %__self_2, align 8
+  %_23 = getelementptr inbounds %"errors::Error::NeedMoreShards", ptr %self, i64 0, i32 1
+  %_26 = getelementptr inbounds %"errors::Error::NeedMoreShards", ptr %self, i64 0, i32 2
+; call core::fmt::Formatter::debug_struct_field3_finish
+  %8 = call noundef zeroext i1 @_ZN4core3fmt9Formatter26debug_struct_field3_finish17hb6f6e1d1fccb9bb5E(ptr noalias noundef nonnull align 8 dereferenceable(64) %f, ptr noalias noundef nonnull readonly align 1 @alloc_6615aecf679b91f6ca2d1e1e60a68b42, i64 noundef 14, ptr noalias noundef nonnull readonly align 1 @alloc_6b17e6867e56a9d9db24ffe82fd83a15, i64 noundef 4, ptr noundef nonnull align 1 %_23, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.6, ptr noalias noundef nonnull readonly align 1 @alloc_e2daa29ca462c82251b78e1c93f7f411, i64 noundef 3, ptr noundef nonnull align 1 %_26, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.6, ptr noalias noundef nonnull readonly align 1 @alloc_e654b0a32953a2f5c7caa90c611494da, i64 noundef 3, ptr noundef nonnull align 1 %__self_2, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.4)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %__self_2)
+  br label %bb15
+
+bb12:                                             ; preds = %start
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %__self_1)
+  %9 = getelementptr inbounds %"errors::Error::ParamterMustBePowerOf2", ptr %self, i64 0, i32 2
+  store ptr %9, ptr %__self_1, align 8
+  %_35 = getelementptr inbounds %"errors::Error::ParamterMustBePowerOf2", ptr %self, i64 0, i32 1
+; call core::fmt::Formatter::debug_struct_field2_finish
+  %10 = call noundef zeroext i1 @_ZN4core3fmt9Formatter26debug_struct_field2_finish17h79e5a622e536f867E(ptr noalias noundef nonnull align 8 dereferenceable(64) %f, ptr noalias noundef nonnull readonly align 1 @alloc_8edfafbe3dee5f49838ac211bc06618d, i64 noundef 22, ptr noalias noundef nonnull readonly align 1 @alloc_e09e9ac7227dea4ed31edb4bbc3d6adf, i64 noundef 1, ptr noundef nonnull align 1 %_35, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.6, ptr noalias noundef nonnull readonly align 1 @alloc_3629cf37e45f4088c031426ac602bbb6, i64 noundef 1, ptr noundef nonnull align 1 %__self_1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.4)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %__self_1)
+  br label %bb15
+
+bb1:                                              ; preds = %start
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %__self_13)
+  %11 = getelementptr inbounds %"errors::Error::InconsistentShardLengths", ptr %self, i64 0, i32 2
+  store ptr %11, ptr %__self_13, align 8
+  %_44 = getelementptr inbounds %"errors::Error::InconsistentShardLengths", ptr %self, i64 0, i32 1
+; call core::fmt::Formatter::debug_struct_field2_finish
+  %12 = call noundef zeroext i1 @_ZN4core3fmt9Formatter26debug_struct_field2_finish17h79e5a622e536f867E(ptr noalias noundef nonnull align 8 dereferenceable(64) %f, ptr noalias noundef nonnull readonly align 1 @alloc_3efa03448d369fceaa6dac294733e091, i64 noundef 24, ptr noalias noundef nonnull readonly align 1 @alloc_4986dd618090c125bc3e853ec5468cc0, i64 noundef 5, ptr noundef nonnull align 1 %_44, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.6, ptr noalias noundef nonnull readonly align 1 @alloc_3eb2a1a5566a11839f0ac63c9931ad0f, i64 noundef 5, ptr noundef nonnull align 1 %__self_13, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.4)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %__self_13)
+  br label %bb15
+
+bb15:                                             ; preds = %bb1, %bb12, %bb10, %bb9, %bb7, %bb5, %bb3
+  %_0.0.in = phi i1 [ %12, %bb1 ], [ %10, %bb12 ], [ %8, %bb10 ], [ %6, %bb9 ], [ %5, %bb7 ], [ %3, %bb5 ], [ %1, %bb3 ]
+  ret i1 %_0.0.in
+}
+
+; <reed_solomon_novelpoly::errors::Error as core::fmt::Display>::fmt
+; Function Attrs: nonlazybind uwtable
+define noundef zeroext i1 @"_ZN76_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Display$GT$3fmt17h2f820e35657afb59E"(ptr noalias noundef readonly align 8 dereferenceable(32) %self, ptr noalias noundef align 8 dereferenceable(64) %__formatter) unnamed_addr #0 {
+start:
+  %_84 = alloca ptr, align 8
+  %_80 = alloca ptr, align 8
+  %_77 = alloca [2 x { ptr, ptr }], align 8
+  %_73 = alloca %"core::fmt::Arguments<'_>", align 8
+  %_69 = alloca ptr, align 8
+  %_65 = alloca ptr, align 8
+  %_62 = alloca [2 x { ptr, ptr }], align 8
+  %_58 = alloca %"core::fmt::Arguments<'_>", align 8
+  %_54 = alloca ptr, align 8
+  %_50 = alloca ptr, align 8
+  %_46 = alloca ptr, align 8
+  %_43 = alloca [3 x { ptr, ptr }], align 8
+  %_39 = alloca %"core::fmt::Arguments<'_>", align 8
+  %_34 = alloca %"core::fmt::Arguments<'_>", align 8
+  %_32 = alloca ptr, align 8
+  %_29 = alloca [1 x { ptr, ptr }], align 8
+  %_25 = alloca %"core::fmt::Arguments<'_>", align 8
+  %_22 = alloca ptr, align 8
+  %_19 = alloca [1 x { ptr, ptr }], align 8
+  %_15 = alloca %"core::fmt::Arguments<'_>", align 8
+  %_12 = alloca ptr, align 8
+  %_9 = alloca [1 x { ptr, ptr }], align 8
+  %_5 = alloca %"core::fmt::Arguments<'_>", align 8
+  %_3 = load i64, ptr %self, align 8, !range !74, !noundef !3
+  switch i64 %_3, label %bb2 [
+    i64 0, label %bb3
+    i64 1, label %bb6
+    i64 2, label %bb9
+    i64 3, label %bb12
+    i64 4, label %bb14
+    i64 5, label %bb17
+    i64 6, label %bb1
+  ]
+
+bb2:                                              ; preds = %start
+  unreachable
+
+bb3:                                              ; preds = %start
+  %0 = getelementptr inbounds %"errors::Error::WantedShardCountTooHigh", ptr %self, i64 0, i32 1
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_5)
+  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %_9)
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_12)
+  store ptr %0, ptr %_12, align 8
+  store ptr %_12, ptr %_9, align 8
+  %1 = getelementptr inbounds { ptr, ptr }, ptr %_9, i64 0, i32 1
+  store ptr @"_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E", ptr %1, align 8
+  store ptr @alloc_d3143b57ec0541b3fe44f74c05c63238, ptr %_5, align 8, !alias.scope !75, !noalias !78
+  %2 = getelementptr inbounds { ptr, i64 }, ptr %_5, i64 0, i32 1
+  store i64 2, ptr %2, align 8, !alias.scope !75, !noalias !78
+  %3 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_5, i64 0, i32 2
+  store ptr null, ptr %3, align 8, !alias.scope !75, !noalias !78
+  %4 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_5, i64 0, i32 1
+  store ptr %_9, ptr %4, align 8, !alias.scope !75, !noalias !78
+  %5 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_5, i64 0, i32 1, i32 1
+  store i64 1, ptr %5, align 8, !alias.scope !75, !noalias !78
+; call core::fmt::Formatter::write_fmt
+  %6 = call noundef zeroext i1 @_ZN4core3fmt9Formatter9write_fmt17hf01228dccc6fed43E(ptr noalias noundef nonnull align 8 dereferenceable(64) %__formatter, ptr noalias nocapture noundef nonnull align 8 dereferenceable(48) %_5)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_12)
+  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %_9)
+  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %_5)
+  br label %bb22
+
+bb6:                                              ; preds = %start
+  %7 = getelementptr inbounds %"errors::Error::WantedShardCountTooLow", ptr %self, i64 0, i32 1
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_15)
+  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %_19)
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_22)
+  store ptr %7, ptr %_22, align 8
+  store ptr %_22, ptr %_19, align 8
+  %8 = getelementptr inbounds { ptr, ptr }, ptr %_19, i64 0, i32 1
+  store ptr @"_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E", ptr %8, align 8
+  store ptr @alloc_4ab960860fe3cc837e93eb2a799c64c6, ptr %_15, align 8, !alias.scope !81, !noalias !84
+  %9 = getelementptr inbounds { ptr, i64 }, ptr %_15, i64 0, i32 1
+  store i64 1, ptr %9, align 8, !alias.scope !81, !noalias !84
+  %10 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_15, i64 0, i32 2
+  store ptr null, ptr %10, align 8, !alias.scope !81, !noalias !84
+  %11 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_15, i64 0, i32 1
+  store ptr %_19, ptr %11, align 8, !alias.scope !81, !noalias !84
+  %12 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_15, i64 0, i32 1, i32 1
+  store i64 1, ptr %12, align 8, !alias.scope !81, !noalias !84
+; call core::fmt::Formatter::write_fmt
+  %13 = call noundef zeroext i1 @_ZN4core3fmt9Formatter9write_fmt17hf01228dccc6fed43E(ptr noalias noundef nonnull align 8 dereferenceable(64) %__formatter, ptr noalias nocapture noundef nonnull align 8 dereferenceable(48) %_15)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_22)
+  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %_19)
+  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %_15)
+  br label %bb22
+
+bb9:                                              ; preds = %start
+  %14 = getelementptr inbounds %"errors::Error::WantedPayloadShardCountTooLow", ptr %self, i64 0, i32 1
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_25)
+  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %_29)
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_32)
+  store ptr %14, ptr %_32, align 8
+  store ptr %_32, ptr %_29, align 8
+  %15 = getelementptr inbounds { ptr, ptr }, ptr %_29, i64 0, i32 1
+  store ptr @"_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E", ptr %15, align 8
+  store ptr @alloc_e3e6ae743b3f3996f407a9eb01b42730, ptr %_25, align 8, !alias.scope !87, !noalias !90
+  %16 = getelementptr inbounds { ptr, i64 }, ptr %_25, i64 0, i32 1
+  store i64 1, ptr %16, align 8, !alias.scope !87, !noalias !90
+  %17 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_25, i64 0, i32 2
+  store ptr null, ptr %17, align 8, !alias.scope !87, !noalias !90
+  %18 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_25, i64 0, i32 1
+  store ptr %_29, ptr %18, align 8, !alias.scope !87, !noalias !90
+  %19 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_25, i64 0, i32 1, i32 1
+  store i64 1, ptr %19, align 8, !alias.scope !87, !noalias !90
+; call core::fmt::Formatter::write_fmt
+  %20 = call noundef zeroext i1 @_ZN4core3fmt9Formatter9write_fmt17hf01228dccc6fed43E(ptr noalias noundef nonnull align 8 dereferenceable(64) %__formatter, ptr noalias nocapture noundef nonnull align 8 dereferenceable(48) %_25)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_32)
+  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %_29)
+  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %_25)
+  br label %bb22
+
+bb12:                                             ; preds = %start
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_34)
+  store ptr @alloc_8676b8f2c8e3f1d77447888cd9708d40, ptr %_34, align 8
+  %21 = getelementptr inbounds { ptr, i64 }, ptr %_34, i64 0, i32 1
+  store i64 1, ptr %21, align 8
+  %22 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_34, i64 0, i32 2
+  store ptr null, ptr %22, align 8
+  %23 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_34, i64 0, i32 1
+  store ptr @alloc_513570631223a12912d85da2bec3b15a, ptr %23, align 8
+  %24 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_34, i64 0, i32 1, i32 1
+  store i64 0, ptr %24, align 8
+; call core::fmt::Formatter::write_fmt
+  %25 = call noundef zeroext i1 @_ZN4core3fmt9Formatter9write_fmt17hf01228dccc6fed43E(ptr noalias noundef nonnull align 8 dereferenceable(64) %__formatter, ptr noalias nocapture noundef nonnull align 8 dereferenceable(48) %_34)
+  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %_34)
+  br label %bb22
+
+bb14:                                             ; preds = %start
+  %26 = getelementptr inbounds %"errors::Error::NeedMoreShards", ptr %self, i64 0, i32 1
+  %27 = getelementptr inbounds %"errors::Error::NeedMoreShards", ptr %self, i64 0, i32 2
+  %28 = getelementptr inbounds %"errors::Error::NeedMoreShards", ptr %self, i64 0, i32 3
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_39)
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_43)
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_46)
+  store ptr %27, ptr %_46, align 8
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_50)
+  store ptr %28, ptr %_50, align 8
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_54)
+  store ptr %26, ptr %_54, align 8
+  store ptr %_46, ptr %_43, align 8
+  %29 = getelementptr inbounds { ptr, ptr }, ptr %_43, i64 0, i32 1
+  store ptr @"_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E", ptr %29, align 8
+  %30 = getelementptr inbounds [3 x { ptr, ptr }], ptr %_43, i64 0, i64 1
+  store ptr %_50, ptr %30, align 8
+  %31 = getelementptr inbounds [3 x { ptr, ptr }], ptr %_43, i64 0, i64 1, i32 1
+  store ptr @"_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E", ptr %31, align 8
+  %32 = getelementptr inbounds [3 x { ptr, ptr }], ptr %_43, i64 0, i64 2
+  store ptr %_54, ptr %32, align 8
+  %33 = getelementptr inbounds [3 x { ptr, ptr }], ptr %_43, i64 0, i64 2, i32 1
+  store ptr @"_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E", ptr %33, align 8
+  store ptr @alloc_b2919af1863dfb7a75a14afa0ba77f01, ptr %_39, align 8, !alias.scope !93, !noalias !96
+  %34 = getelementptr inbounds { ptr, i64 }, ptr %_39, i64 0, i32 1
+  store i64 3, ptr %34, align 8, !alias.scope !93, !noalias !96
+  %35 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_39, i64 0, i32 2
+  store ptr null, ptr %35, align 8, !alias.scope !93, !noalias !96
+  %36 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_39, i64 0, i32 1
+  store ptr %_43, ptr %36, align 8, !alias.scope !93, !noalias !96
+  %37 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_39, i64 0, i32 1, i32 1
+  store i64 3, ptr %37, align 8, !alias.scope !93, !noalias !96
+; call core::fmt::Formatter::write_fmt
+  %38 = call noundef zeroext i1 @_ZN4core3fmt9Formatter9write_fmt17hf01228dccc6fed43E(ptr noalias noundef nonnull align 8 dereferenceable(64) %__formatter, ptr noalias nocapture noundef nonnull align 8 dereferenceable(48) %_39)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_54)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_50)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_46)
+  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %_43)
+  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %_39)
+  br label %bb22
+
+bb17:                                             ; preds = %start
+  %39 = getelementptr inbounds %"errors::Error::ParamterMustBePowerOf2", ptr %self, i64 0, i32 1
+  %40 = getelementptr inbounds %"errors::Error::ParamterMustBePowerOf2", ptr %self, i64 0, i32 2
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_58)
+  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %_62)
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_65)
+  store ptr %39, ptr %_65, align 8
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_69)
+  store ptr %40, ptr %_69, align 8
+  store ptr %_65, ptr %_62, align 8
+  %41 = getelementptr inbounds { ptr, ptr }, ptr %_62, i64 0, i32 1
+  store ptr @"_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E", ptr %41, align 8
+  %42 = getelementptr inbounds [2 x { ptr, ptr }], ptr %_62, i64 0, i64 1
+  store ptr %_69, ptr %42, align 8
+  %43 = getelementptr inbounds [2 x { ptr, ptr }], ptr %_62, i64 0, i64 1, i32 1
+  store ptr @"_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E", ptr %43, align 8
+  store ptr @alloc_e3bea075e5e4ccda95b98b8fda32d7e8, ptr %_58, align 8, !alias.scope !99, !noalias !102
+  %44 = getelementptr inbounds { ptr, i64 }, ptr %_58, i64 0, i32 1
+  store i64 3, ptr %44, align 8, !alias.scope !99, !noalias !102
+  %45 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_58, i64 0, i32 2
+  store ptr null, ptr %45, align 8, !alias.scope !99, !noalias !102
+  %46 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_58, i64 0, i32 1
+  store ptr %_62, ptr %46, align 8, !alias.scope !99, !noalias !102
+  %47 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_58, i64 0, i32 1, i32 1
+  store i64 2, ptr %47, align 8, !alias.scope !99, !noalias !102
+; call core::fmt::Formatter::write_fmt
+  %48 = call noundef zeroext i1 @_ZN4core3fmt9Formatter9write_fmt17hf01228dccc6fed43E(ptr noalias noundef nonnull align 8 dereferenceable(64) %__formatter, ptr noalias nocapture noundef nonnull align 8 dereferenceable(48) %_58)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_69)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_65)
+  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %_62)
+  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %_58)
+  br label %bb22
+
+bb1:                                              ; preds = %start
+  %49 = getelementptr inbounds %"errors::Error::InconsistentShardLengths", ptr %self, i64 0, i32 1
+  %50 = getelementptr inbounds %"errors::Error::InconsistentShardLengths", ptr %self, i64 0, i32 2
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_73)
+  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %_77)
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_80)
+  store ptr %49, ptr %_80, align 8
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_84)
+  store ptr %50, ptr %_84, align 8
+  store ptr %_80, ptr %_77, align 8
+  %51 = getelementptr inbounds { ptr, ptr }, ptr %_77, i64 0, i32 1
+  store ptr @"_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E", ptr %51, align 8
+  %52 = getelementptr inbounds [2 x { ptr, ptr }], ptr %_77, i64 0, i64 1
+  store ptr %_84, ptr %52, align 8
+  %53 = getelementptr inbounds [2 x { ptr, ptr }], ptr %_77, i64 0, i64 1, i32 1
+  store ptr @"_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E", ptr %53, align 8
+  store ptr @alloc_0a40c07aae6f7eb2b694d5c90bed315a, ptr %_73, align 8, !alias.scope !105, !noalias !108
+  %54 = getelementptr inbounds { ptr, i64 }, ptr %_73, i64 0, i32 1
+  store i64 3, ptr %54, align 8, !alias.scope !105, !noalias !108
+  %55 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_73, i64 0, i32 2
+  store ptr null, ptr %55, align 8, !alias.scope !105, !noalias !108
+  %56 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_73, i64 0, i32 1
+  store ptr %_77, ptr %56, align 8, !alias.scope !105, !noalias !108
+  %57 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_73, i64 0, i32 1, i32 1
+  store i64 2, ptr %57, align 8, !alias.scope !105, !noalias !108
+; call core::fmt::Formatter::write_fmt
+  %58 = call noundef zeroext i1 @_ZN4core3fmt9Formatter9write_fmt17hf01228dccc6fed43E(ptr noalias noundef nonnull align 8 dereferenceable(64) %__formatter, ptr noalias nocapture noundef nonnull align 8 dereferenceable(48) %_73)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_84)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_80)
+  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %_77)
+  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %_73)
+  br label %bb22
+
+bb22:                                             ; preds = %bb1, %bb17, %bb14, %bb12, %bb9, %bb6, %bb3
+  %_0.0.in = phi i1 [ %58, %bb1 ], [ %48, %bb17 ], [ %38, %bb14 ], [ %25, %bb12 ], [ %20, %bb9 ], [ %13, %bb6 ], [ %6, %bb3 ]
+  ret i1 %_0.0.in
+}
+
+; <reed_solomon_novelpoly::field::f2e16::Additive as core::convert::AsRef<u16>>::as_ref
+; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind willreturn memory(none) uwtable
+define noundef nonnull align 2 dereferenceable(2) ptr @"_ZN98_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..convert..AsRef$LT$u16$GT$$GT$6as_ref17haea985d7dfdc7de7E"(ptr noalias noundef readonly returned align 2 dereferenceable(2) %self) unnamed_addr #9 {
+start:
+  ret ptr %self
+}
+
+; reed_solomon_novelpoly::field::f2e16::Additive::zero
+; Function Attrs: mustprogress nofree norecurse nosync nounwind nonlazybind willreturn memory(none) uwtable
+define noundef i16 @_ZN22reed_solomon_novelpoly5field5f2e168Additive4zero17hd4693db82aebf02cE() unnamed_addr #9 {
+start:
+  ret i16 0
+}
+
+; <reed_solomon_novelpoly::field::f2e16::Multiplier as core::fmt::Display>::fmt
+; Function Attrs: nonlazybind uwtable
+define noundef zeroext i1 @"_ZN87_$LT$reed_solomon_novelpoly..field..f2e16..Multiplier$u20$as$u20$core..fmt..Display$GT$3fmt17h84df00de1653589cE"(ptr noalias noundef readonly align 2 dereferenceable(2) %self, ptr noalias noundef align 8 dereferenceable(64) %f) unnamed_addr #0 {
+start:
+  %_12 = alloca [1 x %"core::fmt::rt::Placeholder"], align 8
+  %_7 = alloca [1 x { ptr, ptr }], align 8
+  %_3 = alloca %"core::fmt::Arguments<'_>", align 8
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_3)
+  call void @llvm.lifetime.start.p0(i64 16, ptr nonnull %_7)
+  store ptr %self, ptr %_7, align 8
+  %0 = getelementptr inbounds { ptr, ptr }, ptr %_7, i64 0, i32 1
+  store ptr @"_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17h3e388c420aea3b33E", ptr %0, align 8
+  call void @llvm.lifetime.start.p0(i64 56, ptr nonnull %_12)
+  store i64 2, ptr %_12, align 8
+  %_13.sroa.5.0..sroa_idx = getelementptr inbounds i8, ptr %_12, i64 16
+  store i64 0, ptr %_13.sroa.5.0..sroa_idx, align 8
+  %_13.sroa.6.0..sroa_idx = getelementptr inbounds i8, ptr %_12, i64 24
+  store i64 4, ptr %_13.sroa.6.0..sroa_idx, align 8
+  %_13.sroa.7.0..sroa_idx = getelementptr inbounds i8, ptr %_12, i64 32
+  store i64 0, ptr %_13.sroa.7.0..sroa_idx, align 8
+  %_13.sroa.8.0..sroa_idx = getelementptr inbounds i8, ptr %_12, i64 40
+  store i32 32, ptr %_13.sroa.8.0..sroa_idx, align 8
+  %_13.sroa.9.0..sroa_idx = getelementptr inbounds i8, ptr %_12, i64 44
+  store i32 8, ptr %_13.sroa.9.0..sroa_idx, align 4
+  %_13.sroa.10.0..sroa_idx = getelementptr inbounds i8, ptr %_12, i64 48
+  store i8 3, ptr %_13.sroa.10.0..sroa_idx, align 8
+  store ptr @alloc_03d1f09ad8d01e9be6c783127cb2a21b, ptr %_3, align 8
+  %1 = getelementptr inbounds { ptr, i64 }, ptr %_3, i64 0, i32 1
+  store i64 1, ptr %1, align 8
+  %2 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_3, i64 0, i32 2
+  store ptr %_12, ptr %2, align 8
+  %3 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_3, i64 0, i32 2, i32 1
+  store i64 1, ptr %3, align 8
+  %4 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_3, i64 0, i32 1
+  store ptr %_7, ptr %4, align 8
+  %5 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_3, i64 0, i32 1, i32 1
+  store i64 1, ptr %5, align 8
+; call core::fmt::Formatter::write_fmt
+  %_0 = call noundef zeroext i1 @_ZN4core3fmt9Formatter9write_fmt17hf01228dccc6fed43E(ptr noalias noundef nonnull align 8 dereferenceable(64) %f, ptr noalias nocapture noundef nonnull align 8 dereferenceable(48) %_3)
+  call void @llvm.lifetime.end.p0(i64 48, ptr nonnull %_3)
+  call void @llvm.lifetime.end.p0(i64 56, ptr nonnull %_12)
+  call void @llvm.lifetime.end.p0(i64 16, ptr nonnull %_7)
+  ret i1 %_0
+}
+
+; reed_solomon_novelpoly::field::f2e16::walsh_plain
+; Function Attrs: nonlazybind uwtable
+define void @_ZN22reed_solomon_novelpoly5field5f2e1611walsh_plain17h7770fb0b24f1eac3E(ptr noalias nocapture noundef nonnull align 2 %data.0, i64 noundef %data.1, i64 noundef %size) unnamed_addr #0 {
+start:
+  %_430 = icmp ugt i64 %size, 1
+  br i1 %_430, label %bb3.preheader, label %bb15
+
+bb3.preheader:                                    ; preds = %start, %bb14
+  %depart_no.031 = phi i64 [ %_56, %bb14 ], [ 1, %start ]
+  %_56 = shl i64 %depart_no.031, 1
+  %0 = shl i64 %depart_no.031, 2
+  %1 = mul i64 %depart_no.031, -2
+  %2 = add i64 %depart_no.031, -1
+  %3 = add i64 %_56, 2
+  %4 = mul i64 %depart_no.031, -2
+  br label %bb5.preheader
+
+bb15:                                             ; preds = %bb14, %start
+  ret void
+
+bb5.preheader:                                    ; preds = %bb3.preheader, %bb13
+  %indvar = phi i64 [ 0, %bb3.preheader ], [ %indvar.next, %bb13 ]
+  %indvars.iv = phi i64 [ %depart_no.031, %bb3.preheader ], [ %indvars.iv.next, %bb13 ]
+  %j.029 = phi i64 [ 0, %bb3.preheader ], [ %38, %bb13 ]
+  %umax48 = tail call i64 @llvm.umax.i64(i64 %data.1, i64 %indvars.iv)
+  %5 = mul i64 %4, %indvar
+  %6 = sub i64 %5, %depart_no.031
+  %7 = add i64 %umax48, %6
+  %umax49 = tail call i64 @llvm.umax.i64(i64 %data.1, i64 %j.029)
+  %8 = add i64 %umax49, %5
+  %umin50 = tail call i64 @llvm.umin.i64(i64 %7, i64 %8)
+  %umin51 = tail call i64 @llvm.umin.i64(i64 %umin50, i64 %2)
+  %9 = add i64 %umin51, 1
+  %10 = mul i64 %0, %indvar
+  %scevgep = getelementptr i8, ptr %data.0, i64 %10
+  %11 = or i64 %10, 2
+  %scevgep41 = getelementptr i8, ptr %data.0, i64 %11
+  %umax = tail call i64 @llvm.umax.i64(i64 %data.1, i64 %indvars.iv)
+  %12 = mul i64 %1, %indvar
+  %13 = sub i64 %12, %depart_no.031
+  %14 = add i64 %umax, %13
+  %umax42 = tail call i64 @llvm.umax.i64(i64 %data.1, i64 %j.029)
+  %15 = add i64 %umax42, %12
+  %umin = tail call i64 @llvm.umin.i64(i64 %14, i64 %15)
+  %umin43 = tail call i64 @llvm.umin.i64(i64 %umin, i64 %2)
+  %16 = shl i64 %umin43, 1
+  %scevgep44 = getelementptr i8, ptr %scevgep41, i64 %16
+  %17 = add i64 %_56, %10
+  %scevgep45 = getelementptr i8, ptr %data.0, i64 %17
+  %18 = add i64 %3, %10
+  %scevgep46 = getelementptr i8, ptr %data.0, i64 %18
+  %scevgep47 = getelementptr i8, ptr %scevgep46, i64 %16
+  %_12 = add i64 %j.029, %depart_no.031
+  %_1027 = icmp ult i64 %j.029, %_12
+  br i1 %_1027, label %bb6.preheader, label %bb13
+
+bb6.preheader:                                    ; preds = %bb5.preheader
+  %min.iters.check = icmp ult i64 %9, 9
+  br i1 %min.iters.check, label %bb6.preheader53, label %vector.memcheck
+
+bb6.preheader53:                                  ; preds = %vector.body, %vector.memcheck, %bb6.preheader
+  %i.028.ph = phi i64 [ %j.029, %vector.memcheck ], [ %j.029, %bb6.preheader ], [ %ind.end, %vector.body ]
+  br label %bb6
+
+vector.memcheck:                                  ; preds = %bb6.preheader
+  %bound0 = icmp ult ptr %scevgep, %scevgep47
+  %bound1 = icmp ult ptr %scevgep45, %scevgep44
+  %found.conflict = and i1 %bound0, %bound1
+  br i1 %found.conflict, label %bb6.preheader53, label %vector.ph
+
+vector.ph:                                        ; preds = %vector.memcheck
+  %n.mod.vf = and i64 %9, 7
+  %19 = icmp eq i64 %n.mod.vf, 0
+  %20 = select i1 %19, i64 8, i64 %n.mod.vf
+  %n.vec = sub i64 %9, %20
+  %ind.end = add i64 %j.029, %n.vec
+  br label %vector.body
+
+vector.body:                                      ; preds = %vector.body, %vector.ph
+  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
+  %21 = phi i64 [ %j.029, %vector.ph ], [ %36, %vector.body ]
+  %offset.idx = add i64 %j.029, %index
+  %22 = getelementptr inbounds [0 x i16], ptr %data.0, i64 0, i64 %offset.idx
+  %wide.load = load <8 x i16>, ptr %22, align 2, !alias.scope !111, !noalias !114
+  %23 = zext <8 x i16> %wide.load to <8 x i32>
+  %24 = add nuw nsw <8 x i32> %23, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
+  %25 = add i64 %21, %depart_no.031
+  %26 = getelementptr inbounds [0 x i16], ptr %data.0, i64 0, i64 %25
+  %wide.load52 = load <8 x i16>, ptr %26, align 2, !alias.scope !114
+  %27 = zext <8 x i16> %wide.load52 to <8 x i32>
+  %28 = sub nuw nsw <8 x i32> %24, %27
+  %29 = add nuw nsw <8 x i32> %27, %23
+  %30 = lshr <8 x i32> %29, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
+  %31 = add nuw nsw <8 x i32> %30, %29
+  %32 = trunc <8 x i32> %31 to <8 x i16>
+  store <8 x i16> %32, ptr %22, align 2, !alias.scope !111, !noalias !114
+  %33 = lshr <8 x i32> %28, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
+  %34 = add nuw nsw <8 x i32> %33, %28
+  %35 = trunc <8 x i32> %34 to <8 x i16>
+  store <8 x i16> %35, ptr %26, align 2, !alias.scope !114
+  %index.next = add nuw i64 %index, 8
+  %36 = add i64 %21, 8
+  %37 = icmp eq i64 %index.next, %n.vec
+  br i1 %37, label %bb6.preheader53, label %vector.body, !llvm.loop !116
+
+bb14:                                             ; preds = %bb13
+  %_4 = icmp ult i64 %_56, %size
+  br i1 %_4, label %bb3.preheader, label %bb15
+
+bb13:                                             ; preds = %bb8, %bb5.preheader
+  %38 = add i64 %j.029, %_56
+  %_7 = icmp ult i64 %38, %size
+  %indvars.iv.next = add i64 %indvars.iv, %_56
+  %indvar.next = add i64 %indvar, 1
+  br i1 %_7, label %bb5.preheader, label %bb14
+
+bb6:                                              ; preds = %bb6.preheader53, %bb8
+  %i.028 = phi i64 [ %41, %bb8 ], [ %i.028.ph, %bb6.preheader53 ]
+  %_20 = icmp ult i64 %i.028, %data.1
+  br i1 %_20, label %bb7, label %panic, !prof !119
+
+bb7:                                              ; preds = %bb6
+  %_22 = add i64 %i.028, %depart_no.031
+  %_26 = icmp ult i64 %_22, %data.1
+  br i1 %_26, label %bb8, label %panic1, !prof !119
+
+panic:                                            ; preds = %bb6
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %i.028, i64 noundef %data.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_f835a666fb2fb9eb6998cab602faabdd) #25
+  unreachable
+
+bb8:                                              ; preds = %bb7
+  %39 = getelementptr inbounds [0 x i16], ptr %data.0, i64 0, i64 %i.028
+  %self = load i16, ptr %39, align 2, !noundef !3
+  %_17 = zext i16 %self to i32
+  %_16 = add nuw nsw i32 %_17, 65535
+  %40 = getelementptr inbounds [0 x i16], ptr %data.0, i64 0, i64 %_22
+  %self2 = load i16, ptr %40, align 2, !noundef !3
+  %_21 = zext i16 %self2 to i32
+  %tmp2 = sub nuw nsw i32 %_16, %_21
+  %tmp1 = add nuw nsw i32 %_21, %_17
+  %_42 = lshr i32 %tmp1, 16
+  %_40 = add nuw nsw i32 %_42, %tmp1
+  %_39 = trunc i32 %_40 to i16
+  store i16 %_39, ptr %39, align 2
+  %_50 = lshr i32 %tmp2, 16
+  %_48 = add nuw nsw i32 %_50, %tmp2
+  %_47 = trunc i32 %_48 to i16
+  store i16 %_47, ptr %40, align 2
+  %41 = add nuw i64 %i.028, 1
+  %exitcond.not = icmp eq i64 %41, %indvars.iv
+  br i1 %exitcond.not, label %bb13, label %bb6, !llvm.loop !120
+
+panic1:                                           ; preds = %bb7
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %_22, i64 noundef %data.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_1db96d5b1a328d476c67fbf01169719e) #25
+  unreachable
+}
+
+; reed_solomon_novelpoly::field::f2e16::formal_derivative
+; Function Attrs: nonlazybind uwtable
+define void @_ZN22reed_solomon_novelpoly5field5f2e1617formal_derivative17hd0977a8b62f3cbd2E(ptr noalias nocapture noundef nonnull align 2 %cos.0, i64 noundef %cos.1, i64 noundef %size) unnamed_addr #0 {
+start:
+  %_4554 = icmp ugt i64 %size, 1
+  br i1 %_4554, label %bb2, label %bb10.preheader
+
+bb1.loopexit:                                     ; preds = %bb9, %bb2
+  %exitcond67.not = icmp eq i64 %_0.i, %size
+  br i1 %exitcond67.not, label %bb10.preheader, label %bb2
+
+bb10.preheader:                                   ; preds = %bb1.loopexit, %start
+  %invariant.umin = tail call i64 @llvm.umin.i64(i64 %cos.1, i64 65536)
+  %or.cond61 = icmp ugt i64 %invariant.umin, %size
+  br i1 %or.cond61, label %bb13.preheader.lr.ph, label %bb20
+
+bb13.preheader.lr.ph:                             ; preds = %bb10.preheader
+  %_7157.not = icmp eq i64 %size, 0
+  br i1 %_7157.not, label %bb13.preheader, label %bb13.preheader.us
+
+bb13.preheader.us:                                ; preds = %bb13.preheader.lr.ph, %bb13.bb15_crit_edge.us
+  %i.062.us = phi i64 [ %2, %bb13.bb15_crit_edge.us ], [ %size, %bb13.preheader.lr.ph ]
+  br label %bb14.us
+
+bb14.us:                                          ; preds = %bb13.preheader.us, %bb17.us
+  %iter6.sroa.0.058.us = phi i64 [ 0, %bb13.preheader.us ], [ %_0.i31.us, %bb17.us ]
+  %_0.i31.us = add nuw i64 %iter6.sroa.0.058.us, 1
+  %exitcond68.not = icmp eq i64 %iter6.sroa.0.058.us, %cos.1
+  br i1 %exitcond68.not, label %panic, label %bb16.us, !prof !59
+
+bb16.us:                                          ; preds = %bb14.us
+  %self11.us = getelementptr inbounds [0 x i16], ptr %cos.0, i64 0, i64 %iter6.sroa.0.058.us
+  %index.us = add i64 %iter6.sroa.0.058.us, %i.062.us
+  %_78.not.us = icmp ult i64 %index.us, %cos.1
+  br i1 %_78.not.us, label %bb45.us, label %bb17.us
+
+bb45.us:                                          ; preds = %bb16.us
+  %_81.us = getelementptr inbounds i16, ptr %cos.0, i64 %index.us
+  %v.us = load i16, ptr %_81.us, align 2, !noundef !3
+  br label %bb17.us
+
+bb17.us:                                          ; preds = %bb45.us, %bb16.us
+  %.self7.sroa.5.2.us = phi i16 [ 0, %bb16.us ], [ %v.us, %bb45.us ]
+  %0 = load i16, ptr %self11.us, align 2, !noundef !3
+  %1 = xor i16 %0, %.self7.sroa.5.2.us
+  store i16 %1, ptr %self11.us, align 2
+  %exitcond69.not = icmp eq i64 %_0.i31.us, %size
+  br i1 %exitcond69.not, label %bb13.bb15_crit_edge.us, label %bb14.us
+
+bb13.bb15_crit_edge.us:                           ; preds = %bb17.us
+  %2 = shl nuw nsw i64 %i.062.us, 1
+  %or.cond.us = icmp ult i64 %2, %invariant.umin
+  br i1 %or.cond.us, label %bb13.preheader.us, label %bb20
+
+bb2:                                              ; preds = %start, %bb1.loopexit
+  %iter.sroa.0.056 = phi i64 [ %_0.i, %bb1.loopexit ], [ 1, %start ]
+  %_0.i = add nuw i64 %iter.sroa.0.056, 1
+  %_12 = add i64 %iter.sroa.0.056, -1
+  %_11 = xor i64 %_12, %iter.sroa.0.056
+  %_10 = add i64 %_11, 1
+  %length = lshr exact i64 %_10, 1
+  %_14 = sub i64 %iter.sroa.0.056, %length
+  %_5251 = icmp ult i64 %_14, %iter.sroa.0.056
+  br i1 %_5251, label %bb6, label %bb1.loopexit
+
+bb13.preheader:                                   ; preds = %bb13.preheader.lr.ph, %bb13.preheader
+  br label %bb13.preheader
+
+bb20:                                             ; preds = %bb13.bb15_crit_edge.us, %bb10.preheader
+  ret void
+
+panic:                                            ; preds = %bb14.us
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %cos.1, i64 noundef %cos.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_ecc59e7dc869fb361f705f461689af87) #25
+  unreachable
+
+bb6:                                              ; preds = %bb2, %bb9
+  %iter2.sroa.0.053 = phi i64 [ %_0.i32, %bb9 ], [ %_14, %bb2 ]
+  %_0.i32 = add i64 %iter2.sroa.0.053, 1
+  %_22 = icmp ult i64 %iter2.sroa.0.053, %cos.1
+  br i1 %_22, label %bb8, label %panic15, !prof !119
+
+bb8:                                              ; preds = %bb6
+  %self16 = getelementptr inbounds [0 x i16], ptr %cos.0, i64 0, i64 %iter2.sroa.0.053
+  %index17 = add i64 %iter2.sroa.0.053, %length
+  %_59.not = icmp ult i64 %index17, %cos.1
+  br i1 %_59.not, label %bb33, label %bb9
+
+panic15:                                          ; preds = %bb6
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %iter2.sroa.0.053, i64 noundef %cos.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_86a600d7da35dcf067baec31a68b790d) #25
+  unreachable
+
+bb33:                                             ; preds = %bb8
+  %_62 = getelementptr inbounds i16, ptr %cos.0, i64 %index17
+  %v18 = load i16, ptr %_62, align 2, !noundef !3
+  br label %bb9
+
+bb9:                                              ; preds = %bb8, %bb33
+  %.self3.sroa.5.2 = phi i16 [ 0, %bb8 ], [ %v18, %bb33 ]
+  %3 = load i16, ptr %self16, align 2, !noundef !3
+  %4 = xor i16 %3, %.self3.sroa.5.2
+  store i16 %4, ptr %self16, align 2
+  %exitcond.not = icmp eq i64 %_0.i32, %iter.sroa.0.056
+  br i1 %exitcond.not, label %bb1.loopexit, label %bb6
+}
+
+; reed_solomon_novelpoly::field::f2e16::tweaked_formal_derivative
+; Function Attrs: nonlazybind uwtable
+define void @_ZN22reed_solomon_novelpoly5field5f2e1625tweaked_formal_derivative17h5b1b54e1a258c2ceE(ptr noalias nocapture noundef nonnull align 2 %codeword.0, i64 noundef %codeword.1, i64 noundef %n) unnamed_addr #0 {
+start:
+; call reed_solomon_novelpoly::field::f2e16::formal_derivative
+  tail call void @_ZN22reed_solomon_novelpoly5field5f2e1617formal_derivative17hd0977a8b62f3cbd2E(ptr noalias noundef nonnull align 2 %codeword.0, i64 noundef %codeword.1, i64 noundef %n)
+  ret void
+}
+
+; reed_solomon_novelpoly::field::f2e16::inverse_afft
+; Function Attrs: nonlazybind uwtable
+define void @_ZN22reed_solomon_novelpoly5field5f2e1612inverse_afft17h9dc39d0d070d1672E(ptr noalias nocapture noundef nonnull align 2 %data.0, i64 noundef %data.1, i64 noundef %size, i64 noundef %index) unnamed_addr #0 {
+start:
+; call reed_solomon_novelpoly::field::f2e16::AdditiveFFT::inverse_afft
+  tail call void @_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT12inverse_afft17h4d44ad96eac2020aE(ptr noalias noundef nonnull readonly align 2 dereferenceable(524286) @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, ptr noalias noundef nonnull align 2 %data.0, i64 noundef %data.1, i64 noundef %size, i64 noundef %index)
+  ret void
+}
+
+; reed_solomon_novelpoly::field::f2e16::afft
+; Function Attrs: nonlazybind uwtable
+define void @_ZN22reed_solomon_novelpoly5field5f2e164afft17h7456bac76cb52e12E(ptr noalias nocapture noundef nonnull align 2 %data.0, i64 noundef %data.1, i64 noundef %size, i64 noundef %index) unnamed_addr #0 {
+start:
+; call reed_solomon_novelpoly::field::f2e16::AdditiveFFT::afft
+  tail call void @_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT4afft17h48fb535882d96dacE(ptr noalias noundef nonnull readonly align 2 dereferenceable(524286) @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, ptr noalias noundef nonnull align 2 %data.0, i64 noundef %data.1, i64 noundef %size, i64 noundef %index)
+  ret void
+}
+
+; reed_solomon_novelpoly::field::f2e16::AdditiveFFT::inverse_afft
+; Function Attrs: nonlazybind uwtable
+define void @_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT12inverse_afft17h4d44ad96eac2020aE(ptr noalias nocapture noundef readonly align 2 dereferenceable(524286) %self, ptr noalias nocapture noundef nonnull align 2 %data.0, i64 noundef %data.1, i64 noundef %size, i64 noundef %index) unnamed_addr #0 {
+start:
+  %_673 = icmp ugt i64 %size, 1
+  br i1 %_673, label %bb3.preheader.lr.ph, label %bb22
+
+bb3.preheader.lr.ph:                              ; preds = %start
+  %_30 = add i64 %index, -1
+  br label %bb3.preheader
+
+bb3.preheader:                                    ; preds = %bb3.preheader.lr.ph, %bb21
+  %depart_no.076 = phi i64 [ 1, %bb3.preheader.lr.ph ], [ %_54, %bb21 ]
+  %_54 = shl i64 %depart_no.076, 1
+  %0 = shl i64 %depart_no.076, 2
+  %1 = add i64 %_54, 2
+  %2 = mul i64 %depart_no.076, -2
+  %3 = shl i64 %depart_no.076, 1
+  %4 = add i64 %depart_no.076, -1
+  %5 = mul i64 %depart_no.076, -2
+  %6 = shl i64 %depart_no.076, 1
+  br label %bb4
+
+bb22:                                             ; preds = %bb21, %start
+  ret void
+
+bb21:                                             ; preds = %bb20
+  %_6 = icmp ult i64 %_54, %size
+  br i1 %_6, label %bb3.preheader, label %bb22
+
+bb4:                                              ; preds = %bb3.preheader, %bb20
+  %indvar = phi i64 [ 0, %bb3.preheader ], [ %indvar.next, %bb20 ]
+  %j.071 = phi i64 [ %depart_no.076, %bb3.preheader ], [ %33, %bb20 ]
+  %umax128 = tail call i64 @llvm.umax.i64(i64 %data.1, i64 %j.071)
+  %7 = mul i64 %5, %indvar
+  %8 = sub i64 %7, %depart_no.076
+  %9 = add i64 %umax128, %8
+  %10 = mul i64 %6, %indvar
+  %umax129 = tail call i64 @llvm.umax.i64(i64 %data.1, i64 %10)
+  %11 = add i64 %umax129, %7
+  %umin130 = tail call i64 @llvm.umin.i64(i64 %9, i64 %11)
+  %umin131 = tail call i64 @llvm.umin.i64(i64 %umin130, i64 %4)
+  %12 = add i64 %umin131, 1
+  %13 = mul i64 %0, %indvar
+  %14 = add i64 %_54, %13
+  %scevgep = getelementptr i8, ptr %data.0, i64 %14
+  %15 = add i64 %1, %13
+  %scevgep121 = getelementptr i8, ptr %data.0, i64 %15
+  %umax = tail call i64 @llvm.umax.i64(i64 %data.1, i64 %j.071)
+  %16 = mul i64 %2, %indvar
+  %17 = sub i64 %16, %depart_no.076
+  %18 = add i64 %umax, %17
+  %19 = mul i64 %3, %indvar
+  %umax122 = tail call i64 @llvm.umax.i64(i64 %data.1, i64 %19)
+  %20 = add i64 %umax122, %16
+  %umin = tail call i64 @llvm.umin.i64(i64 %18, i64 %20)
+  %umin123 = tail call i64 @llvm.umin.i64(i64 %umin, i64 %4)
+  %21 = shl i64 %umin123, 1
+  %scevgep124 = getelementptr i8, ptr %scevgep121, i64 %21
+  %scevgep125 = getelementptr i8, ptr %data.0, i64 %13
+  %22 = or i64 %13, 2
+  %scevgep126 = getelementptr i8, ptr %data.0, i64 %22
+  %scevgep127 = getelementptr i8, ptr %scevgep126, i64 %21
+  %_12 = sub i64 %j.071, %depart_no.076
+  %_5664 = icmp ult i64 %_12, %j.071
+  br i1 %_5664, label %bb6.preheader, label %bb8
+
+bb6.preheader:                                    ; preds = %bb4
+  %min.iters.check = icmp ult i64 %12, 9
+  br i1 %min.iters.check, label %bb6.preheader134, label %vector.memcheck
+
+bb6.preheader134:                                 ; preds = %vector.body, %vector.memcheck, %bb6.preheader
+  %iter.sroa.0.065.ph = phi i64 [ %_12, %vector.memcheck ], [ %_12, %bb6.preheader ], [ %ind.end, %vector.body ]
+  br label %bb6
+
+vector.memcheck:                                  ; preds = %bb6.preheader
+  %bound0 = icmp ult ptr %scevgep, %scevgep127
+  %bound1 = icmp ult ptr %scevgep125, %scevgep124
+  %found.conflict = and i1 %bound0, %bound1
+  br i1 %found.conflict, label %bb6.preheader134, label %vector.ph
+
+vector.ph:                                        ; preds = %vector.memcheck
+  %n.mod.vf = and i64 %12, 7
+  %23 = icmp eq i64 %n.mod.vf, 0
+  %24 = select i1 %23, i64 8, i64 %n.mod.vf
+  %n.vec = sub i64 %12, %24
+  %ind.end = add i64 %_12, %n.vec
+  br label %vector.body
+
+vector.body:                                      ; preds = %vector.body, %vector.ph
+  %index132 = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
+  %25 = phi i64 [ %_12, %vector.ph ], [ %30, %vector.body ]
+  %offset.idx = add i64 %_12, %index132
+  %26 = add i64 %25, %depart_no.076
+  %27 = getelementptr inbounds [0 x i16], ptr %data.0, i64 0, i64 %26
+  %28 = getelementptr inbounds [0 x i16], ptr %data.0, i64 0, i64 %offset.idx
+  %wide.load = load <8 x i16>, ptr %28, align 2, !alias.scope !121
+  %wide.load133 = load <8 x i16>, ptr %27, align 2, !alias.scope !124, !noalias !121
+  %29 = xor <8 x i16> %wide.load133, %wide.load
+  store <8 x i16> %29, ptr %27, align 2, !alias.scope !124, !noalias !121
+  %index.next = add nuw i64 %index132, 8
+  %30 = add i64 %25, 8
+  %31 = icmp eq i64 %index.next, %n.vec
+  br i1 %31, label %bb6.preheader134, label %vector.body, !llvm.loop !126
+
+bb8:                                              ; preds = %bb10, %bb4
+  %_29 = add i64 %_30, %j.071
+  %_32 = icmp ult i64 %_29, 65535
+  br i1 %_32, label %bb11, label %panic, !prof !119
+
+bb6:                                              ; preds = %bb6.preheader134, %bb10
+  %iter.sroa.0.065 = phi i64 [ %_0.i, %bb10 ], [ %iter.sroa.0.065.ph, %bb6.preheader134 ]
+  %_0.i = add i64 %iter.sroa.0.065, 1
+  %_22 = add i64 %iter.sroa.0.065, %depart_no.076
+  %_25 = icmp ult i64 %_22, %data.1
+  br i1 %_25, label %bb9, label %panic9, !prof !119
+
+bb11:                                             ; preds = %bb8
+  %32 = getelementptr inbounds %"field::f2e16::AdditiveFFT", ptr %self, i64 0, i32 3, i64 %_29
+  %skew = load i16, ptr %32, align 2, !noundef !3
+  %_33.not = icmp ne i16 %skew, -1
+  %or.cond = and i1 %_33.not, %_5664
+  br i1 %or.cond, label %bb14.lr.ph, label %bb20
+
+bb14.lr.ph:                                       ; preds = %bb11
+  %_11.i = zext i16 %skew to i32
+  br label %bb14
+
+panic:                                            ; preds = %bb8
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %_29, i64 noundef 65535, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_f2bda5b351dc94361263959555f65ba0) #25
+  unreachable
+
+bb20:                                             ; preds = %_ZN22reed_solomon_novelpoly5field5f2e168Additive3mul17hfb20208c54ad2e5dE.exit, %bb11
+  %33 = add i64 %j.071, %_54
+  %_9 = icmp ult i64 %33, %size
+  %indvar.next = add i64 %indvar, 1
+  br i1 %_9, label %bb4, label %bb21
+
+bb14:                                             ; preds = %bb14.lr.ph, %_ZN22reed_solomon_novelpoly5field5f2e168Additive3mul17hfb20208c54ad2e5dE.exit
+  %iter3.sroa.0.067 = phi i64 [ %_12, %bb14.lr.ph ], [ %_0.i29, %_ZN22reed_solomon_novelpoly5field5f2e168Additive3mul17hfb20208c54ad2e5dE.exit ]
+  %_0.i29 = add i64 %iter3.sroa.0.067, 1
+  %_47 = icmp ult i64 %iter3.sroa.0.067, %data.1
+  br i1 %_47, label %bb16, label %panic5, !prof !119
+
+bb16:                                             ; preds = %bb14
+  %_50 = add i64 %iter3.sroa.0.067, %depart_no.076
+  %_53 = icmp ult i64 %_50, %data.1
+  br i1 %_53, label %bb17, label %panic7, !prof !119
+
+panic5:                                           ; preds = %bb14
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %iter3.sroa.0.067, i64 noundef %data.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_129a651a97dfb7a7cb6e5c0896c28cd0) #25
+  unreachable
+
+bb17:                                             ; preds = %bb16
+  %self6 = getelementptr inbounds [0 x i16], ptr %data.0, i64 0, i64 %iter3.sroa.0.067
+  %34 = getelementptr inbounds [0 x i16], ptr %data.0, i64 0, i64 %_50
+  %_49 = load i16, ptr %34, align 2, !noundef !3
+  %35 = icmp eq i16 %_49, 0
+  br i1 %35, label %_ZN22reed_solomon_novelpoly5field5f2e168Additive3mul17hfb20208c54ad2e5dE.exit, label %bb3.i
+
+bb3.i:                                            ; preds = %bb17
+  %_8.i = zext i16 %_49 to i64
+  %36 = getelementptr inbounds [65536 x i16], ptr @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, i64 0, i64 %_8.i
+  %_6.i = load i16, ptr %36, align 2, !noundef !3
+  %_5.i = zext i16 %_6.i to i32
+  %log.i = add nuw nsw i32 %_5.i, %_11.i
+  %_14.i = and i32 %log.i, 65535
+  %_15.i = lshr i32 %log.i, 16
+  %offset.i = add nuw nsw i32 %_14.i, %_15.i
+  %_19.i = icmp ult i32 %offset.i, 65536
+  br i1 %_19.i, label %bb4.i, label %panic1.i, !prof !119
+
+bb4.i:                                            ; preds = %bb3.i
+  %_18.i = zext i32 %offset.i to i64
+  %37 = getelementptr inbounds [65536 x i16], ptr getelementptr inbounds (<{ [524286 x i8] }>, ptr @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, i64 0, i32 0, i64 131072), i64 0, i64 %_18.i
+  %_16.i = load i16, ptr %37, align 2, !noundef !3
+  br label %_ZN22reed_solomon_novelpoly5field5f2e168Additive3mul17hfb20208c54ad2e5dE.exit
+
+panic1.i:                                         ; preds = %bb3.i
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef 65536, i64 noundef 65536, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_a00263033520f5f8af44777671310e84) #25
+  unreachable
+
+_ZN22reed_solomon_novelpoly5field5f2e168Additive3mul17hfb20208c54ad2e5dE.exit: ; preds = %bb17, %bb4.i
+  %_0.0.i = phi i16 [ %_16.i, %bb4.i ], [ 0, %bb17 ]
+  %38 = load i16, ptr %self6, align 2, !noundef !3
+  %39 = xor i16 %38, %_0.0.i
+  store i16 %39, ptr %self6, align 2
+  %exitcond94.not = icmp eq i64 %_0.i29, %j.071
+  br i1 %exitcond94.not, label %bb20, label %bb14
+
+panic7:                                           ; preds = %bb16
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %_50, i64 noundef %data.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_7d1752f895550b65c8b0b25a2dee062f) #25
+  unreachable
+
+bb9:                                              ; preds = %bb6
+  %_27 = icmp ult i64 %iter.sroa.0.065, %data.1
+  br i1 %_27, label %bb10, label %panic11, !prof !119
+
+panic9:                                           ; preds = %bb6
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %_22, i64 noundef %data.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_bd81994d216b0baab57b479e1386845a) #25
+  unreachable
+
+bb10:                                             ; preds = %bb9
+  %self10 = getelementptr inbounds [0 x i16], ptr %data.0, i64 0, i64 %_22
+  %40 = getelementptr inbounds [0 x i16], ptr %data.0, i64 0, i64 %iter.sroa.0.065
+  %rhs12 = load i16, ptr %40, align 2, !noundef !3
+  %41 = load i16, ptr %self10, align 2, !noundef !3
+  %42 = xor i16 %41, %rhs12
+  store i16 %42, ptr %self10, align 2
+  %exitcond.not = icmp eq i64 %_0.i, %j.071
+  br i1 %exitcond.not, label %bb8, label %bb6, !llvm.loop !127
+
+panic11:                                          ; preds = %bb9
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %iter.sroa.0.065, i64 noundef %data.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_98b7f0628fdd87e30f3030cfe9b984cf) #25
+  unreachable
+}
+
+; reed_solomon_novelpoly::field::f2e16::AdditiveFFT::afft
+; Function Attrs: nonlazybind uwtable
+define void @_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT4afft17h48fb535882d96dacE(ptr noalias nocapture noundef readonly align 2 dereferenceable(524286) %self, ptr noalias nocapture noundef nonnull align 2 %data.0, i64 noundef %data.1, i64 noundef %size, i64 noundef %index) unnamed_addr #0 {
+start:
+  %_6.not78 = icmp ult i64 %size, 2
+  br i1 %_6.not78, label %bb22, label %bb3.preheader.lr.ph
+
+bb3.preheader.lr.ph:                              ; preds = %start
+  %_13 = add i64 %index, -1
+  br label %bb3.preheader
+
+bb1.loopexit:                                     ; preds = %bb18, %bb3.preheader
+  %_6.not = icmp ult i64 %depart_no.0.in81, 4
+  br i1 %_6.not, label %bb22, label %bb3.preheader
+
+bb3.preheader:                                    ; preds = %bb3.preheader.lr.ph, %bb1.loopexit
+  %depart_no.0.in81 = phi i64 [ %size, %bb3.preheader.lr.ph ], [ %depart_no.082, %bb1.loopexit ]
+  %depart_no.082 = lshr i64 %depart_no.0.in81, 1
+  %_971 = icmp ult i64 %depart_no.082, %size
+  br i1 %_971, label %bb4.lr.ph, label %bb1.loopexit
+
+bb4.lr.ph:                                        ; preds = %bb3.preheader
+  %_54 = and i64 %depart_no.0.in81, -2
+  %0 = shl i64 %depart_no.082, 2
+  %1 = add i64 %_54, 2
+  %2 = mul i64 %depart_no.082, -2
+  %3 = and i64 %depart_no.0.in81, -2
+  %4 = add nsw i64 %depart_no.082, -1
+  %5 = mul i64 %depart_no.082, -2
+  %6 = and i64 %depart_no.0.in81, -2
+  %7 = add nsw i64 %depart_no.082, -1
+  br label %bb4
+
+bb22:                                             ; preds = %bb1.loopexit, %start
+  ret void
+
+bb4:                                              ; preds = %bb4.lr.ph, %bb18
+  %indvar = phi i64 [ 0, %bb4.lr.ph ], [ %indvar.next, %bb18 ]
+  %j.074 = phi i64 [ %depart_no.082, %bb4.lr.ph ], [ %34, %bb18 ]
+  %umax138 = tail call i64 @llvm.umax.i64(i64 %data.1, i64 %j.074)
+  %8 = mul i64 %5, %indvar
+  %9 = sub i64 %8, %depart_no.082
+  %10 = add i64 %umax138, %9
+  %11 = mul i64 %6, %indvar
+  %umax139 = tail call i64 @llvm.umax.i64(i64 %data.1, i64 %11)
+  %12 = add i64 %umax139, %8
+  %umin140 = tail call i64 @llvm.umin.i64(i64 %10, i64 %12)
+  %umin141 = tail call i64 @llvm.umin.i64(i64 %umin140, i64 %7)
+  %13 = add i64 %umin141, 1
+  %14 = mul i64 %0, %indvar
+  %15 = add i64 %_54, %14
+  %scevgep = getelementptr i8, ptr %data.0, i64 %15
+  %16 = add i64 %1, %14
+  %scevgep131 = getelementptr i8, ptr %data.0, i64 %16
+  %umax = tail call i64 @llvm.umax.i64(i64 %data.1, i64 %j.074)
+  %17 = mul i64 %2, %indvar
+  %18 = sub i64 %17, %depart_no.082
+  %19 = add i64 %umax, %18
+  %20 = mul i64 %3, %indvar
+  %umax132 = tail call i64 @llvm.umax.i64(i64 %data.1, i64 %20)
+  %21 = add i64 %umax132, %17
+  %umin = tail call i64 @llvm.umin.i64(i64 %19, i64 %21)
+  %umin133 = tail call i64 @llvm.umin.i64(i64 %umin, i64 %4)
+  %22 = shl i64 %umin133, 1
+  %scevgep134 = getelementptr i8, ptr %scevgep131, i64 %22
+  %scevgep135 = getelementptr i8, ptr %data.0, i64 %14
+  %23 = or i64 %14, 2
+  %scevgep136 = getelementptr i8, ptr %data.0, i64 %23
+  %scevgep137 = getelementptr i8, ptr %scevgep136, i64 %22
+  %_12 = add i64 %_13, %j.074
+  %_15 = icmp ult i64 %_12, 65535
+  br i1 %_15, label %bb5, label %panic, !prof !119
+
+bb5:                                              ; preds = %bb4
+  %24 = getelementptr inbounds %"field::f2e16::AdditiveFFT", ptr %self, i64 0, i32 3, i64 %_12
+  %skew = load i16, ptr %24, align 2, !noundef !3
+  %_16.not = icmp ne i16 %skew, -1
+  %.pre = sub i64 %j.074, %depart_no.082
+  %_5666 = icmp ult i64 %.pre, %j.074
+  %or.cond = and i1 %_16.not, %_5666
+  br i1 %or.cond, label %bb8.lr.ph, label %bb15
+
+panic:                                            ; preds = %bb4
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %_12, i64 noundef 65535, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_af5458d08bf8e3877912ae40e08608e8) #25
+  unreachable
+
+bb8.lr.ph:                                        ; preds = %bb5
+  %_11.i = zext i16 %skew to i32
+  br label %bb8
+
+bb15:                                             ; preds = %_ZN22reed_solomon_novelpoly5field5f2e168Additive3mul17hfb20208c54ad2e5dE.exit, %bb5
+  %_6568 = icmp ult i64 %.pre, %j.074
+  br i1 %_6568, label %bb17.preheader, label %bb18
+
+bb17.preheader:                                   ; preds = %bb15
+  %min.iters.check = icmp ult i64 %13, 9
+  br i1 %min.iters.check, label %bb17.preheader144, label %vector.memcheck
+
+bb17.preheader144:                                ; preds = %vector.body, %vector.memcheck, %bb17.preheader
+  %iter3.sroa.0.069.ph = phi i64 [ %.pre, %vector.memcheck ], [ %.pre, %bb17.preheader ], [ %ind.end, %vector.body ]
+  br label %bb17
+
+vector.memcheck:                                  ; preds = %bb17.preheader
+  %bound0 = icmp ult ptr %scevgep, %scevgep137
+  %bound1 = icmp ult ptr %scevgep135, %scevgep134
+  %found.conflict = and i1 %bound0, %bound1
+  br i1 %found.conflict, label %bb17.preheader144, label %vector.ph
+
+vector.ph:                                        ; preds = %vector.memcheck
+  %n.mod.vf = and i64 %13, 7
+  %25 = icmp eq i64 %n.mod.vf, 0
+  %26 = select i1 %25, i64 8, i64 %n.mod.vf
+  %n.vec = sub i64 %13, %26
+  %ind.end = add i64 %.pre, %n.vec
+  br label %vector.body
+
+vector.body:                                      ; preds = %vector.body, %vector.ph
+  %index142 = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
+  %27 = phi i64 [ %.pre, %vector.ph ], [ %32, %vector.body ]
+  %offset.idx = add i64 %.pre, %index142
+  %28 = add i64 %27, %depart_no.082
+  %29 = getelementptr inbounds [0 x i16], ptr %data.0, i64 0, i64 %28
+  %30 = getelementptr inbounds [0 x i16], ptr %data.0, i64 0, i64 %offset.idx
+  %wide.load = load <8 x i16>, ptr %30, align 2, !alias.scope !128
+  %wide.load143 = load <8 x i16>, ptr %29, align 2, !alias.scope !131, !noalias !128
+  %31 = xor <8 x i16> %wide.load143, %wide.load
+  store <8 x i16> %31, ptr %29, align 2, !alias.scope !131, !noalias !128
+  %index.next = add nuw i64 %index142, 8
+  %32 = add i64 %27, 8
+  %33 = icmp eq i64 %index.next, %n.vec
+  br i1 %33, label %bb17.preheader144, label %vector.body, !llvm.loop !133
+
+bb8:                                              ; preds = %bb8.lr.ph, %_ZN22reed_solomon_novelpoly5field5f2e168Additive3mul17hfb20208c54ad2e5dE.exit
+  %iter.sroa.0.067 = phi i64 [ %.pre, %bb8.lr.ph ], [ %_0.i, %_ZN22reed_solomon_novelpoly5field5f2e168Additive3mul17hfb20208c54ad2e5dE.exit ]
+  %_0.i = add i64 %iter.sroa.0.067, 1
+  %_30 = icmp ult i64 %iter.sroa.0.067, %data.1
+  br i1 %_30, label %bb11, label %panic9, !prof !119
+
+bb18:                                             ; preds = %bb20, %bb15
+  %34 = add i64 %j.074, %_54
+  %_9 = icmp ult i64 %34, %size
+  %indvar.next = add i64 %indvar, 1
+  br i1 %_9, label %bb4, label %bb1.loopexit
+
+bb17:                                             ; preds = %bb17.preheader144, %bb20
+  %iter3.sroa.0.069 = phi i64 [ %_0.i29, %bb20 ], [ %iter3.sroa.0.069.ph, %bb17.preheader144 ]
+  %_0.i29 = add i64 %iter3.sroa.0.069, 1
+  %_48 = add i64 %iter3.sroa.0.069, %depart_no.082
+  %_51 = icmp ult i64 %_48, %data.1
+  br i1 %_51, label %bb19, label %panic5, !prof !119
+
+bb19:                                             ; preds = %bb17
+  %_53 = icmp ult i64 %iter3.sroa.0.069, %data.1
+  br i1 %_53, label %bb20, label %panic7, !prof !119
+
+panic5:                                           ; preds = %bb17
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %_48, i64 noundef %data.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_cb8e3e2502d53c2a02c21e2681bb5e6f) #25
+  unreachable
+
+bb20:                                             ; preds = %bb19
+  %self6 = getelementptr inbounds [0 x i16], ptr %data.0, i64 0, i64 %_48
+  %35 = getelementptr inbounds [0 x i16], ptr %data.0, i64 0, i64 %iter3.sroa.0.069
+  %rhs = load i16, ptr %35, align 2, !noundef !3
+  %36 = load i16, ptr %self6, align 2, !noundef !3
+  %37 = xor i16 %36, %rhs
+  store i16 %37, ptr %self6, align 2
+  %exitcond100.not = icmp eq i64 %_0.i29, %j.074
+  br i1 %exitcond100.not, label %bb18, label %bb17, !llvm.loop !134
+
+panic7:                                           ; preds = %bb19
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %iter3.sroa.0.069, i64 noundef %data.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_a221c1a2360062e2a832e15ee17bc655) #25
+  unreachable
+
+bb11:                                             ; preds = %bb8
+  %_33 = add i64 %iter.sroa.0.067, %depart_no.082
+  %_36 = icmp ult i64 %_33, %data.1
+  br i1 %_36, label %bb12, label %panic11, !prof !119
+
+panic9:                                           ; preds = %bb8
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %iter.sroa.0.067, i64 noundef %data.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_9c862686bbc2e43cf998685e57f71a69) #25
+  unreachable
+
+bb12:                                             ; preds = %bb11
+  %self10 = getelementptr inbounds [0 x i16], ptr %data.0, i64 0, i64 %iter.sroa.0.067
+  %38 = getelementptr inbounds [0 x i16], ptr %data.0, i64 0, i64 %_33
+  %_32 = load i16, ptr %38, align 2, !noundef !3
+  %39 = icmp eq i16 %_32, 0
+  br i1 %39, label %_ZN22reed_solomon_novelpoly5field5f2e168Additive3mul17hfb20208c54ad2e5dE.exit, label %bb3.i
+
+bb3.i:                                            ; preds = %bb12
+  %_8.i = zext i16 %_32 to i64
+  %40 = getelementptr inbounds [65536 x i16], ptr @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, i64 0, i64 %_8.i
+  %_6.i = load i16, ptr %40, align 2, !noundef !3
+  %_5.i = zext i16 %_6.i to i32
+  %log.i = add nuw nsw i32 %_5.i, %_11.i
+  %_14.i = and i32 %log.i, 65535
+  %_15.i = lshr i32 %log.i, 16
+  %offset.i = add nuw nsw i32 %_14.i, %_15.i
+  %_19.i = icmp ult i32 %offset.i, 65536
+  br i1 %_19.i, label %bb4.i, label %panic1.i, !prof !119
+
+bb4.i:                                            ; preds = %bb3.i
+  %_18.i = zext i32 %offset.i to i64
+  %41 = getelementptr inbounds [65536 x i16], ptr getelementptr inbounds (<{ [524286 x i8] }>, ptr @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, i64 0, i32 0, i64 131072), i64 0, i64 %_18.i
+  %_16.i = load i16, ptr %41, align 2, !noundef !3
+  br label %_ZN22reed_solomon_novelpoly5field5f2e168Additive3mul17hfb20208c54ad2e5dE.exit
+
+panic1.i:                                         ; preds = %bb3.i
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef 65536, i64 noundef 65536, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_a00263033520f5f8af44777671310e84) #25
+  unreachable
+
+_ZN22reed_solomon_novelpoly5field5f2e168Additive3mul17hfb20208c54ad2e5dE.exit: ; preds = %bb12, %bb4.i
+  %_0.0.i = phi i16 [ %_16.i, %bb4.i ], [ 0, %bb12 ]
+  %42 = load i16, ptr %self10, align 2, !noundef !3
+  %43 = xor i16 %42, %_0.0.i
+  store i16 %43, ptr %self10, align 2
+  %exitcond.not = icmp eq i64 %_0.i, %j.074
+  br i1 %exitcond.not, label %bb15, label %bb8
+
+panic11:                                          ; preds = %bb11
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %_33, i64 noundef %data.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_de3627cd7ea65296f01e0bdae05e1504) #25
+  unreachable
+}
+
+; reed_solomon_novelpoly::field::f2e16::encode_low_plain
+; Function Attrs: nonlazybind uwtable
+define void @_ZN22reed_solomon_novelpoly5field5f2e1616encode_low_plain17h428b65c9fd426544E(ptr noalias nocapture noundef nonnull readonly align 2 %data.0, i64 noundef %data.1, i64 noundef %k, ptr noalias nocapture noundef nonnull align 2 %codeword.0, i64 noundef %codeword.1, i64 noundef %0) unnamed_addr #0 personality ptr @rust_eh_personality {
+start:
+  %_40 = alloca %"core::option::Option<core::fmt::Arguments<'_>>", align 8
+  %_31 = alloca i64, align 8
+  %_24 = alloca %"core::option::Option<core::fmt::Arguments<'_>>", align 8
+  %_18 = alloca i64, align 8
+  %_16 = alloca %"core::option::Option<core::fmt::Arguments<'_>>", align 8
+  %_10 = alloca i64, align 8
+  %n = alloca i64, align 8
+  store i64 %0, ptr %n, align 8
+  %_6 = shl i64 %k, 1
+  %_5.not = icmp ugt i64 %_6, %0
+  br i1 %_5.not, label %bb2, label %bb1
+
+bb2:                                              ; preds = %start
+; call core::panicking::panic
+  tail call void @_ZN4core9panicking5panic17hcad0f3a89a1b36aaE(ptr noalias noundef nonnull readonly align 1 @alloc_9645b7ea97e11e530962bac2f32506ac, i64 noundef 28, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_7a9d2309199b3f0dabc76abc14719015) #25
+  unreachable
+
+bb1:                                              ; preds = %start
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_10)
+  store i64 %codeword.1, ptr %_10, align 8
+  %_12 = icmp eq i64 %0, %codeword.1
+  br i1 %_12, label %bb3, label %bb4
+
+bb4:                                              ; preds = %bb1
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_16)
+  store ptr null, ptr %_16, align 8
+; call core::panicking::assert_failed
+  call fastcc void @_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E(ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %_10, ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %n, ptr noalias nocapture noundef nonnull align 8 dereferenceable(48) %_16, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_526f11c18707b12f3812c109556c482a) #25
+  unreachable
+
+bb3:                                              ; preds = %bb1
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_10)
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_18)
+  store i64 %data.1, ptr %_18, align 8
+  %_20 = icmp eq i64 %0, %data.1
+  br i1 %_20, label %bb5, label %bb6
+
+bb6:                                              ; preds = %bb3
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_24)
+  store ptr null, ptr %_24, align 8
+; call core::panicking::assert_failed
+  call fastcc void @_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E(ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %_18, ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %n, ptr noalias nocapture noundef nonnull align 8 dereferenceable(48) %_24, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_e9d3ac4b69bef9ec6510babe5e3500dd) #25
+  unreachable
+
+bb5:                                              ; preds = %bb3
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_18)
+  %1 = tail call i64 @llvm.ctpop.i64(i64 %0), !range !52
+  %or.cond = icmp eq i64 %1, 1
+  br i1 %or.cond, label %bb8, label %bb9
+
+bb9:                                              ; preds = %bb5
+; call core::panicking::panic
+  tail call void @_ZN4core9panicking5panic17hcad0f3a89a1b36aaE(ptr noalias noundef nonnull readonly align 1 @alloc_88c85b72894c45b5bd1102c45d36615c, i64 noundef 34, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_80ba7062d26907dfab576787212b0e16) #25
+  unreachable
+
+bb8:                                              ; preds = %bb5
+  %2 = tail call i64 @llvm.ctpop.i64(i64 %k), !range !52
+  %or.cond34 = icmp eq i64 %2, 1
+  br i1 %or.cond34, label %bb13, label %bb12
+
+bb12:                                             ; preds = %bb8
+; call core::panicking::panic
+  tail call void @_ZN4core9panicking5panic17hcad0f3a89a1b36aaE(ptr noalias noundef nonnull readonly align 1 @alloc_ebab1fa1c8764925fb61c89c3a8b4711, i64 noundef 34, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_b565664364830caebe8531352cb295b3) #25
+  unreachable
+
+bb13:                                             ; preds = %bb8
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_31)
+  %3 = urem i64 %0, %k
+  %4 = sub nuw i64 %0, %3
+  store i64 %4, ptr %_31, align 8
+  %_36 = icmp eq i64 %3, 0
+  br i1 %_36, label %bb14, label %bb15
+
+bb15:                                             ; preds = %bb13
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_40)
+  store ptr null, ptr %_40, align 8
+; call core::panicking::assert_failed
+  call fastcc void @_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E(ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %_31, ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %n, ptr noalias nocapture noundef nonnull align 8 dereferenceable(48) %_40, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_54bbe7d664be606d9c2fec86cf1399bc) #25
+  unreachable
+
+bb14:                                             ; preds = %bb13
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_31)
+  %5 = shl i64 %0, 1
+  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %codeword.0, ptr nonnull align 2 %data.0, i64 %5, i1 false), !alias.scope !135, !noalias !139
+  %_3.not.i10 = icmp ugt i64 %k, %0
+  br i1 %_3.not.i10, label %bb2.i, label %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$12split_at_mut17ha5bfd732e9e4b989E.exit"
+
+bb2.i:                                            ; preds = %bb14
+; call core::panicking::panic
+  tail call void @_ZN4core9panicking5panic17hcad0f3a89a1b36aaE(ptr noalias noundef nonnull readonly align 1 @alloc_fddaeef1fe1a23c45402ef8f58614acb, i64 noundef 35, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_5088b06d17e4d1bf31605007e8b5aeb3) #25, !noalias !141
+  unreachable
+
+"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$12split_at_mut17ha5bfd732e9e4b989E.exit": ; preds = %bb14
+  %len.i = sub i64 %0, %k
+; call reed_solomon_novelpoly::field::f2e16::AdditiveFFT::inverse_afft
+  tail call void @_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT12inverse_afft17h4d44ad96eac2020aE(ptr noalias noundef nonnull readonly align 2 dereferenceable(524286) @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, ptr noalias noundef nonnull align 2 %codeword.0, i64 noundef %k, i64 noundef %k, i64 noundef 0)
+  %spec.select.i.i.i = tail call i64 @llvm.usub.sat.i64(i64 %0, i64 %k)
+  %d.i.i.i = udiv i64 %spec.select.i.i.i, %k
+  %r.i.i.i = urem i64 %spec.select.i.i.i, %k
+  %_7.not.i.i.i = icmp ne i64 %r.i.i.i, 0
+  %_9.0.i.i.i = zext i1 %_7.not.i.i.i to i64
+  %_0.0.i.i.i = add nuw i64 %d.i.i.i, %_9.0.i.i.i
+  %_70.not.not37 = icmp eq i64 %_0.0.i.i.i, 0
+  br i1 %_70.not.not37, label %"_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hc1f77569f7ffd7a3E.exit", label %bb20
+
+"_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hc1f77569f7ffd7a3E.exit": ; preds = %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E.exit29", %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$12split_at_mut17ha5bfd732e9e4b989E.exit"
+  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %codeword.0, ptr nonnull align 2 %data.0, i64 %_6, i1 false), !alias.scope !145, !noalias !149
+  ret void
+
+bb20:                                             ; preds = %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$12split_at_mut17ha5bfd732e9e4b989E.exit", %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E.exit29"
+  %.in = phi i64 [ %6, %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E.exit29" ], [ %_0.0.i.i.i, %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$12split_at_mut17ha5bfd732e9e4b989E.exit" ]
+  %_7240 = phi i64 [ %_72, %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E.exit29" ], [ %_6, %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$12split_at_mut17ha5bfd732e9e4b989E.exit" ]
+  %iter.sroa.0.039 = phi i64 [ %_7240, %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E.exit29" ], [ %k, %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$12split_at_mut17ha5bfd732e9e4b989E.exit" ]
+  %6 = add i64 %.in, -1
+  %_3.i = icmp ult i64 %iter.sroa.0.039, %k
+  br i1 %_3.i, label %bb1.i24, label %bb2.i20
+
+bb2.i20:                                          ; preds = %bb20
+  %_9.i21 = icmp ugt i64 %iter.sroa.0.039, %len.i
+  br i1 %_9.i21, label %bb3.i23, label %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E.exit29"
+
+bb1.i24:                                          ; preds = %bb20
+  %_57 = sub i64 %iter.sroa.0.039, %k
+; call core::slice::index::slice_index_order_fail
+  tail call void @_ZN4core5slice5index22slice_index_order_fail17h980cdeba17e6d1eaE(i64 noundef %_57, i64 noundef %iter.sroa.0.039, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_dc7c0bafb1ee24bd5411a1f8ad7f549c) #25, !noalias !151
+  unreachable
+
+bb3.i23:                                          ; preds = %bb2.i20
+; call core::slice::index::slice_end_index_len_fail
+  tail call void @_ZN4core5slice5index24slice_end_index_len_fail17h37d7f9da4c251f06E(i64 noundef %iter.sroa.0.039, i64 noundef %len.i, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_dc7c0bafb1ee24bd5411a1f8ad7f549c) #25, !noalias !151
+  unreachable
+
+"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E.exit29": ; preds = %bb2.i20
+  %data.i22 = getelementptr inbounds i16, ptr %codeword.0, i64 %iter.sroa.0.039
+  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %data.i22, ptr nonnull align 2 %codeword.0, i64 %_6, i1 false), !alias.scope !154, !noalias !158
+; call reed_solomon_novelpoly::field::f2e16::AdditiveFFT::afft
+  tail call void @_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT4afft17h48fb535882d96dacE(ptr noalias noundef nonnull readonly align 2 dereferenceable(524286) @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, ptr noalias noundef nonnull align 2 %data.i22, i64 noundef %k, i64 noundef %k, i64 noundef %iter.sroa.0.039)
+  %_70.not.not = icmp eq i64 %6, 0
+  %_72 = add i64 %_7240, %k
+  br i1 %_70.not.not, label %"_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hc1f77569f7ffd7a3E.exit", label %bb20
+}
+
+; reed_solomon_novelpoly::field::f2e16::encode_high_plain
+; Function Attrs: nonlazybind uwtable
+define void @_ZN22reed_solomon_novelpoly5field5f2e1617encode_high_plain17h03eb5b4f2b5edd50E(ptr noalias nocapture noundef nonnull readonly align 2 %data.0, i64 noundef %data.1, i64 noundef %k, ptr noalias nocapture noundef nonnull align 2 %parity.0, i64 noundef %parity.1, ptr noalias nocapture noundef nonnull align 2 %mem.0, i64 noundef %mem.1, i64 noundef %n) unnamed_addr #0 {
+start:
+  %t = sub i64 %n, %k
+  %_3733.not = icmp eq i64 %t, 0
+  br i1 %_3733.not, label %bb6.preheader, label %bb2.preheader
+
+bb2.preheader:                                    ; preds = %start
+  %0 = xor i64 %k, -1
+  %1 = add i64 %0, %n
+  %umin = tail call i64 @llvm.umin.i64(i64 %parity.1, i64 %1)
+  %2 = add i64 %umin, 1
+  %min.iters.check = icmp ult i64 %2, 9
+  br i1 %min.iters.check, label %bb2.preheader79, label %vector.ph
+
+bb2.preheader79:                                  ; preds = %vector.body, %bb2.preheader
+  %iter.sroa.0.034.ph = phi i64 [ 0, %bb2.preheader ], [ %n.vec, %vector.body ]
+  br label %bb2
+
+vector.ph:                                        ; preds = %bb2.preheader
+  %n.mod.vf = and i64 %2, 7
+  %3 = icmp eq i64 %n.mod.vf, 0
+  %4 = select i1 %3, i64 8, i64 %n.mod.vf
+  %n.vec = sub i64 %2, %4
+  br label %vector.body
+
+vector.body:                                      ; preds = %vector.body, %vector.ph
+  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
+  %5 = getelementptr inbounds [0 x i16], ptr %parity.0, i64 0, i64 %index
+  store <8 x i16> zeroinitializer, ptr %5, align 2
+  %index.next = add nuw i64 %index, 8
+  %6 = icmp eq i64 %index.next, %n.vec
+  br i1 %6, label %bb2.preheader79, label %vector.body, !llvm.loop !160
+
+bb6.preheader:                                    ; preds = %bb5, %start
+  %_1637 = icmp ult i64 %t, %n
+  br i1 %_1637, label %bb7.lr.ph, label %bb15
+
+bb7.lr.ph:                                        ; preds = %bb6.preheader
+  %_9.i = icmp ugt i64 %t, %mem.1
+  %7 = shl i64 %t, 1
+  br i1 %_9.i, label %bb3.i, label %bb7.lr.ph.split
+
+bb7.lr.ph.split:                                  ; preds = %bb7.lr.ph
+  %_9.i14 = icmp ugt i64 %t, %data.1
+  br i1 %_9.i14, label %bb3.i15, label %bb7.lr.ph.split.split
+
+bb7.lr.ph.split.split:                            ; preds = %bb7.lr.ph.split
+  br i1 %_3733.not, label %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E.exit", label %bb7.us39.preheader
+
+bb7.us39.preheader:                               ; preds = %bb7.lr.ph.split.split
+  %8 = shl i64 %t, 1
+  %_16.us = icmp ult i64 %8, %n
+  %9 = xor i64 %k, -1
+  %10 = add i64 %9, %n
+  %umin65 = tail call i64 @llvm.umin.i64(i64 %parity.1, i64 %10)
+  %11 = add i64 %umin65, 1
+  %min.iters.check68 = icmp ult i64 %11, 9
+  %n.mod.vf70 = and i64 %11, 7
+  %12 = icmp eq i64 %n.mod.vf70, 0
+  %13 = select i1 %12, i64 8, i64 %n.mod.vf70
+  %n.vec71 = sub i64 %11, %13
+  br label %bb2.i.us43
+
+bb2.i.us43:                                       ; preds = %bb10.bb12_crit_edge.us, %bb7.us39.preheader
+  %i.038.us40 = phi i64 [ %8, %bb10.bb12_crit_edge.us ], [ %t, %bb7.us39.preheader ]
+  %_21.us41 = sub i64 %i.038.us40, %t
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !161)
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !164)
+  %_3.not.i.us = icmp eq i64 %i.038.us40, %t
+  br i1 %_3.not.i.us, label %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E.exit.us", label %bb1.i16
+
+"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E.exit.us": ; preds = %bb2.i.us43
+  %data.i.us = getelementptr inbounds i16, ptr %data.0, i64 %_21.us41
+  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %mem.0, ptr nonnull align 2 %data.i.us, i64 %7, i1 false), !alias.scope !166, !noalias !167
+; call reed_solomon_novelpoly::field::f2e16::AdditiveFFT::inverse_afft
+  tail call void @_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT12inverse_afft17h4d44ad96eac2020aE(ptr noalias noundef nonnull readonly align 2 dereferenceable(524286) @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, ptr noalias noundef nonnull align 2 %mem.0, i64 noundef %mem.1, i64 noundef %t, i64 noundef %t)
+  br i1 %min.iters.check68, label %bb11.us.preheader, label %vector.body73
+
+vector.body73:                                    ; preds = %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E.exit.us", %vector.body73
+  %index74 = phi i64 [ %index.next76, %vector.body73 ], [ 0, %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E.exit.us" ]
+  %14 = getelementptr inbounds [0 x i16], ptr %parity.0, i64 0, i64 %index74
+  %15 = getelementptr inbounds [0 x i16], ptr %mem.0, i64 0, i64 %index74
+  %wide.load = load <8 x i16>, ptr %15, align 2
+  %wide.load75 = load <8 x i16>, ptr %14, align 2
+  %16 = xor <8 x i16> %wide.load75, %wide.load
+  store <8 x i16> %16, ptr %14, align 2
+  %index.next76 = add nuw i64 %index74, 8
+  %17 = icmp eq i64 %index.next76, %n.vec71
+  br i1 %17, label %bb11.us.preheader, label %vector.body73, !llvm.loop !169
+
+bb11.us.preheader:                                ; preds = %vector.body73, %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E.exit.us"
+  %iter2.sroa.0.036.us.ph = phi i64 [ 0, %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E.exit.us" ], [ %n.vec71, %vector.body73 ]
+  br label %bb11.us
+
+bb11.us:                                          ; preds = %bb11.us.preheader, %bb13.us
+  %iter2.sroa.0.036.us = phi i64 [ %_0.i18.us, %bb13.us ], [ %iter2.sroa.0.036.us.ph, %bb11.us.preheader ]
+  %exitcond59.not = icmp eq i64 %iter2.sroa.0.036.us, %parity.1
+  br i1 %exitcond59.not, label %panic, label %bb13.us, !prof !59
+
+bb13.us:                                          ; preds = %bb11.us
+  %_0.i18.us = add nuw i64 %iter2.sroa.0.036.us, 1
+  %self4.us = getelementptr inbounds [0 x i16], ptr %parity.0, i64 0, i64 %iter2.sroa.0.036.us
+  %18 = getelementptr inbounds [0 x i16], ptr %mem.0, i64 0, i64 %iter2.sroa.0.036.us
+  %rhs.us = load i16, ptr %18, align 2, !noundef !3
+  %19 = load i16, ptr %self4.us, align 2, !noundef !3
+  %20 = xor i16 %19, %rhs.us
+  store i16 %20, ptr %self4.us, align 2
+  %exitcond60.not = icmp eq i64 %_0.i18.us, %t
+  br i1 %exitcond60.not, label %bb10.bb12_crit_edge.us, label %bb11.us, !llvm.loop !170
+
+bb10.bb12_crit_edge.us:                           ; preds = %bb13.us
+  br i1 %_16.us, label %bb2.i.us43, label %bb15
+
+bb2:                                              ; preds = %bb2.preheader79, %bb5
+  %iter.sroa.0.034 = phi i64 [ %_0.i, %bb5 ], [ %iter.sroa.0.034.ph, %bb2.preheader79 ]
+  %exitcond.not = icmp eq i64 %iter.sroa.0.034, %parity.1
+  br i1 %exitcond.not, label %panic7, label %bb5, !prof !59
+
+bb15:                                             ; preds = %bb10.bb12_crit_edge.us, %bb6.preheader
+; call reed_solomon_novelpoly::field::f2e16::AdditiveFFT::afft
+  tail call void @_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT4afft17h48fb535882d96dacE(ptr noalias noundef nonnull readonly align 2 dereferenceable(524286) @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, ptr noalias noundef nonnull align 2 %parity.0, i64 noundef %parity.1, i64 noundef %t, i64 noundef 0)
+  ret void
+
+bb3.i:                                            ; preds = %bb7.lr.ph
+; call core::slice::index::slice_end_index_len_fail
+  tail call void @_ZN4core5slice5index24slice_end_index_len_fail17h37d7f9da4c251f06E(i64 noundef %t, i64 noundef %mem.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_2b34cb3706a08cd5e8dd351bf1c50524) #25, !noalias !171
+  unreachable
+
+bb3.i15:                                          ; preds = %bb7.lr.ph.split
+; call core::slice::index::slice_end_index_len_fail
+  tail call void @_ZN4core5slice5index24slice_end_index_len_fail17h37d7f9da4c251f06E(i64 noundef %t, i64 noundef %data.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_bf5facbc0203c3c9b17b7e0140adce04) #25, !noalias !174
+  unreachable
+
+bb1.i16:                                          ; preds = %bb2.i.us43
+  %new_len.i = sub nuw i64 %t, %_21.us41
+; call core::slice::<impl [T]>::copy_from_slice::len_mismatch_fail
+  tail call void @"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17hfd4b87aade02c693E"(i64 noundef %t, i64 noundef %new_len.i, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_9682ffdcded58010cb1958767eb6ef1a) #25, !noalias !166
+  unreachable
+
+"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E.exit": ; preds = %bb7.lr.ph.split.split, %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E.exit"
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !161)
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !164)
+  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %mem.0, ptr nonnull align 2 %data.0, i64 %7, i1 false), !alias.scope !166, !noalias !167
+; call reed_solomon_novelpoly::field::f2e16::AdditiveFFT::inverse_afft
+  tail call void @_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT12inverse_afft17h4d44ad96eac2020aE(ptr noalias noundef nonnull readonly align 2 dereferenceable(524286) @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, ptr noalias noundef nonnull align 2 %mem.0, i64 noundef %mem.1, i64 noundef 0, i64 noundef 0)
+  br label %"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E.exit"
+
+panic:                                            ; preds = %bb11.us
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %parity.1, i64 noundef %parity.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_9e5273400af4d74bef4b62bbb08b5853) #25
+  unreachable
+
+bb5:                                              ; preds = %bb2
+  %_0.i = add nuw i64 %iter.sroa.0.034, 1
+  %21 = getelementptr inbounds [0 x i16], ptr %parity.0, i64 0, i64 %iter.sroa.0.034
+  store i16 0, ptr %21, align 2
+  %exitcond58.not = icmp eq i64 %_0.i, %t
+  br i1 %exitcond58.not, label %bb6.preheader, label %bb2, !llvm.loop !177
+
+panic7:                                           ; preds = %bb2
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %parity.1, i64 noundef %parity.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_8fadc155b55c46db415df2915eae58f3) #25
+  unreachable
+}
+
+; reed_solomon_novelpoly::field::f2e16::encode_sub
+; Function Attrs: nonlazybind uwtable
+define void @_ZN22reed_solomon_novelpoly5field5f2e1610encode_sub17h7956879666f65b82E(ptr noalias nocapture noundef writeonly sret(%"core::result::Result<alloc::vec::Vec<field::f2e16::Additive>, errors::Error>") align 8 dereferenceable(32) %_0, ptr noalias nocapture noundef nonnull readonly align 1 %bytes.0, i64 noundef %bytes.1, i64 noundef %n, i64 noundef %k) unnamed_addr #0 {
+start:
+; call reed_solomon_novelpoly::field::f2e16::encode_sub_plain
+  tail call void @_ZN22reed_solomon_novelpoly5field5f2e1616encode_sub_plain17h9331897333b8bb31E(ptr noalias nocapture noundef nonnull sret(%"core::result::Result<alloc::vec::Vec<field::f2e16::Additive>, errors::Error>") align 8 dereferenceable(32) %_0, ptr noalias noundef nonnull readonly align 1 %bytes.0, i64 noundef %bytes.1, i64 noundef %n, i64 noundef %k)
+  ret void
+}
+
+; reed_solomon_novelpoly::field::f2e16::encode_sub_plain
+; Function Attrs: nonlazybind uwtable
+define void @_ZN22reed_solomon_novelpoly5field5f2e1616encode_sub_plain17h9331897333b8bb31E(ptr noalias nocapture noundef writeonly sret(%"core::result::Result<alloc::vec::Vec<field::f2e16::Additive>, errors::Error>") align 8 dereferenceable(32) %_0, ptr noalias nocapture noundef nonnull readonly align 1 %bytes.0, i64 noundef %bytes.1, i64 noundef %0, i64 noundef %k) unnamed_addr #0 personality ptr @rust_eh_personality {
+start:
+  %_65 = alloca %"core::option::Option<core::fmt::Arguments<'_>>", align 8
+  %elm_len = alloca i64, align 8
+  %_11 = alloca %"core::fmt::Arguments<'_>", align 8
+  %_7 = alloca %"core::fmt::Arguments<'_>", align 8
+  %n = alloca i64, align 8
+  store i64 %0, ptr %n, align 8
+  %1 = tail call i64 @llvm.ctpop.i64(i64 %0), !range !52
+  %or.cond = icmp eq i64 %1, 1
+  br i1 %or.cond, label %bb2, label %bb3
+
+bb3:                                              ; preds = %start
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_7)
+  store ptr @alloc_f4add719eaa34a8271973689f21b3b52, ptr %_7, align 8
+  %2 = getelementptr inbounds { ptr, i64 }, ptr %_7, i64 0, i32 1
+  store i64 1, ptr %2, align 8
+  %3 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_7, i64 0, i32 2
+  store ptr null, ptr %3, align 8
+  %4 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_7, i64 0, i32 1
+  store ptr @alloc_513570631223a12912d85da2bec3b15a, ptr %4, align 8
+  %5 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_7, i64 0, i32 1, i32 1
+  store i64 0, ptr %5, align 8
+; call core::panicking::panic_fmt
+  call void @_ZN4core9panicking9panic_fmt17h979245e2fdb2fabdE(ptr noalias nocapture noundef nonnull readonly align 8 dereferenceable(48) %_7, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_2afbd3a968cecb813337a812b6fd4e75) #25
+  unreachable
+
+bb2:                                              ; preds = %start
+  %6 = tail call i64 @llvm.ctpop.i64(i64 %k), !range !52
+  %or.cond66 = icmp eq i64 %6, 1
+  br i1 %or.cond66, label %bb5, label %bb6
+
+bb6:                                              ; preds = %bb2
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_11)
+  store ptr @alloc_056501d170f1fadc090e6d380d80cd04, ptr %_11, align 8
+  %7 = getelementptr inbounds { ptr, i64 }, ptr %_11, i64 0, i32 1
+  store i64 1, ptr %7, align 8
+  %8 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_11, i64 0, i32 2
+  store ptr null, ptr %8, align 8
+  %9 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_11, i64 0, i32 1
+  store ptr @alloc_513570631223a12912d85da2bec3b15a, ptr %9, align 8
+  %10 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_11, i64 0, i32 1, i32 1
+  store i64 0, ptr %10, align 8
+; call core::panicking::panic_fmt
+  call void @_ZN4core9panicking9panic_fmt17h979245e2fdb2fabdE(ptr noalias nocapture noundef nonnull readonly align 8 dereferenceable(48) %_11, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_85aa81c0631db6c9eb4f3bc88b510f54) #25
+  unreachable
+
+bb5:                                              ; preds = %bb2
+  %_15 = shl i64 %k, 1
+  %_13.not = icmp ult i64 %_15, %bytes.1
+  br i1 %_13.not, label %bb8, label %bb7
+
+bb8:                                              ; preds = %bb5
+; call core::panicking::panic
+  tail call void @_ZN4core9panicking5panic17hcad0f3a89a1b36aaE(ptr noalias noundef nonnull readonly align 1 @alloc_da1237183331fa9a4026ffc9ac590458, i64 noundef 39, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_398940dfd68a307120fc91958cb06184) #25
+  unreachable
+
+bb7:                                              ; preds = %bb5
+  %_1814 = lshr i64 %0, 1
+  %_17.not = icmp ult i64 %_1814, %k
+  br i1 %_17.not, label %bb10, label %bb9
+
+bb10:                                             ; preds = %bb7
+; call core::panicking::panic
+  tail call void @_ZN4core9panicking5panic17hcad0f3a89a1b36aaE(ptr noalias noundef nonnull readonly align 1 @alloc_0c0438671d5b44eff5edb13c53e898ef, i64 noundef 28, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_0a674a2b660622194cd9384c7caa0f33) #25
+  unreachable
+
+bb9:                                              ; preds = %bb7
+  %11 = tail call i64 @llvm.ctpop.i64(i64 %bytes.1), !range !52
+  %or.cond68 = icmp eq i64 %11, 1
+  br i1 %or.cond68, label %_ZN22reed_solomon_novelpoly4util13is_power_of_217h2c7ff0eaf50d5901E.exit43, label %bb13
+
+bb13:                                             ; preds = %bb9
+  %_2.not.i35.not = icmp eq i64 %bytes.1, 0
+  %12 = tail call i64 @llvm.ctlz.i64(i64 %bytes.1, i1 true), !range !52
+  %13 = xor i64 %12, 63
+  %_0.0.i39 = select i1 %_2.not.i35.not, i64 0, i64 %13
+  %upper_len5 = shl nuw i64 1, %_0.0.i39
+  %_27.not = icmp ult i64 %upper_len5, %bytes.1
+  br i1 %_27.not, label %bb18, label %_ZN22reed_solomon_novelpoly4util13is_power_of_217h2c7ff0eaf50d5901E.exit43
+
+bb18:                                             ; preds = %bb13
+  %14 = shl i64 2, %_0.0.i39
+  %_2.not.i40 = icmp eq i64 %_0.0.i39, 63
+  br i1 %_2.not.i40, label %bb21, label %_ZN22reed_solomon_novelpoly4util13is_power_of_217h2c7ff0eaf50d5901E.exit43
+
+_ZN22reed_solomon_novelpoly4util13is_power_of_217h2c7ff0eaf50d5901E.exit43: ; preds = %bb9, %bb13, %bb18
+  %upper_len.057 = phi i64 [ %14, %bb18 ], [ %upper_len5, %bb13 ], [ %bytes.1, %bb9 ]
+  %15 = tail call i64 @llvm.ctpop.i64(i64 %upper_len.057), !range !52
+  %16 = icmp ult i64 %15, 2
+  br i1 %16, label %bb20, label %bb21
+
+bb21:                                             ; preds = %bb18, %_ZN22reed_solomon_novelpoly4util13is_power_of_217h2c7ff0eaf50d5901E.exit43
+; call core::panicking::panic
+  tail call void @_ZN4core9panicking5panic17hcad0f3a89a1b36aaE(ptr noalias noundef nonnull readonly align 1 @alloc_6b646b3f0eda2eb27e1021d407a59dad, i64 noundef 42, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_b28babb5c9f9e0beede2b4b1c53ac45d) #25
+  unreachable
+
+bb20:                                             ; preds = %_ZN22reed_solomon_novelpoly4util13is_power_of_217h2c7ff0eaf50d5901E.exit43
+  %_31.not = icmp ult i64 %upper_len.057, %bytes.1
+  br i1 %_31.not, label %bb23, label %bb3.i.i
+
+bb23:                                             ; preds = %bb20
+; call core::panicking::panic
+  tail call void @_ZN4core9panicking5panic17hcad0f3a89a1b36aaE(ptr noalias noundef nonnull readonly align 1 @alloc_50aa0f52b05483e660bdef6f254a28c2, i64 noundef 40, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_c7855daad1c0ba5e271eb1d5c93bff6e) #25
+  unreachable
+
+bb3.i.i:                                          ; preds = %bb20
+  %_4.i.i.i = icmp ugt i64 %0, 4611686018427387903
+  %array_size.i.i.i = shl i64 %0, 1
+  br i1 %_4.i.i.i, label %bb4.i.i, label %bb8.i.i
+
+bb4.i.i:                                          ; preds = %bb3.i.i
+; call alloc::raw_vec::capacity_overflow
+  tail call void @_ZN5alloc7raw_vec17capacity_overflow17h7596d82a86d51ab8E() #25, !noalias !178
+  unreachable
+
+bb8.i.i:                                          ; preds = %bb3.i.i
+  %17 = icmp eq i64 %array_size.i.i.i, 0
+  br i1 %17, label %"_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h1acfcdac819baef8E.exit.i.i", label %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i"
+
+"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i": ; preds = %bb8.i.i
+  %18 = load volatile i8, ptr @__rust_no_alloc_shim_is_unstable, align 1, !noalias !178
+  %19 = tail call noundef align 2 ptr @__rust_alloc(i64 noundef %array_size.i.i.i, i64 noundef 2) #24, !noalias !178
+  %20 = icmp eq ptr %19, null
+  br i1 %20, label %bb12.i.i, label %"_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h1acfcdac819baef8E.exit.i.i"
+
+bb12.i.i:                                         ; preds = %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i"
+; call alloc::alloc::handle_alloc_error
+  tail call void @_ZN5alloc5alloc18handle_alloc_error17h6c194ef306599f55E(i64 noundef 2, i64 noundef %array_size.i.i.i) #25, !noalias !178
+  unreachable
+
+"_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h1acfcdac819baef8E.exit.i.i": ; preds = %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i", %bb8.i.i
+  %_0.sroa.0.0.i.i = phi ptr [ %19, %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i" ], [ inttoptr (i64 2 to ptr), %bb8.i.i ]
+  %_3018.i.i = icmp ugt i64 %0, 1
+  br i1 %_3018.i.i, label %bb5.thread.i.i, label %"_ZN62_$LT$T$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h9bf62ff95364ce18E.exit"
+
+bb5.thread.i.i:                                   ; preds = %"_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h1acfcdac819baef8E.exit.i.i"
+  %21 = add nsw i64 %array_size.i.i.i, -2
+  tail call void @llvm.memset.p0.i64(ptr nonnull align 2 %_0.sroa.0.0.i.i, i8 0, i64 %21, i1 false), !noalias !181
+  %scevgep.i.i = getelementptr i8, ptr %_0.sroa.0.0.i.i, i64 %21
+  br label %"_ZN62_$LT$T$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h9bf62ff95364ce18E.exit"
+
+"_ZN62_$LT$T$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h9bf62ff95364ce18E.exit": ; preds = %"_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h1acfcdac819baef8E.exit.i.i", %bb5.thread.i.i
+  %ptr.0.lcssa28.i.i = phi ptr [ %scevgep.i.i, %bb5.thread.i.i ], [ %_0.sroa.0.0.i.i, %"_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h1acfcdac819baef8E.exit.i.i" ]
+  store i16 0, ptr %ptr.0.lcssa28.i.i, align 2, !noalias !181
+  %_9470.not = icmp ult i64 %bytes.1, 2
+  br i1 %_9470.not, label %bb27, label %bb25.lr.ph
+
+bb25.lr.ph:                                       ; preds = %"_ZN62_$LT$T$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h9bf62ff95364ce18E.exit"
+  %_3715 = lshr i64 %bytes.1, 1
+  %22 = icmp ne ptr %_0.sroa.0.0.i.i, null
+  tail call void @llvm.assume(i1 %22)
+  br label %bb25
+
+bb43:                                             ; preds = %cleanup7, %cleanup
+  %.pn = phi { ptr, i32 } [ %23, %cleanup ], [ %28, %cleanup7 ]
+; call core::ptr::drop_in_place<core::iter::adapters::take::Take<alloc::vec::into_iter::IntoIter<reed_solomon_novelpoly::field::f2e16::Additive>>>
+  call fastcc void @"_ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E"(ptr %_0.sroa.0.0.i.i, i64 %0) #26
+  resume { ptr, i32 } %.pn
+
+cleanup:                                          ; preds = %bb34, %panic.i.i, %bb12.i.i.i
+  %23 = landingpad { ptr, i32 }
+          cleanup
+  br label %bb43
+
+bb27:                                             ; preds = %bb32, %"_ZN62_$LT$T$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h9bf62ff95364ce18E.exit"
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %elm_len)
+  store i64 %0, ptr %elm_len, align 8
+  %_63 = load i64, ptr %n, align 8, !noundef !3
+  %_61 = icmp eq i64 %_63, %0
+  br i1 %_61, label %bb3.i.i.i, label %bb34
+
+bb25:                                             ; preds = %bb25.lr.ph, %bb32
+  %iter.sroa.0.071 = phi i64 [ 0, %bb25.lr.ph ], [ %_0.i, %bb32 ]
+  %_0.i = add nuw nsw i64 %iter.sroa.0.071, 1
+  %index = shl nuw i64 %iter.sroa.0.071, 1
+  %_101.not = icmp ult i64 %index, %bytes.1
+  br i1 %_101.not, label %bb54, label %bb28
+
+bb34:                                             ; preds = %bb27
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_65)
+  store ptr null, ptr %_65, align 8
+; invoke core::panicking::assert_failed
+  invoke fastcc void @_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E(ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %elm_len, ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %n, ptr noalias nocapture noundef nonnull align 8 dereferenceable(48) %_65, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_5a428aa0a8304ef609a21a89fc12e259) #25
+          to label %unreachable unwind label %cleanup
+
+bb3.i.i.i:                                        ; preds = %bb27
+  %24 = icmp ne ptr %_0.sroa.0.0.i.i, null
+  tail call void @llvm.assume(i1 %24)
+  br i1 %17, label %bb39, label %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i.i"
+
+"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i.i": ; preds = %bb3.i.i.i
+  %25 = load volatile i8, ptr @__rust_no_alloc_shim_is_unstable, align 1, !noalias !184
+  %26 = tail call noundef align 2 ptr @__rust_alloc(i64 noundef %array_size.i.i.i, i64 noundef 2) #24, !noalias !184
+  %27 = icmp eq ptr %26, null
+  br i1 %27, label %bb12.i.i.i, label %bb39
+
+bb12.i.i.i:                                       ; preds = %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i.i"
+; invoke alloc::alloc::handle_alloc_error
+  invoke void @_ZN5alloc5alloc18handle_alloc_error17h6c194ef306599f55E(i64 noundef 2, i64 noundef %array_size.i.i.i) #25
+          to label %.noexc45 unwind label %cleanup
+
+.noexc45:                                         ; preds = %bb12.i.i.i
+  unreachable
+
+unreachable:                                      ; preds = %bb34
+  unreachable
+
+cleanup7:                                         ; preds = %bb39
+  %28 = landingpad { ptr, i32 }
+          cleanup
+; call core::ptr::drop_in_place<core::iter::adapters::take::Take<alloc::vec::into_iter::IntoIter<reed_solomon_novelpoly::field::f2e16::Additive>>>
+  tail call fastcc void @"_ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E"(ptr nonnull %_0.sroa.0.0.i.i.i, i64 %0) #26
+  br label %bb43
+
+bb39:                                             ; preds = %bb3.i.i.i, %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i.i"
+  %_0.sroa.0.0.i.i.i = phi ptr [ inttoptr (i64 2 to ptr), %bb3.i.i.i ], [ %26, %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i.i" ]
+  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 2 %_0.sroa.0.0.i.i.i, ptr nonnull align 2 %_0.sroa.0.0.i.i, i64 %array_size.i.i.i, i1 false)
+; invoke reed_solomon_novelpoly::field::f2e16::encode_low_plain
+  invoke void @_ZN22reed_solomon_novelpoly5field5f2e1616encode_low_plain17h428b65c9fd426544E(ptr noalias noundef nonnull readonly align 2 %_0.sroa.0.0.i.i, i64 noundef %0, i64 noundef %k, ptr noalias noundef nonnull align 2 %_0.sroa.0.0.i.i.i, i64 noundef %0, i64 noundef %0)
+          to label %"_ZN4core3ptr90drop_in_place$LT$alloc..vec..Vec$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$17hf0e8a0582fb470c7E.exit" unwind label %cleanup7
+
+"_ZN4core3ptr90drop_in_place$LT$alloc..vec..Vec$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$17hf0e8a0582fb470c7E.exit": ; preds = %bb39
+  %29 = getelementptr inbounds %"core::result::Result<alloc::vec::Vec<field::f2e16::Additive>, errors::Error>::Ok", ptr %_0, i64 0, i32 1
+  store ptr %_0.sroa.0.0.i.i.i, ptr %29, align 8
+  %_85.sroa.4.0..sroa_idx = getelementptr inbounds %"core::result::Result<alloc::vec::Vec<field::f2e16::Additive>, errors::Error>::Ok", ptr %_0, i64 0, i32 1, i32 0, i32 1
+  store i64 %0, ptr %_85.sroa.4.0..sroa_idx, align 8
+  %_85.sroa.5.0..sroa_idx = getelementptr inbounds %"core::result::Result<alloc::vec::Vec<field::f2e16::Additive>, errors::Error>::Ok", ptr %_0, i64 0, i32 1, i32 1
+  store i64 %0, ptr %_85.sroa.5.0..sroa_idx, align 8
+  store i64 7, ptr %_0, align 8
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %elm_len)
+  tail call void @__rust_dealloc(ptr noundef nonnull %_0.sroa.0.0.i.i, i64 noundef %array_size.i.i.i, i64 noundef 2) #24
+  ret void
+
+bb54:                                             ; preds = %bb25
+  %_104 = getelementptr inbounds i8, ptr %bytes.0, i64 %index
+  %v = load i8, ptr %_104, align 1, !noundef !3
+  br label %bb28
+
+bb28:                                             ; preds = %bb25, %bb54
+  %.self1.sroa.5.1 = phi i8 [ 0, %bb25 ], [ %v, %bb54 ]
+  %index8 = or i64 %index, 1
+  %_112.not = icmp ult i64 %index8, %bytes.1
+  br i1 %_112.not, label %bb61, label %bb30
+
+bb61:                                             ; preds = %bb28
+  %_115 = getelementptr inbounds i8, ptr %bytes.0, i64 %index8
+  %v9 = load i8, ptr %_115, align 1, !noundef !3
+  br label %bb30
+
+bb30:                                             ; preds = %bb28, %bb61
+  %.self3.sroa.5.1 = phi i8 [ 0, %bb28 ], [ %v9, %bb61 ]
+  %exitcond.not = icmp eq i64 %iter.sroa.0.071, %0
+  br i1 %exitcond.not, label %panic.i.i, label %bb32, !prof !59
+
+panic.i.i:                                        ; preds = %bb30
+; invoke core::panicking::panic_bounds_check
+  invoke void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %0, i64 noundef %0, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_cc0d035f505129e2d4008403bbcd8504) #25
+          to label %.noexc46 unwind label %cleanup
+
+.noexc46:                                         ; preds = %panic.i.i
+  unreachable
+
+bb32:                                             ; preds = %bb30
+  %_0.i.i = getelementptr inbounds [0 x i16], ptr %_0.sroa.0.0.i.i, i64 0, i64 %iter.sroa.0.071
+  %bytes.sroa.4.0.insert.ext = zext i8 %.self3.sroa.5.1 to i16
+  %bytes.sroa.4.0.insert.shift = shl nuw i16 %bytes.sroa.4.0.insert.ext, 8
+  %bytes.sroa.0.0.insert.ext = zext i8 %.self1.sroa.5.1 to i16
+  %bytes.sroa.0.0.insert.insert = or i16 %bytes.sroa.4.0.insert.shift, %bytes.sroa.0.0.insert.ext
+  %30 = tail call i16 @llvm.bswap.i16(i16 %bytes.sroa.0.0.insert.insert)
+  store i16 %30, ptr %_0.i.i, align 2
+  %exitcond73.not = icmp eq i64 %_0.i, %_3715
+  br i1 %exitcond73.not, label %bb27, label %bb25
+}
+
+; reed_solomon_novelpoly::field::f2e16::reconstruct_sub
+; Function Attrs: nonlazybind uwtable
+define void @_ZN22reed_solomon_novelpoly5field5f2e1615reconstruct_sub17h6cfdcf216ebb8331E(ptr noalias nocapture noundef writeonly sret(%"core::result::Result<alloc::vec::Vec<u8>, errors::Error>") align 8 dereferenceable(32) %_0, ptr noalias nocapture noundef nonnull readonly align 2 %codewords.0, i64 noundef %codewords.1, ptr noalias nocapture noundef nonnull readonly align 1 %erasures.0, i64 noundef %erasures.1, i64 noundef %0, i64 noundef %k, ptr noalias nocapture noundef readonly align 2 dereferenceable(131072) %error_poly) unnamed_addr #0 personality ptr @rust_eh_personality {
+start:
+  %_24.i = alloca %"core::option::Option<core::fmt::Arguments<'_>>", align 8
+  %_18.i = alloca i64, align 8
+  %n.i = alloca i64, align 8
+  %recovered_bytes = alloca %"alloc::vec::Vec<u8>", align 8
+  %_43 = alloca %"core::option::Option<core::fmt::Arguments<'_>>", align 8
+  %_36 = alloca i64, align 8
+  %_22 = alloca %"core::option::Option<core::fmt::Arguments<'_>>", align 8
+  %_16 = alloca i64, align 8
+  %_13 = alloca %"core::fmt::Arguments<'_>", align 8
+  %_9 = alloca %"core::fmt::Arguments<'_>", align 8
+  %n = alloca i64, align 8
+  store i64 %0, ptr %n, align 8
+  %1 = tail call i64 @llvm.ctpop.i64(i64 %0), !range !52
+  %or.cond = icmp eq i64 %1, 1
+  br i1 %or.cond, label %bb2, label %bb3
+
+bb3:                                              ; preds = %start
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_9)
+  store ptr @alloc_f4add719eaa34a8271973689f21b3b52, ptr %_9, align 8
+  %2 = getelementptr inbounds { ptr, i64 }, ptr %_9, i64 0, i32 1
+  store i64 1, ptr %2, align 8
+  %3 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_9, i64 0, i32 2
+  store ptr null, ptr %3, align 8
+  %4 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_9, i64 0, i32 1
+  store ptr @alloc_513570631223a12912d85da2bec3b15a, ptr %4, align 8
+  %5 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_9, i64 0, i32 1, i32 1
+  store i64 0, ptr %5, align 8
+; call core::panicking::panic_fmt
+  call void @_ZN4core9panicking9panic_fmt17h979245e2fdb2fabdE(ptr noalias nocapture noundef nonnull readonly align 8 dereferenceable(48) %_9, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_ec76c5ce7bf7f7a58b63dbd8f6e3ee3b) #25
+  unreachable
+
+bb2:                                              ; preds = %start
+  %_2.not.i25.not = icmp eq i64 %k, 0
+  %6 = tail call i64 @llvm.ctpop.i64(i64 %k), !range !52
+  %or.cond76 = icmp eq i64 %6, 1
+  br i1 %or.cond76, label %bb5, label %bb6
+
+bb6:                                              ; preds = %bb2
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_13)
+  store ptr @alloc_056501d170f1fadc090e6d380d80cd04, ptr %_13, align 8
+  %7 = getelementptr inbounds { ptr, i64 }, ptr %_13, i64 0, i32 1
+  store i64 1, ptr %7, align 8
+  %8 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_13, i64 0, i32 2
+  store ptr null, ptr %8, align 8
+  %9 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_13, i64 0, i32 1
+  store ptr @alloc_513570631223a12912d85da2bec3b15a, ptr %9, align 8
+  %10 = getelementptr inbounds %"core::fmt::Arguments<'_>", ptr %_13, i64 0, i32 1, i32 1
+  store i64 0, ptr %10, align 8
+; call core::panicking::panic_fmt
+  call void @_ZN4core9panicking9panic_fmt17h979245e2fdb2fabdE(ptr noalias nocapture noundef nonnull readonly align 8 dereferenceable(48) %_13, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_a1459dd60c986ead9664c6b690ef7bc0) #25
+  unreachable
+
+bb5:                                              ; preds = %bb2
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_16)
+  store i64 %codewords.1, ptr %_16, align 8
+  %_18 = icmp eq i64 %0, %codewords.1
+  br i1 %_18, label %bb7, label %bb8
+
+bb8:                                              ; preds = %bb5
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_22)
+  store ptr null, ptr %_22, align 8
+; call core::panicking::assert_failed
+  call fastcc void @_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E(ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %_16, ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %n, ptr noalias nocapture noundef nonnull align 8 dereferenceable(48) %_22, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_ad1d5547ace4f2eefcadb03b7bffa26a) #25
+  unreachable
+
+bb7:                                              ; preds = %bb5
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_16)
+  %_2411 = lshr i64 %0, 1
+  %_23.not = icmp ult i64 %_2411, %k
+  br i1 %_23.not, label %bb10, label %bb3.i.i
+
+bb10:                                             ; preds = %bb7
+; call core::panicking::panic
+  tail call void @_ZN4core9panicking5panic17hcad0f3a89a1b36aaE(ptr noalias noundef nonnull readonly align 1 @alloc_0c0438671d5b44eff5edb13c53e898ef, i64 noundef 28, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_9ebe8e0cbac236667465f9f6192fa042) #25
+  unreachable
+
+bb3.i.i:                                          ; preds = %bb7
+  %_4.i.i.i = icmp ugt i64 %k, 4611686018427387903
+  %array_size.i.i.i = shl i64 %k, 1
+  br i1 %_4.i.i.i, label %bb4.i.i, label %bb8.i.i
+
+bb4.i.i:                                          ; preds = %bb3.i.i
+; call alloc::raw_vec::capacity_overflow
+  tail call void @_ZN5alloc7raw_vec17capacity_overflow17h7596d82a86d51ab8E() #25, !noalias !190
+  unreachable
+
+bb8.i.i:                                          ; preds = %bb3.i.i
+  %11 = icmp eq i64 %array_size.i.i.i, 0
+  br i1 %11, label %"_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h1acfcdac819baef8E.exit.i.i", label %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i"
+
+"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i": ; preds = %bb8.i.i
+  %12 = load volatile i8, ptr @__rust_no_alloc_shim_is_unstable, align 1, !noalias !190
+  %13 = tail call noundef align 2 ptr @__rust_alloc(i64 noundef %array_size.i.i.i, i64 noundef 2) #24, !noalias !190
+  %14 = icmp eq ptr %13, null
+  br i1 %14, label %bb12.i.i, label %"_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h1acfcdac819baef8E.exit.i.i"
+
+bb12.i.i:                                         ; preds = %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i"
+; call alloc::alloc::handle_alloc_error
+  tail call void @_ZN5alloc5alloc18handle_alloc_error17h6c194ef306599f55E(i64 noundef 2, i64 noundef %array_size.i.i.i) #25, !noalias !190
+  unreachable
+
+"_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h1acfcdac819baef8E.exit.i.i": ; preds = %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i", %bb8.i.i
+  %_0.sroa.0.0.i.i = phi ptr [ %13, %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i" ], [ inttoptr (i64 2 to ptr), %bb8.i.i ]
+  %_3018.i.i = icmp ugt i64 %k, 1
+  br i1 %_3018.i.i, label %bb5.thread.i.i, label %"_ZN62_$LT$T$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h9bf62ff95364ce18E.exit"
+
+bb5.thread.i.i:                                   ; preds = %"_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h1acfcdac819baef8E.exit.i.i"
+  %15 = add nsw i64 %array_size.i.i.i, -2
+  tail call void @llvm.memset.p0.i64(ptr nonnull align 2 %_0.sroa.0.0.i.i, i8 0, i64 %15, i1 false), !noalias !193
+  %scevgep.i.i = getelementptr i8, ptr %_0.sroa.0.0.i.i, i64 %15
+  br label %"_ZN62_$LT$T$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h9bf62ff95364ce18E.exit"
+
+"_ZN62_$LT$T$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h9bf62ff95364ce18E.exit": ; preds = %"_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h1acfcdac819baef8E.exit.i.i", %bb5.thread.i.i
+  %ptr.0.lcssa28.i.i = phi ptr [ %scevgep.i.i, %bb5.thread.i.i ], [ %_0.sroa.0.0.i.i, %"_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h1acfcdac819baef8E.exit.i.i" ]
+  store i16 0, ptr %ptr.0.lcssa28.i.i, align 2, !noalias !193
+  %16 = icmp eq i64 %0, 0
+  br i1 %16, label %bb32, label %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i.i"
+
+"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i.i": ; preds = %"_ZN62_$LT$T$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h9bf62ff95364ce18E.exit"
+  %array_size.i.i.i.i = shl nuw i64 %0, 1
+  %17 = load volatile i8, ptr @__rust_no_alloc_shim_is_unstable, align 1, !noalias !196
+  %18 = tail call noundef align 2 ptr @__rust_alloc(i64 noundef %array_size.i.i.i.i, i64 noundef 2) #24, !noalias !196
+  %19 = icmp eq ptr %18, null
+  br i1 %19, label %bb12.i.i.i, label %bb9.i.i.i.i.i.i.i.i.i.preheader
+
+bb9.i.i.i.i.i.i.i.i.i.preheader:                  ; preds = %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i.i"
+  %20 = icmp ne ptr %_0.sroa.0.0.i.i, null
+  %xtraiter = and i64 %0, 1
+  %21 = icmp eq i64 %0, 1
+  br i1 %21, label %bb32.loopexit.unr-lcssa, label %bb9.i.i.i.i.i.i.i.i.i.preheader.new
+
+bb9.i.i.i.i.i.i.i.i.i.preheader.new:              ; preds = %bb9.i.i.i.i.i.i.i.i.i.preheader
+  %unroll_iter = and i64 %0, -2
+  br label %bb9.i.i.i.i.i.i.i.i.i
+
+bb12.i.i.i:                                       ; preds = %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i.i.i"
+; invoke alloc::alloc::handle_alloc_error
+  invoke void @_ZN5alloc5alloc18handle_alloc_error17h6c194ef306599f55E(i64 noundef 2, i64 noundef %array_size.i.i.i.i) #25
+          to label %.noexc unwind label %bb30.thread
+
+.noexc:                                           ; preds = %bb12.i.i.i
+  unreachable
+
+bb9.i.i.i.i.i.i.i.i.i:                            ; preds = %bb10.i.i.i.i.i.i.i.i.i.1, %bb9.i.i.i.i.i.i.i.i.i.preheader.new
+  %22 = phi i64 [ 0, %bb9.i.i.i.i.i.i.i.i.i.preheader.new ], [ %26, %bb10.i.i.i.i.i.i.i.i.i.1 ]
+  %niter = phi i64 [ 0, %bb9.i.i.i.i.i.i.i.i.i.preheader.new ], [ %niter.next.1, %bb10.i.i.i.i.i.i.i.i.i.1 ]
+  %_54.i.i.i.i.i.i.i.i.i = getelementptr inbounds { i16, i16 }, ptr %codewords.0, i64 %22
+  %_54.val.i.i.i.i.i.i.i.i.i = load i16, ptr %_54.i.i.i.i.i.i.i.i.i, align 2, !range !203, !noalias !204, !noundef !3
+  %23 = getelementptr i8, ptr %_54.i.i.i.i.i.i.i.i.i, i64 2
+  %_54.val23.i.i.i.i.i.i.i.i.i = load i16, ptr %23, align 2, !noalias !204
+  %.not.i.i.i.i.i.i.i.i.i.i.i.i = icmp eq i16 %_54.val.i.i.i.i.i.i.i.i.i, 0
+  %_0.sroa.3.0.i.i.i.i.i.i.i.i.i.i.i.i = select i1 %.not.i.i.i.i.i.i.i.i.i.i.i.i, i16 0, i16 %_54.val23.i.i.i.i.i.i.i.i.i
+  %_4.i.i.i.i.i.i.i.i.i.i.i.i.i = icmp ult i64 %22, %k
+  br i1 %_4.i.i.i.i.i.i.i.i.i.i.i.i.i, label %"_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hd49400a5f0f9c2deE.exit.i.i.i.i.i.i.i.i.i.i.i.i.i", label %bb10.i.i.i.i.i.i.i.i.i
+
+"_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hd49400a5f0f9c2deE.exit.i.i.i.i.i.i.i.i.i.i.i.i.i": ; preds = %bb9.i.i.i.i.i.i.i.i.i
+  tail call void @llvm.assume(i1 %20)
+  %_0.i.i.i.i.i.i.i.i.i.i.i.i.i.i.i = getelementptr inbounds [0 x i16], ptr %_0.sroa.0.0.i.i, i64 0, i64 %22
+  store i16 %_0.sroa.3.0.i.i.i.i.i.i.i.i.i.i.i.i, ptr %_0.i.i.i.i.i.i.i.i.i.i.i.i.i.i.i, align 2, !noalias !225
+  br label %bb10.i.i.i.i.i.i.i.i.i
+
+bb10.i.i.i.i.i.i.i.i.i:                           ; preds = %"_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hd49400a5f0f9c2deE.exit.i.i.i.i.i.i.i.i.i.i.i.i.i", %bb9.i.i.i.i.i.i.i.i.i
+  %dst.i.i.i.i.i.i.i.i.i.i.i.i.i.i = getelementptr inbounds i16, ptr %18, i64 %22
+  store i16 %_0.sroa.3.0.i.i.i.i.i.i.i.i.i.i.i.i, ptr %dst.i.i.i.i.i.i.i.i.i.i.i.i.i.i, align 2, !noalias !232
+  %24 = or i64 %22, 1
+  %_54.i.i.i.i.i.i.i.i.i.1 = getelementptr inbounds { i16, i16 }, ptr %codewords.0, i64 %24
+  %_54.val.i.i.i.i.i.i.i.i.i.1 = load i16, ptr %_54.i.i.i.i.i.i.i.i.i.1, align 2, !range !203, !noalias !204, !noundef !3
+  %25 = getelementptr i8, ptr %_54.i.i.i.i.i.i.i.i.i.1, i64 2
+  %_54.val23.i.i.i.i.i.i.i.i.i.1 = load i16, ptr %25, align 2, !noalias !204
+  %.not.i.i.i.i.i.i.i.i.i.i.i.i.1 = icmp eq i16 %_54.val.i.i.i.i.i.i.i.i.i.1, 0
+  %_0.sroa.3.0.i.i.i.i.i.i.i.i.i.i.i.i.1 = select i1 %.not.i.i.i.i.i.i.i.i.i.i.i.i.1, i16 0, i16 %_54.val23.i.i.i.i.i.i.i.i.i.1
+  %_4.i.i.i.i.i.i.i.i.i.i.i.i.i.1 = icmp ult i64 %24, %k
+  br i1 %_4.i.i.i.i.i.i.i.i.i.i.i.i.i.1, label %"_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hd49400a5f0f9c2deE.exit.i.i.i.i.i.i.i.i.i.i.i.i.i.1", label %bb10.i.i.i.i.i.i.i.i.i.1
+
+"_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hd49400a5f0f9c2deE.exit.i.i.i.i.i.i.i.i.i.i.i.i.i.1": ; preds = %bb10.i.i.i.i.i.i.i.i.i
+  tail call void @llvm.assume(i1 %20)
+  %_0.i.i.i.i.i.i.i.i.i.i.i.i.i.i.i.1 = getelementptr inbounds [0 x i16], ptr %_0.sroa.0.0.i.i, i64 0, i64 %24
+  store i16 %_0.sroa.3.0.i.i.i.i.i.i.i.i.i.i.i.i.1, ptr %_0.i.i.i.i.i.i.i.i.i.i.i.i.i.i.i.1, align 2, !noalias !225
+  br label %bb10.i.i.i.i.i.i.i.i.i.1
+
+bb10.i.i.i.i.i.i.i.i.i.1:                         ; preds = %"_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hd49400a5f0f9c2deE.exit.i.i.i.i.i.i.i.i.i.i.i.i.i.1", %bb10.i.i.i.i.i.i.i.i.i
+  %dst.i.i.i.i.i.i.i.i.i.i.i.i.i.i.1 = getelementptr inbounds i16, ptr %18, i64 %24
+  store i16 %_0.sroa.3.0.i.i.i.i.i.i.i.i.i.i.i.i.1, ptr %dst.i.i.i.i.i.i.i.i.i.i.i.i.i.i.1, align 2, !noalias !232
+  %26 = add nuw i64 %22, 2
+  %niter.next.1 = add i64 %niter, 2
+  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
+  br i1 %niter.ncmp.1, label %bb32.loopexit.unr-lcssa, label %bb9.i.i.i.i.i.i.i.i.i
+
+bb30.thread:                                      ; preds = %bb12.i.i.i
+  %27 = landingpad { ptr, i32 }
+          cleanup
+  br label %bb29
+
+bb32.loopexit.unr-lcssa:                          ; preds = %bb10.i.i.i.i.i.i.i.i.i.1, %bb9.i.i.i.i.i.i.i.i.i.preheader
+  %.unr = phi i64 [ 0, %bb9.i.i.i.i.i.i.i.i.i.preheader ], [ %26, %bb10.i.i.i.i.i.i.i.i.i.1 ]
+  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
+  br i1 %lcmp.mod.not, label %bb32, label %bb9.i.i.i.i.i.i.i.i.i.epil
+
+bb9.i.i.i.i.i.i.i.i.i.epil:                       ; preds = %bb32.loopexit.unr-lcssa
+  %_54.i.i.i.i.i.i.i.i.i.epil = getelementptr inbounds { i16, i16 }, ptr %codewords.0, i64 %.unr
+  %_54.val.i.i.i.i.i.i.i.i.i.epil = load i16, ptr %_54.i.i.i.i.i.i.i.i.i.epil, align 2, !range !203, !noalias !204, !noundef !3
+  %28 = getelementptr i8, ptr %_54.i.i.i.i.i.i.i.i.i.epil, i64 2
+  %_54.val23.i.i.i.i.i.i.i.i.i.epil = load i16, ptr %28, align 2, !noalias !204
+  %.not.i.i.i.i.i.i.i.i.i.i.i.i.epil = icmp eq i16 %_54.val.i.i.i.i.i.i.i.i.i.epil, 0
+  %_0.sroa.3.0.i.i.i.i.i.i.i.i.i.i.i.i.epil = select i1 %.not.i.i.i.i.i.i.i.i.i.i.i.i.epil, i16 0, i16 %_54.val23.i.i.i.i.i.i.i.i.i.epil
+  %_4.i.i.i.i.i.i.i.i.i.i.i.i.i.epil = icmp ult i64 %.unr, %k
+  br i1 %_4.i.i.i.i.i.i.i.i.i.i.i.i.i.epil, label %"_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hd49400a5f0f9c2deE.exit.i.i.i.i.i.i.i.i.i.i.i.i.i.epil", label %bb10.i.i.i.i.i.i.i.i.i.epil
+
+"_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hd49400a5f0f9c2deE.exit.i.i.i.i.i.i.i.i.i.i.i.i.i.epil": ; preds = %bb9.i.i.i.i.i.i.i.i.i.epil
+  tail call void @llvm.assume(i1 %20)
+  %_0.i.i.i.i.i.i.i.i.i.i.i.i.i.i.i.epil = getelementptr inbounds [0 x i16], ptr %_0.sroa.0.0.i.i, i64 0, i64 %.unr
+  store i16 %_0.sroa.3.0.i.i.i.i.i.i.i.i.i.i.i.i.epil, ptr %_0.i.i.i.i.i.i.i.i.i.i.i.i.i.i.i.epil, align 2, !noalias !225
+  br label %bb10.i.i.i.i.i.i.i.i.i.epil
+
+bb10.i.i.i.i.i.i.i.i.i.epil:                      ; preds = %"_ZN84_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..index..IndexMut$LT$I$GT$$GT$9index_mut17hd49400a5f0f9c2deE.exit.i.i.i.i.i.i.i.i.i.i.i.i.i.epil", %bb9.i.i.i.i.i.i.i.i.i.epil
+  %dst.i.i.i.i.i.i.i.i.i.i.i.i.i.i.epil = getelementptr inbounds i16, ptr %18, i64 %.unr
+  store i16 %_0.sroa.3.0.i.i.i.i.i.i.i.i.i.i.i.i.epil, ptr %dst.i.i.i.i.i.i.i.i.i.i.i.i.i.i.epil, align 2, !noalias !232
+  br label %bb32
+
+bb32:                                             ; preds = %bb10.i.i.i.i.i.i.i.i.i.epil, %bb32.loopexit.unr-lcssa, %"_ZN62_$LT$T$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h9bf62ff95364ce18E.exit"
+  %_0.sroa.0.0.i10.i.i = phi ptr [ inttoptr (i64 2 to ptr), %"_ZN62_$LT$T$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h9bf62ff95364ce18E.exit" ], [ %18, %bb32.loopexit.unr-lcssa ], [ %18, %bb10.i.i.i.i.i.i.i.i.i.epil ]
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_36)
+  store i64 %0, ptr %_36, align 8
+  %_41 = load i64, ptr %n, align 8, !noundef !3
+  %_39 = icmp eq i64 %_41, %0
+  br i1 %_39, label %bb1.i30, label %bb12
+
+bb12:                                             ; preds = %bb32
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_43)
+  store ptr null, ptr %_43, align 8
+  br label %bb12.invoke
+
+bb12.invoke:                                      ; preds = %bb6.i, %bb12
+  %29 = phi ptr [ %_36, %bb12 ], [ %_18.i, %bb6.i ]
+  %30 = phi ptr [ %n, %bb12 ], [ %n.i, %bb6.i ]
+  %31 = phi ptr [ %_43, %bb12 ], [ %_24.i, %bb6.i ]
+  %32 = phi ptr [ @alloc_19bb0f56dfaa9426be6c2f395020994f, %bb12 ], [ @alloc_6c9d093d15a7e684f9061a9874ddc42a, %bb6.i ]
+; invoke core::panicking::assert_failed
+  invoke fastcc void @_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E(ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %29, ptr noalias noundef nonnull readonly align 8 dereferenceable(8) %30, ptr noalias nocapture noundef nonnull align 8 dereferenceable(48) %31, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %32) #25
+          to label %bb12.cont unwind label %bb27.thread
+
+bb12.cont:                                        ; preds = %bb12.invoke
+  unreachable
+
+bb27:                                             ; preds = %bb1.i.i.i.i.i.i.i
+  %33 = landingpad { ptr, i32 }
+          cleanup
+; call core::ptr::drop_in_place<core::iter::adapters::take::Take<alloc::vec::into_iter::IntoIter<reed_solomon_novelpoly::field::f2e16::Additive>>>
+  tail call fastcc void @"_ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E"(ptr nonnull %_0.sroa.0.0.i.i, i64 %k) #26, !noalias !237
+  %recovered_bytes.val = load ptr, ptr %recovered_bytes, align 8
+  %recovered_bytes.val14 = load i64, ptr %65, align 8
+; call core::ptr::drop_in_place<alloc::vec::Vec<u8>>
+  tail call fastcc void @"_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17h01244c5b000d92deE"(ptr %recovered_bytes.val, i64 %recovered_bytes.val14) #26
+; call core::ptr::drop_in_place<core::iter::adapters::take::Take<alloc::vec::into_iter::IntoIter<reed_solomon_novelpoly::field::f2e16::Additive>>>
+  tail call fastcc void @"_ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E"(ptr nonnull %_0.sroa.0.0.i10.i.i, i64 %0) #26
+  br label %bb28
+
+bb27.thread:                                      ; preds = %bb12.invoke, %panic1.i.i.invoke, %bb4.i, %bb10.i, %.noexc36, %.noexc37, %bb4.i44, %bb12.i
+  %34 = landingpad { ptr, i32 }
+          cleanup
+; call core::ptr::drop_in_place<core::iter::adapters::take::Take<alloc::vec::into_iter::IntoIter<reed_solomon_novelpoly::field::f2e16::Additive>>>
+  call fastcc void @"_ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E"(ptr nonnull %_0.sroa.0.0.i10.i.i, i64 %0) #26
+  br label %bb29
+
+bb1.i30:                                          ; preds = %bb32
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_36)
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !241)
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !244)
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !246)
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %n.i)
+  store i64 %0, ptr %n.i, align 8, !noalias !248
+  %_14.not.i = icmp ult i64 %0, %k
+  br i1 %_14.not.i, label %bb4.i, label %bb3.i
+
+bb4.i:                                            ; preds = %bb1.i30
+; invoke core::panicking::panic
+  invoke void @_ZN4core9panicking5panic17hcad0f3a89a1b36aaE(ptr noalias noundef nonnull readonly align 1 @alloc_cfd24519969ce7f2426e4afcc9af3a34, i64 noundef 36, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_cb46dca630ab2c227f72920456b77858) #25
+          to label %.noexc34 unwind label %bb27.thread
+
+.noexc34:                                         ; preds = %bb4.i
+  unreachable
+
+bb3.i:                                            ; preds = %bb1.i30
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_18.i), !noalias !248
+  store i64 %erasures.1, ptr %_18.i, align 8, !noalias !248
+  %_20.i = icmp eq i64 %0, %erasures.1
+  br i1 %_20.i, label %bb5.i, label %bb6.i
+
+bb6.i:                                            ; preds = %bb3.i
+  call void @llvm.lifetime.start.p0(i64 48, ptr nonnull %_24.i), !noalias !248
+  store ptr null, ptr %_24.i, align 8, !noalias !248
+  br label %bb12.invoke
+
+bb5.i:                                            ; preds = %bb3.i
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_18.i), !noalias !248
+  %_6842.not.i = icmp eq i64 %erasures.1, 0
+  br i1 %_6842.not.i, label %bb10.i, label %bb8.i
+
+bb10.i:                                           ; preds = %bb17.i, %bb5.i
+; invoke reed_solomon_novelpoly::field::f2e16::AdditiveFFT::inverse_afft
+  invoke void @_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT12inverse_afft17h4d44ad96eac2020aE(ptr noalias noundef nonnull readonly align 2 dereferenceable(524286) @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, ptr noalias noundef nonnull align 2 %_0.sroa.0.0.i10.i.i, i64 noundef %erasures.1, i64 noundef %erasures.1, i64 noundef 0)
+          to label %.noexc36 unwind label %bb27.thread
+
+.noexc36:                                         ; preds = %bb10.i
+; invoke reed_solomon_novelpoly::field::f2e16::formal_derivative
+  invoke void @_ZN22reed_solomon_novelpoly5field5f2e1617formal_derivative17hd0977a8b62f3cbd2E(ptr noalias noundef nonnull align 2 %_0.sroa.0.0.i10.i.i, i64 noundef %erasures.1, i64 noundef %erasures.1)
+          to label %.noexc37 unwind label %bb27.thread
+
+.noexc37:                                         ; preds = %.noexc36
+; invoke reed_solomon_novelpoly::field::f2e16::AdditiveFFT::afft
+  invoke void @_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT4afft17h48fb535882d96dacE(ptr noalias noundef nonnull readonly align 2 dereferenceable(524286) @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, ptr noalias noundef nonnull align 2 %_0.sroa.0.0.i10.i.i, i64 noundef %erasures.1, i64 noundef %erasures.1, i64 noundef 0)
+          to label %.noexc38 unwind label %bb27.thread
+
+.noexc38:                                         ; preds = %.noexc37
+  br i1 %_2.not.i25.not, label %_ZN22reed_solomon_novelpoly5field5f2e1611decode_main17ha50a767c35f0e241E.exit.thread, label %bb23.i
+
+_ZN22reed_solomon_novelpoly5field5f2e1611decode_main17ha50a767c35f0e241E.exit.thread: ; preds = %.noexc38
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %n.i)
+  br label %bb18.thread
+
+bb8.i:                                            ; preds = %bb5.i, %bb17.i
+  %iter.sroa.0.043.i = phi i64 [ %_0.i.i, %bb17.i ], [ 0, %bb5.i ]
+  %_0.i.i = add nuw i64 %iter.sroa.0.043.i, 1
+  %35 = getelementptr inbounds [0 x i8], ptr %erasures.0, i64 0, i64 %iter.sroa.0.043.i
+  %36 = load i8, ptr %35, align 1, !range !249, !alias.scope !244, !noalias !250, !noundef !3
+  %_33.not.i = icmp eq i8 %36, 0
+  br i1 %_33.not.i, label %bb13.i, label %bb17.i
+
+bb23.i:                                           ; preds = %.noexc38, %bb31.i
+  %iter2.sroa.0.045.i = phi i64 [ %_0.i31.i, %bb31.i ], [ 0, %.noexc38 ]
+  %_0.i31.i = add nuw i64 %iter2.sroa.0.045.i, 1
+  %37 = getelementptr inbounds [0 x i8], ptr %erasures.0, i64 0, i64 %iter2.sroa.0.045.i
+  %38 = load i8, ptr %37, align 1, !range !249, !alias.scope !244, !noalias !250, !noundef !3
+  %_57.not.i = icmp eq i8 %38, 0
+  br i1 %_57.not.i, label %bb31.i, label %bb26.i
+
+bb26.i:                                           ; preds = %bb23.i
+  %_65.i = icmp ult i64 %iter2.sroa.0.045.i, 65536
+  br i1 %_65.i, label %bb28.i, label %panic1.i.i.invoke, !prof !119
+
+bb31.i:                                           ; preds = %bb4.i.i32, %bb28.i, %bb23.i
+  %_56.0.i = phi i16 [ 0, %bb23.i ], [ %_16.i.i, %bb4.i.i32 ], [ 0, %bb28.i ]
+  %39 = getelementptr inbounds [0 x i16], ptr %_0.sroa.0.0.i10.i.i, i64 0, i64 %iter2.sroa.0.045.i
+  store i16 %_56.0.i, ptr %39, align 2, !alias.scope !241, !noalias !251
+  %exitcond50.not.i = icmp eq i64 %_0.i31.i, %k
+  br i1 %exitcond50.not.i, label %_ZN22reed_solomon_novelpoly5field5f2e1611decode_main17ha50a767c35f0e241E.exit, label %bb23.i
+
+bb28.i:                                           ; preds = %bb26.i
+  %40 = getelementptr inbounds [0 x i16], ptr %_0.sroa.0.0.i10.i.i, i64 0, i64 %iter2.sroa.0.045.i
+  %_60.i = load i16, ptr %40, align 2, !alias.scope !241, !noalias !251, !noundef !3
+  %41 = icmp eq i16 %_60.i, 0
+  br i1 %41, label %bb31.i, label %bb3.i.i31
+
+bb3.i.i31:                                        ; preds = %bb28.i
+  %42 = getelementptr inbounds [0 x i16], ptr %error_poly, i64 0, i64 %iter2.sroa.0.045.i
+  %_63.i = load i16, ptr %42, align 2, !alias.scope !246, !noalias !252, !noundef !3
+  %_8.i.i = zext i16 %_60.i to i64
+  %43 = getelementptr inbounds [65536 x i16], ptr @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, i64 0, i64 %_8.i.i
+  %_6.i.i = load i16, ptr %43, align 2, !noalias !248, !noundef !3
+  %_5.i.i = zext i16 %_6.i.i to i32
+  %_11.i.i = zext i16 %_63.i to i32
+  %log.i.i = add nuw nsw i32 %_5.i.i, %_11.i.i
+  %_14.i.i = and i32 %log.i.i, 65535
+  %_15.i.i = lshr i32 %log.i.i, 16
+  %offset.i.i = add nuw nsw i32 %_14.i.i, %_15.i.i
+  %_19.i.i = icmp ult i32 %offset.i.i, 65536
+  br i1 %_19.i.i, label %bb4.i.i32, label %panic1.i.i.invoke, !prof !119
+
+bb4.i.i32:                                        ; preds = %bb3.i.i31
+  %_18.i.i = zext i32 %offset.i.i to i64
+  %44 = getelementptr inbounds [65536 x i16], ptr getelementptr inbounds (<{ [524286 x i8] }>, ptr @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, i64 0, i32 0, i64 131072), i64 0, i64 %_18.i.i
+  %_16.i.i = load i16, ptr %44, align 2, !noalias !248, !noundef !3
+  br label %bb31.i
+
+panic1.i.i.invoke:                                ; preds = %bb13.i, %bb3.i15.i, %bb26.i, %bb3.i.i31
+  %45 = phi i64 [ 65536, %bb3.i.i31 ], [ %iter2.sroa.0.045.i, %bb26.i ], [ 65536, %bb3.i15.i ], [ %iter.sroa.0.043.i, %bb13.i ]
+  %46 = phi ptr [ @alloc_a00263033520f5f8af44777671310e84, %bb3.i.i31 ], [ @alloc_dada7e7c04778dc39b4b021b0b373ec8, %bb26.i ], [ @alloc_a00263033520f5f8af44777671310e84, %bb3.i15.i ], [ @alloc_7d61feebca8684fd32c8d767ae100ded, %bb13.i ]
+; invoke core::panicking::panic_bounds_check
+  invoke void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %45, i64 noundef 65536, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) %46) #25
+          to label %panic1.i.i.cont unwind label %bb27.thread
+
+panic1.i.i.cont:                                  ; preds = %panic1.i.i.invoke
+  unreachable
+
+bb13.i:                                           ; preds = %bb8.i
+  %_41.i = icmp ult i64 %iter.sroa.0.043.i, 65536
+  br i1 %_41.i, label %bb15.i, label %panic1.i.i.invoke, !prof !119
+
+bb15.i:                                           ; preds = %bb13.i
+  %47 = getelementptr inbounds [0 x i16], ptr %_0.sroa.0.0.i10.i.i, i64 0, i64 %iter.sroa.0.043.i
+  %_36.i = load i16, ptr %47, align 2, !alias.scope !241, !noalias !251, !noundef !3
+  %48 = icmp eq i16 %_36.i, 0
+  br i1 %48, label %bb17.i, label %bb3.i15.i
+
+bb3.i15.i:                                        ; preds = %bb15.i
+  %49 = getelementptr inbounds [0 x i16], ptr %error_poly, i64 0, i64 %iter.sroa.0.043.i
+  %_39.i = load i16, ptr %49, align 2, !alias.scope !246, !noalias !252, !noundef !3
+  %_8.i16.i = zext i16 %_36.i to i64
+  %50 = getelementptr inbounds [65536 x i16], ptr @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, i64 0, i64 %_8.i16.i
+  %_6.i17.i = load i16, ptr %50, align 2, !noalias !248, !noundef !3
+  %_5.i18.i = zext i16 %_6.i17.i to i32
+  %_11.i19.i = zext i16 %_39.i to i32
+  %log.i20.i = add nuw nsw i32 %_5.i18.i, %_11.i19.i
+  %_14.i21.i = and i32 %log.i20.i, 65535
+  %_15.i22.i = lshr i32 %log.i20.i, 16
+  %offset.i23.i = add nuw nsw i32 %_14.i21.i, %_15.i22.i
+  %_19.i24.i = icmp ult i32 %offset.i23.i, 65536
+  br i1 %_19.i24.i, label %bb4.i26.i, label %panic1.i.i.invoke, !prof !119
+
+bb4.i26.i:                                        ; preds = %bb3.i15.i
+  %_18.i27.i = zext i32 %offset.i23.i to i64
+  %51 = getelementptr inbounds [65536 x i16], ptr getelementptr inbounds (<{ [524286 x i8] }>, ptr @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, i64 0, i32 0, i64 131072), i64 0, i64 %_18.i27.i
+  %_16.i28.i = load i16, ptr %51, align 2, !noalias !248, !noundef !3
+  br label %bb17.i
+
+bb17.i:                                           ; preds = %bb4.i26.i, %bb15.i, %bb8.i
+  %_32.0.i = phi i16 [ 0, %bb8.i ], [ %_16.i28.i, %bb4.i26.i ], [ 0, %bb15.i ]
+  %52 = getelementptr inbounds [0 x i16], ptr %_0.sroa.0.0.i10.i.i, i64 0, i64 %iter.sroa.0.043.i
+  store i16 %_32.0.i, ptr %52, align 2, !alias.scope !241, !noalias !251
+  %exitcond.not.i = icmp eq i64 %_0.i.i, %erasures.1
+  br i1 %exitcond.not.i, label %bb10.i, label %bb8.i
+
+_ZN22reed_solomon_novelpoly5field5f2e1611decode_main17ha50a767c35f0e241E.exit: ; preds = %bb31.i
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %n.i)
+  br i1 %_2.not.i25.not, label %bb18.thread, label %bb16.lr.ph
+
+bb16.lr.ph:                                       ; preds = %_ZN22reed_solomon_novelpoly5field5f2e1611decode_main17ha50a767c35f0e241E.exit
+  %53 = icmp ne ptr %_0.sroa.0.0.i.i, null
+  %xtraiter107 = and i64 %k, 1
+  %54 = icmp eq i64 %k, 1
+  br i1 %54, label %bb18.unr-lcssa, label %bb16.lr.ph.new
+
+bb16.lr.ph.new:                                   ; preds = %bb16.lr.ph
+  %unroll_iter109 = and i64 %k, -2
+  br label %bb16
+
+bb18.thread:                                      ; preds = %_ZN22reed_solomon_novelpoly5field5f2e1611decode_main17ha50a767c35f0e241E.exit.thread, %_ZN22reed_solomon_novelpoly5field5f2e1611decode_main17ha50a767c35f0e241E.exit
+  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %recovered_bytes)
+  br label %bb24.thread
+
+bb18.unr-lcssa:                                   ; preds = %bb23.1, %bb16.lr.ph
+  %iter.sroa.0.083.unr = phi i64 [ 0, %bb16.lr.ph ], [ %_0.i.1, %bb23.1 ]
+  %lcmp.mod108.not = icmp eq i64 %xtraiter107, 0
+  br i1 %lcmp.mod108.not, label %bb18, label %bb16.epil
+
+bb16.epil:                                        ; preds = %bb18.unr-lcssa
+  %55 = getelementptr inbounds [0 x i8], ptr %erasures.0, i64 0, i64 %iter.sroa.0.083.unr
+  %56 = load i8, ptr %55, align 1, !range !249, !noundef !3
+  %_55.not.epil = icmp eq i8 %56, 0
+  br i1 %_55.not.epil, label %bb18, label %bb20.epil
+
+bb20.epil:                                        ; preds = %bb16.epil
+  %_0.i.i53.epil = getelementptr inbounds [0 x i16], ptr %_0.sroa.0.0.i10.i.i, i64 0, i64 %iter.sroa.0.083.unr
+  %_58.epil = load i16, ptr %_0.i.i53.epil, align 2, !noundef !3
+  tail call void @llvm.assume(i1 %53)
+  %_0.i.i57.epil = getelementptr inbounds [0 x i16], ptr %_0.sroa.0.0.i.i, i64 0, i64 %iter.sroa.0.083.unr
+  store i16 %_58.epil, ptr %_0.i.i57.epil, align 2
+  br label %bb18
+
+bb18:                                             ; preds = %bb16.epil, %bb20.epil, %bb18.unr-lcssa
+  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %recovered_bytes)
+  br i1 %_2.not.i25.not, label %bb24.thread, label %bb3.i43
+
+bb3.i43:                                          ; preds = %bb18
+  %_4.i.i = icmp slt i64 %array_size.i.i.i, 0
+  br i1 %_4.i.i, label %bb4.i44, label %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i"
+
+bb4.i44:                                          ; preds = %bb3.i43
+; invoke alloc::raw_vec::capacity_overflow
+  invoke void @_ZN5alloc7raw_vec17capacity_overflow17h7596d82a86d51ab8E() #25
+          to label %.noexc45 unwind label %bb27.thread
+
+.noexc45:                                         ; preds = %bb4.i44
+  unreachable
+
+"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i": ; preds = %bb3.i43
+  %57 = load volatile i8, ptr @__rust_no_alloc_shim_is_unstable, align 1
+  %58 = tail call noundef ptr @__rust_alloc(i64 noundef %array_size.i.i.i, i64 noundef 1) #24
+  %59 = icmp eq ptr %58, null
+  br i1 %59, label %bb12.i, label %bb1.i47
+
+bb12.i:                                           ; preds = %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i"
+; invoke alloc::alloc::handle_alloc_error
+  invoke void @_ZN5alloc5alloc18handle_alloc_error17h6c194ef306599f55E(i64 noundef 1, i64 noundef %array_size.i.i.i) #25
+          to label %.noexc46 unwind label %bb27.thread
+
+.noexc46:                                         ; preds = %bb12.i
+  unreachable
+
+bb16:                                             ; preds = %bb23.1, %bb16.lr.ph.new
+  %iter.sroa.0.083 = phi i64 [ 0, %bb16.lr.ph.new ], [ %_0.i.1, %bb23.1 ]
+  %niter110 = phi i64 [ 0, %bb16.lr.ph.new ], [ %niter110.next.1, %bb23.1 ]
+  %_0.i = or i64 %iter.sroa.0.083, 1
+  %60 = getelementptr inbounds [0 x i8], ptr %erasures.0, i64 0, i64 %iter.sroa.0.083
+  %61 = load i8, ptr %60, align 1, !range !249, !noundef !3
+  %_55.not = icmp eq i8 %61, 0
+  br i1 %_55.not, label %bb23, label %bb20
+
+bb24.thread:                                      ; preds = %bb18.thread, %bb18
+  store ptr inttoptr (i64 1 to ptr), ptr %recovered_bytes, align 8
+  %62 = getelementptr inbounds { ptr, i64 }, ptr %recovered_bytes, i64 0, i32 1
+  store i64 %array_size.i.i.i, ptr %62, align 8
+  %63 = getelementptr inbounds %"alloc::vec::Vec<u8>", ptr %recovered_bytes, i64 0, i32 1
+  store i64 0, ptr %63, align 8
+  %64 = icmp ne ptr %_0.sroa.0.0.i.i, null
+  tail call void @llvm.assume(i1 %64)
+  br label %bb38
+
+bb1.i47:                                          ; preds = %"_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha9682d3ef3bea9f2E.exit.i"
+  store ptr %58, ptr %recovered_bytes, align 8
+  %65 = getelementptr inbounds { ptr, i64 }, ptr %recovered_bytes, i64 0, i32 1
+  store i64 %array_size.i.i.i, ptr %65, align 8
+  %66 = getelementptr inbounds %"alloc::vec::Vec<u8>", ptr %recovered_bytes, i64 0, i32 1
+  store i64 0, ptr %66, align 8
+  %67 = icmp ne ptr %_0.sroa.0.0.i.i, null
+  tail call void @llvm.assume(i1 %67)
+  %_17.i = getelementptr inbounds i16, ptr %_0.sroa.0.0.i.i, i64 %k
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !253)
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !254)
+  br label %bb1.i.i
+
+bb1.i.i:                                          ; preds = %"_ZN98_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..adapters..take..SpecTake$GT$13spec_for_each5check28_$u7b$$u7b$closure$u7d$$u7d$17hc2a26fab56c450b9E.exit.i.i", %bb1.i47
+  %self1.i.i.i.i.i.i89 = phi ptr [ %58, %bb1.i47 ], [ %self1.i.i.i.i.i.i, %"_ZN98_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..adapters..take..SpecTake$GT$13spec_for_each5check28_$u7b$$u7b$closure$u7d$$u7d$17hc2a26fab56c450b9E.exit.i.i" ]
+  %len.i.i.i.i.i.i.i = phi i64 [ 0, %bb1.i47 ], [ %70, %"_ZN98_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..adapters..take..SpecTake$GT$13spec_for_each5check28_$u7b$$u7b$closure$u7d$$u7d$17hc2a26fab56c450b9E.exit.i.i" ]
+  %_10.i14.i.i = phi ptr [ %_0.sroa.0.0.i.i, %bb1.i47 ], [ %_10.i.i.i, %"_ZN98_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..adapters..take..SpecTake$GT$13spec_for_each5check28_$u7b$$u7b$closure$u7d$$u7d$17hc2a26fab56c450b9E.exit.i.i" ]
+  %accum.0.i.in.i = phi i64 [ %k, %bb1.i47 ], [ %accum.0.i.i, %"_ZN98_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..adapters..take..SpecTake$GT$13spec_for_each5check28_$u7b$$u7b$closure$u7d$$u7d$17hc2a26fab56c450b9E.exit.i.i" ]
+  %accum.0.i.i = add i64 %accum.0.i.in.i, -1
+  %_2.i.i.i = icmp eq ptr %_10.i14.i.i, %_17.i
+  br i1 %_2.i.i.i, label %bb2.i.i.i.i.i.i.i.i, label %bb3.i.i49
+
+bb3.i.i49:                                        ; preds = %bb1.i.i
+  %_10.i.i.i = getelementptr inbounds i16, ptr %_10.i14.i.i, i64 1
+  %_12.i.i.i = load i16, ptr %_10.i14.i.i, align 2, !noalias !257, !noundef !3
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !261)
+  %68 = load i64, ptr %65, align 8, !alias.scope !264, !noalias !269, !noundef !3
+  %_7.i.i.i.i.i.i.i = sub i64 %68, %len.i.i.i.i.i.i.i
+  %_5.i.i.i.i.i.i.i = icmp ult i64 %_7.i.i.i.i.i.i.i, 2
+  br i1 %_5.i.i.i.i.i.i.i, label %bb1.i.i.i.i.i.i.i, label %"_ZN98_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..adapters..take..SpecTake$GT$13spec_for_each5check28_$u7b$$u7b$closure$u7d$$u7d$17hc2a26fab56c450b9E.exit.i.i"
+
+bb1.i.i.i.i.i.i.i:                                ; preds = %bb3.i.i49
+; invoke alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
+  invoke fastcc void @"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h9df8d8a6ecfddd52E"(ptr noalias noundef nonnull align 8 dereferenceable(16) %recovered_bytes, i64 noundef %len.i.i.i.i.i.i.i, i64 noundef 2)
+          to label %.noexc.i unwind label %bb27, !noalias !271
+
+.noexc.i:                                         ; preds = %bb1.i.i.i.i.i.i.i
+  %len.pre.i.i.i.i.i.i = load i64, ptr %66, align 8, !alias.scope !272, !noalias !269
+  %self1.i.i.i.i.i.i.pre = load ptr, ptr %recovered_bytes, align 8, !alias.scope !272, !noalias !269
+  br label %"_ZN98_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..adapters..take..SpecTake$GT$13spec_for_each5check28_$u7b$$u7b$closure$u7d$$u7d$17hc2a26fab56c450b9E.exit.i.i"
+
+"_ZN98_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..adapters..take..SpecTake$GT$13spec_for_each5check28_$u7b$$u7b$closure$u7d$$u7d$17hc2a26fab56c450b9E.exit.i.i": ; preds = %.noexc.i, %bb3.i.i49
+  %self1.i.i.i.i.i.i = phi ptr [ %self1.i.i.i.i.i.i89, %bb3.i.i49 ], [ %self1.i.i.i.i.i.i.pre, %.noexc.i ]
+  %len.i.i.i.i.i.i = phi i64 [ %len.i.i.i.i.i.i.i, %bb3.i.i49 ], [ %len.pre.i.i.i.i.i.i, %.noexc.i ]
+  %69 = tail call i16 @llvm.bswap.i16(i16 %_12.i.i.i)
+  %dst.i.i.i.i.i.i = getelementptr inbounds i8, ptr %self1.i.i.i.i.i.i, i64 %len.i.i.i.i.i.i
+  store i16 %69, ptr %dst.i.i.i.i.i.i, align 1, !noalias !273
+  %70 = add i64 %len.i.i.i.i.i.i, 2
+  store i64 %70, ptr %66, align 8, !alias.scope !272, !noalias !269
+  %_10.1.i.not.i.i = icmp eq i64 %accum.0.i.i, 0
+  br i1 %_10.1.i.not.i.i, label %bb2.i.i.i.i.i.i.i.i, label %bb1.i.i
+
+bb2.i.i.i.i.i.i.i.i:                              ; preds = %bb1.i.i, %"_ZN98_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..adapters..take..SpecTake$GT$13spec_for_each5check28_$u7b$$u7b$closure$u7d$$u7d$17hc2a26fab56c450b9E.exit.i.i"
+  tail call void @__rust_dealloc(ptr noundef nonnull %_0.sroa.0.0.i.i, i64 noundef %array_size.i.i.i, i64 noundef 2) #24, !noalias !274
+  br label %bb38
+
+bb38:                                             ; preds = %bb24.thread, %bb2.i.i.i.i.i.i.i.i
+  %71 = getelementptr inbounds %"core::result::Result<alloc::vec::Vec<u8>, errors::Error>::Ok", ptr %_0, i64 0, i32 1
+  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(24) %71, ptr noundef nonnull align 8 dereferenceable(24) %recovered_bytes, i64 24, i1 false)
+  store i64 7, ptr %_0, align 8
+  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %recovered_bytes)
+  br i1 %16, label %bb25, label %bb2.i.i.i
+
+bb2.i.i.i:                                        ; preds = %bb38
+  %size.i.i.i.i = shl nuw i64 %0, 1
+  tail call void @__rust_dealloc(ptr noundef nonnull %_0.sroa.0.0.i10.i.i, i64 noundef %size.i.i.i.i, i64 noundef 2) #24
+  br label %bb25
+
+bb25:                                             ; preds = %bb2.i.i.i, %bb38
+  ret void
+
+bb23:                                             ; preds = %bb20, %bb16
+  %_0.i.1 = add nuw i64 %iter.sroa.0.083, 2
+  %72 = getelementptr inbounds [0 x i8], ptr %erasures.0, i64 0, i64 %_0.i
+  %73 = load i8, ptr %72, align 1, !range !249, !noundef !3
+  %_55.not.1 = icmp eq i8 %73, 0
+  br i1 %_55.not.1, label %bb23.1, label %bb20.1
+
+bb20.1:                                           ; preds = %bb23
+  %_0.i.i53.1 = getelementptr inbounds [0 x i16], ptr %_0.sroa.0.0.i10.i.i, i64 0, i64 %_0.i
+  %_58.1 = load i16, ptr %_0.i.i53.1, align 2, !noundef !3
+  tail call void @llvm.assume(i1 %53)
+  %_0.i.i57.1 = getelementptr inbounds [0 x i16], ptr %_0.sroa.0.0.i.i, i64 0, i64 %_0.i
+  store i16 %_58.1, ptr %_0.i.i57.1, align 2
+  br label %bb23.1
+
+bb23.1:                                           ; preds = %bb20.1, %bb23
+  %niter110.next.1 = add i64 %niter110, 2
+  %niter110.ncmp.1 = icmp eq i64 %niter110.next.1, %unroll_iter109
+  br i1 %niter110.ncmp.1, label %bb18.unr-lcssa, label %bb16
+
+bb20:                                             ; preds = %bb16
+  %_0.i.i53 = getelementptr inbounds [0 x i16], ptr %_0.sroa.0.0.i10.i.i, i64 0, i64 %iter.sroa.0.083
+  %_58 = load i16, ptr %_0.i.i53, align 2, !noundef !3
+  tail call void @llvm.assume(i1 %53)
+  %_0.i.i57 = getelementptr inbounds [0 x i16], ptr %_0.sroa.0.0.i.i, i64 0, i64 %iter.sroa.0.083
+  store i16 %_58, ptr %_0.i.i57, align 2
+  br label %bb23
+
+bb28:                                             ; preds = %bb27, %bb29
+  %.pn.pn69 = phi { ptr, i32 } [ %.pn.pn70, %bb29 ], [ %33, %bb27 ]
+  resume { ptr, i32 } %.pn.pn69
+
+bb29:                                             ; preds = %bb27.thread, %bb30.thread
+  %.pn.pn70 = phi { ptr, i32 } [ %27, %bb30.thread ], [ %34, %bb27.thread ]
+; call core::ptr::drop_in_place<core::iter::adapters::take::Take<alloc::vec::into_iter::IntoIter<reed_solomon_novelpoly::field::f2e16::Additive>>>
+  call fastcc void @"_ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E"(ptr %_0.sroa.0.0.i.i, i64 %k) #26
+  br label %bb28
+}
+
+; reed_solomon_novelpoly::field::f2e16::eval_error_polynomial
+; Function Attrs: nonlazybind uwtable
+define void @_ZN22reed_solomon_novelpoly5field5f2e1621eval_error_polynomial17h6c3e4518c1dd7300E(ptr noalias nocapture noundef nonnull readonly align 1 %erasure.0, i64 noundef %erasure.1, ptr noalias nocapture noundef nonnull align 2 %log_walsh2.0, i64 noundef %log_walsh2.1, i64 noundef %n, ptr noalias nocapture noundef nonnull readonly align 2 %log_walsh.0, i64 noundef %log_walsh.1) unnamed_addr #0 personality ptr @rust_eh_personality {
+start:
+  %_0.0.sroa.speculated.i = tail call i64 @llvm.umin.i64(i64 %n, i64 %erasure.1)
+  %_6395.not = icmp eq i64 %_0.0.sroa.speculated.i, 0
+  br i1 %_6395.not, label %bb7.preheader, label %bb2.preheader
+
+bb2.preheader:                                    ; preds = %start
+  %0 = add i64 %_0.0.sroa.speculated.i, -1
+  %umin = tail call i64 @llvm.umin.i64(i64 %log_walsh2.1, i64 %0)
+  %1 = add i64 %umin, 1
+  %min.iters.check = icmp ult i64 %1, 9
+  br i1 %min.iters.check, label %bb2.preheader246, label %vector.ph
+
+bb2.preheader246:                                 ; preds = %vector.body, %bb2.preheader
+  %iter.sroa.0.096.ph = phi i64 [ 0, %bb2.preheader ], [ %n.vec, %vector.body ]
+  br label %bb2
+
+vector.ph:                                        ; preds = %bb2.preheader
+  %n.mod.vf = and i64 %1, 7
+  %2 = icmp eq i64 %n.mod.vf, 0
+  %3 = select i1 %2, i64 8, i64 %n.mod.vf
+  %n.vec = sub i64 %1, %3
+  br label %vector.body
+
+vector.body:                                      ; preds = %vector.body, %vector.ph
+  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
+  %4 = getelementptr inbounds [0 x i8], ptr %erasure.0, i64 0, i64 %index
+  %wide.load = load <8 x i8>, ptr %4, align 1
+  %5 = zext <8 x i8> %wide.load to <8 x i16>
+  %6 = getelementptr inbounds [0 x i16], ptr %log_walsh2.0, i64 0, i64 %index
+  store <8 x i16> %5, ptr %6, align 2
+  %index.next = add nuw i64 %index, 8
+  %7 = icmp eq i64 %index.next, %n.vec
+  br i1 %7, label %bb2.preheader246, label %vector.body, !llvm.loop !277
+
+bb7.preheader:                                    ; preds = %bb6, %start
+  %_7097 = icmp ugt i64 %n, %erasure.1
+  br i1 %_7097, label %bb8, label %bb9
+
+bb2:                                              ; preds = %bb2.preheader246, %bb6
+  %iter.sroa.0.096 = phi i64 [ %_0.i, %bb6 ], [ %iter.sroa.0.096.ph, %bb2.preheader246 ]
+  %exitcond.not = icmp eq i64 %iter.sroa.0.096, %log_walsh2.1
+  br i1 %exitcond.not, label %panic22, label %bb6, !prof !59
+
+bb9:                                              ; preds = %bb10, %bb7.preheader
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !278)
+  br label %bb3.preheader.i
+
+bb3.preheader.i:                                  ; preds = %bb14.i, %bb9
+  %depart_no.031.i = phi i64 [ %_56.i, %bb14.i ], [ 1, %bb9 ]
+  %_56.i = shl i64 %depart_no.031.i, 1
+  %8 = shl i64 %depart_no.031.i, 2
+  %9 = mul i64 %depart_no.031.i, -2
+  %10 = add nsw i64 %depart_no.031.i, -1
+  %11 = add i64 %_56.i, 2
+  %12 = mul i64 %depart_no.031.i, -2
+  %13 = add nsw i64 %depart_no.031.i, -1
+  br label %bb6.i.preheader
+
+bb6.i.preheader:                                  ; preds = %bb3.preheader.i, %bb13.i
+  %indvar = phi i64 [ 0, %bb3.preheader.i ], [ %indvar.next, %bb13.i ]
+  %indvars.iv.i = phi i64 [ %depart_no.031.i, %bb3.preheader.i ], [ %indvars.iv.next.i, %bb13.i ]
+  %j.029.i = phi i64 [ 0, %bb3.preheader.i ], [ %72, %bb13.i ]
+  %umax150 = tail call i64 @llvm.umax.i64(i64 %log_walsh2.1, i64 %indvars.iv.i)
+  %14 = mul i64 %12, %indvar
+  %15 = sub i64 %14, %depart_no.031.i
+  %16 = add i64 %umax150, %15
+  %umax151 = tail call i64 @llvm.umax.i64(i64 %log_walsh2.1, i64 %j.029.i)
+  %17 = add i64 %umax151, %14
+  %umin152 = tail call i64 @llvm.umin.i64(i64 %16, i64 %17)
+  %umin153 = tail call i64 @llvm.umin.i64(i64 %umin152, i64 %13)
+  %18 = add nsw i64 %umin153, 1
+  %min.iters.check156 = icmp ult i64 %18, 9
+  br i1 %min.iters.check156, label %bb6.i.preheader241, label %vector.memcheck
+
+bb6.i.preheader241:                               ; preds = %vector.body161, %vector.memcheck, %bb6.i.preheader
+  %i.028.i.ph = phi i64 [ %j.029.i, %vector.memcheck ], [ %j.029.i, %bb6.i.preheader ], [ %ind.end, %vector.body161 ]
+  br label %bb6.i
+
+vector.memcheck:                                  ; preds = %bb6.i.preheader
+  %19 = mul i64 %8, %indvar
+  %20 = add i64 %11, %19
+  %scevgep148 = getelementptr i8, ptr %log_walsh2.0, i64 %20
+  %umax = tail call i64 @llvm.umax.i64(i64 %log_walsh2.1, i64 %indvars.iv.i)
+  %21 = mul i64 %9, %indvar
+  %22 = sub i64 %21, %depart_no.031.i
+  %23 = add i64 %umax, %22
+  %umax143 = tail call i64 @llvm.umax.i64(i64 %log_walsh2.1, i64 %j.029.i)
+  %24 = add i64 %umax143, %21
+  %umin144 = tail call i64 @llvm.umin.i64(i64 %23, i64 %24)
+  %umin145 = tail call i64 @llvm.umin.i64(i64 %umin144, i64 %10)
+  %25 = shl nsw i64 %umin145, 1
+  %scevgep149 = getelementptr i8, ptr %scevgep148, i64 %25
+  %26 = add i64 %_56.i, %19
+  %scevgep147 = getelementptr i8, ptr %log_walsh2.0, i64 %26
+  %27 = or i64 %19, 2
+  %scevgep142 = getelementptr i8, ptr %log_walsh2.0, i64 %27
+  %scevgep146 = getelementptr i8, ptr %scevgep142, i64 %25
+  %scevgep = getelementptr i8, ptr %log_walsh2.0, i64 %19
+  %bound0 = icmp ult ptr %scevgep, %scevgep149
+  %bound1 = icmp ult ptr %scevgep147, %scevgep146
+  %found.conflict = and i1 %bound0, %bound1
+  br i1 %found.conflict, label %bb6.i.preheader241, label %vector.ph157
+
+vector.ph157:                                     ; preds = %vector.memcheck
+  %n.mod.vf158 = and i64 %18, 7
+  %28 = icmp eq i64 %n.mod.vf158, 0
+  %29 = select i1 %28, i64 8, i64 %n.mod.vf158
+  %n.vec159 = sub i64 %18, %29
+  %ind.end = add i64 %j.029.i, %n.vec159
+  br label %vector.body161
+
+vector.body161:                                   ; preds = %vector.body161, %vector.ph157
+  %index162 = phi i64 [ 0, %vector.ph157 ], [ %index.next165, %vector.body161 ]
+  %30 = phi i64 [ %j.029.i, %vector.ph157 ], [ %45, %vector.body161 ]
+  %offset.idx = add i64 %j.029.i, %index162
+  %31 = getelementptr inbounds [0 x i16], ptr %log_walsh2.0, i64 0, i64 %offset.idx
+  %wide.load163 = load <8 x i16>, ptr %31, align 2, !alias.scope !281, !noalias !284
+  %32 = zext <8 x i16> %wide.load163 to <8 x i32>
+  %33 = add nuw nsw <8 x i32> %32, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
+  %34 = add nuw nsw i64 %30, %depart_no.031.i
+  %35 = getelementptr inbounds [0 x i16], ptr %log_walsh2.0, i64 0, i64 %34
+  %wide.load164 = load <8 x i16>, ptr %35, align 2, !alias.scope !286
+  %36 = zext <8 x i16> %wide.load164 to <8 x i32>
+  %37 = sub nuw nsw <8 x i32> %33, %36
+  %38 = add nuw nsw <8 x i32> %36, %32
+  %39 = lshr <8 x i32> %38, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
+  %40 = add nuw nsw <8 x i32> %39, %38
+  %41 = trunc <8 x i32> %40 to <8 x i16>
+  store <8 x i16> %41, ptr %31, align 2, !alias.scope !281, !noalias !284
+  %42 = lshr <8 x i32> %37, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
+  %43 = add nuw nsw <8 x i32> %42, %37
+  %44 = trunc <8 x i32> %43 to <8 x i16>
+  store <8 x i16> %44, ptr %35, align 2, !alias.scope !286
+  %index.next165 = add nuw i64 %index162, 8
+  %45 = add i64 %30, 8
+  %46 = icmp eq i64 %index.next165, %n.vec159
+  br i1 %46, label %bb6.i.preheader241, label %vector.body161, !llvm.loop !287
+
+bb14.i:                                           ; preds = %bb13.i
+  %_4.i = icmp ult i64 %depart_no.031.i, 32768
+  br i1 %_4.i, label %bb3.preheader.i, label %bb11.preheader
+
+bb11.preheader:                                   ; preds = %bb14.i
+  %_7899.not = icmp eq i64 %n, 0
+  br i1 %_7899.not, label %bb13, label %bb12.lr.ph
+
+bb12.lr.ph:                                       ; preds = %bb11.preheader
+  %injected.cond.not = icmp ugt i64 %log_walsh2.1, %log_walsh.1
+  %47 = add i64 %n, -1
+  br i1 %injected.cond.not, label %bb14.preheader, label %bb12.us.preheader
+
+bb12.us.preheader:                                ; preds = %bb12.lr.ph
+  %umin166 = tail call i64 @llvm.umin.i64(i64 %log_walsh2.1, i64 %47)
+  %48 = add i64 %umin166, 1
+  %min.iters.check169 = icmp ult i64 %48, 9
+  br i1 %min.iters.check169, label %bb12.us.preheader239, label %vector.ph170
+
+bb12.us.preheader239:                             ; preds = %vector.body174, %bb12.us.preheader
+  %iter4.sroa.0.0100.us.ph = phi i64 [ 0, %bb12.us.preheader ], [ %n.vec172, %vector.body174 ]
+  br label %bb12.us
+
+vector.ph170:                                     ; preds = %bb12.us.preheader
+  %n.mod.vf171 = and i64 %48, 7
+  %49 = icmp eq i64 %n.mod.vf171, 0
+  %50 = select i1 %49, i64 8, i64 %n.mod.vf171
+  %n.vec172 = sub i64 %48, %50
+  br label %vector.body174
+
+vector.body174:                                   ; preds = %vector.body174, %vector.ph170
+  %index175 = phi i64 [ 0, %vector.ph170 ], [ %index.next178, %vector.body174 ]
+  %51 = getelementptr inbounds [0 x i16], ptr %log_walsh2.0, i64 0, i64 %index175
+  %wide.load176 = load <8 x i16>, ptr %51, align 2
+  %52 = zext <8 x i16> %wide.load176 to <8 x i32>
+  %53 = getelementptr inbounds [0 x i16], ptr %log_walsh.0, i64 0, i64 %index175
+  %wide.load177 = load <8 x i16>, ptr %53, align 2
+  %54 = zext <8 x i16> %wide.load177 to <8 x i32>
+  %55 = mul nuw <8 x i32> %54, %52
+  %56 = urem <8 x i32> %55, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
+  %57 = trunc <8 x i32> %56 to <8 x i16>
+  store <8 x i16> %57, ptr %51, align 2
+  %index.next178 = add nuw i64 %index175, 8
+  %58 = icmp eq i64 %index.next178, %n.vec172
+  br i1 %58, label %bb12.us.preheader239, label %vector.body174, !llvm.loop !288
+
+bb14.preheader:                                   ; preds = %bb12.lr.ph
+  %umin179 = tail call i64 @llvm.umin.i64(i64 %log_walsh.1, i64 %47)
+  %59 = add i64 %umin179, 1
+  %min.iters.check182 = icmp ult i64 %59, 9
+  br i1 %min.iters.check182, label %bb14.preheader238, label %vector.ph183
+
+bb14.preheader238:                                ; preds = %vector.body187, %bb14.preheader
+  %iter4.sroa.0.0100.ph = phi i64 [ 0, %bb14.preheader ], [ %n.vec185, %vector.body187 ]
+  br label %bb14
+
+vector.ph183:                                     ; preds = %bb14.preheader
+  %n.mod.vf184 = and i64 %59, 7
+  %60 = icmp eq i64 %n.mod.vf184, 0
+  %61 = select i1 %60, i64 8, i64 %n.mod.vf184
+  %n.vec185 = sub i64 %59, %61
+  br label %vector.body187
+
+vector.body187:                                   ; preds = %vector.body187, %vector.ph183
+  %index188 = phi i64 [ 0, %vector.ph183 ], [ %index.next191, %vector.body187 ]
+  %62 = getelementptr inbounds [0 x i16], ptr %log_walsh2.0, i64 0, i64 %index188
+  %wide.load189 = load <8 x i16>, ptr %62, align 2
+  %63 = zext <8 x i16> %wide.load189 to <8 x i32>
+  %64 = getelementptr inbounds [0 x i16], ptr %log_walsh.0, i64 0, i64 %index188
+  %wide.load190 = load <8 x i16>, ptr %64, align 2
+  %65 = zext <8 x i16> %wide.load190 to <8 x i32>
+  %66 = mul nuw <8 x i32> %65, %63
+  %67 = urem <8 x i32> %66, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
+  %68 = trunc <8 x i32> %67 to <8 x i16>
+  store <8 x i16> %68, ptr %62, align 2
+  %index.next191 = add nuw i64 %index188, 8
+  %69 = icmp eq i64 %index.next191, %n.vec185
+  br i1 %69, label %bb14.preheader238, label %vector.body187, !llvm.loop !289
+
+bb12.us:                                          ; preds = %bb12.us.preheader239, %bb14.us
+  %iter4.sroa.0.0100.us = phi i64 [ %_0.i31.us, %bb14.us ], [ %iter4.sroa.0.0100.us.ph, %bb12.us.preheader239 ]
+  %exitcond119.not = icmp eq i64 %iter4.sroa.0.0100.us, %log_walsh2.1
+  br i1 %exitcond119.not, label %panic13, label %bb14.us, !prof !59
+
+bb14.us:                                          ; preds = %bb12.us
+  %_0.i31.us = add nuw i64 %iter4.sroa.0.0100.us, 1
+  %70 = getelementptr inbounds [0 x i16], ptr %log_walsh2.0, i64 0, i64 %iter4.sroa.0.0100.us
+  %self14.us = load i16, ptr %70, align 2, !noundef !3
+  %_37.us = zext i16 %self14.us to i32
+  %71 = getelementptr inbounds [0 x i16], ptr %log_walsh.0, i64 0, i64 %iter4.sroa.0.0100.us
+  %self16.us = load i16, ptr %71, align 2, !noundef !3
+  %_40.us = zext i16 %self16.us to i32
+  %tmp.us = mul nuw i32 %_40.us, %_37.us
+  %_45.us = urem i32 %tmp.us, 65535
+  %_44.us = trunc i32 %_45.us to i16
+  store i16 %_44.us, ptr %70, align 2
+  %exitcond120.not = icmp eq i64 %_0.i31.us, %n
+  br i1 %exitcond120.not, label %bb13, label %bb12.us, !llvm.loop !291
+
+bb13.i:                                           ; preds = %bb8.i
+  %72 = add nuw nsw i64 %j.029.i, %_56.i
+  %_7.i = icmp ult i64 %72, 65536
+  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, %_56.i
+  %indvar.next = add i64 %indvar, 1
+  br i1 %_7.i, label %bb6.i.preheader, label %bb14.i
+
+bb6.i:                                            ; preds = %bb6.i.preheader241, %bb8.i
+  %i.028.i = phi i64 [ %75, %bb8.i ], [ %i.028.i.ph, %bb6.i.preheader241 ]
+  %_20.i = icmp ult i64 %i.028.i, %log_walsh2.1
+  br i1 %_20.i, label %bb7.i, label %panic.i, !prof !119
+
+bb7.i:                                            ; preds = %bb6.i
+  %_22.i = add nuw nsw i64 %i.028.i, %depart_no.031.i
+  %_26.i = icmp ult i64 %_22.i, %log_walsh2.1
+  br i1 %_26.i, label %bb8.i, label %panic1.i, !prof !119
+
+panic.i:                                          ; preds = %bb6.i
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %i.028.i, i64 noundef %log_walsh2.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_f835a666fb2fb9eb6998cab602faabdd) #25, !noalias !278
+  unreachable
+
+bb8.i:                                            ; preds = %bb7.i
+  %73 = getelementptr inbounds [0 x i16], ptr %log_walsh2.0, i64 0, i64 %i.028.i
+  %self.i = load i16, ptr %73, align 2, !alias.scope !278, !noundef !3
+  %_17.i = zext i16 %self.i to i32
+  %_16.i = add nuw nsw i32 %_17.i, 65535
+  %74 = getelementptr inbounds [0 x i16], ptr %log_walsh2.0, i64 0, i64 %_22.i
+  %self2.i = load i16, ptr %74, align 2, !alias.scope !278, !noundef !3
+  %_21.i = zext i16 %self2.i to i32
+  %tmp2.i = sub nuw nsw i32 %_16.i, %_21.i
+  %tmp1.i = add nuw nsw i32 %_21.i, %_17.i
+  %_42.i = lshr i32 %tmp1.i, 16
+  %_40.i = add nuw nsw i32 %_42.i, %tmp1.i
+  %_39.i = trunc i32 %_40.i to i16
+  store i16 %_39.i, ptr %73, align 2, !alias.scope !278
+  %_50.i = lshr i32 %tmp2.i, 16
+  %_48.i = add nuw nsw i32 %_50.i, %tmp2.i
+  %_47.i = trunc i32 %_48.i to i16
+  store i16 %_47.i, ptr %74, align 2, !alias.scope !278
+  %75 = add nuw nsw i64 %i.028.i, 1
+  %exitcond.not.i = icmp eq i64 %75, %indvars.iv.i
+  br i1 %exitcond.not.i, label %bb13.i, label %bb6.i, !llvm.loop !292
+
+panic1.i:                                         ; preds = %bb7.i
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %_22.i, i64 noundef %log_walsh2.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_1db96d5b1a328d476c67fbf01169719e) #25, !noalias !278
+  unreachable
+
+bb8:                                              ; preds = %bb7.preheader, %bb10
+  %iter2.sroa.0.098 = phi i64 [ %_0.i30, %bb10 ], [ %_0.0.sroa.speculated.i, %bb7.preheader ]
+  %_29 = icmp ult i64 %iter2.sroa.0.098, %log_walsh2.1
+  br i1 %_29, label %bb10, label %panic19, !prof !119
+
+bb13:                                             ; preds = %bb14.us, %bb16, %bb11.preheader
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !293)
+  br label %bb3.preheader.i32
+
+bb3.preheader.i32:                                ; preds = %bb14.i43, %bb13
+  %depart_no.031.i33 = phi i64 [ %_56.i34, %bb14.i43 ], [ 1, %bb13 ]
+  %_56.i34 = shl i64 %depart_no.031.i33, 1
+  %76 = shl i64 %depart_no.031.i33, 2
+  %77 = mul i64 %depart_no.031.i33, -2
+  %78 = add nsw i64 %depart_no.031.i33, -1
+  %79 = add i64 %_56.i34, 2
+  %80 = mul i64 %depart_no.031.i33, -2
+  %81 = add nsw i64 %depart_no.031.i33, -1
+  br label %bb6.i45.preheader
+
+bb6.i45.preheader:                                ; preds = %bb3.preheader.i32, %bb13.i40
+  %indvar193 = phi i64 [ 0, %bb3.preheader.i32 ], [ %indvar.next194, %bb13.i40 ]
+  %indvars.iv.i36 = phi i64 [ %depart_no.031.i33, %bb3.preheader.i32 ], [ %indvars.iv.next.i42, %bb13.i40 ]
+  %j.029.i37 = phi i64 [ 0, %bb3.preheader.i32 ], [ %115, %bb13.i40 ]
+  %umax208 = tail call i64 @llvm.umax.i64(i64 %log_walsh2.1, i64 %indvars.iv.i36)
+  %82 = mul i64 %80, %indvar193
+  %83 = sub i64 %82, %depart_no.031.i33
+  %84 = add i64 %umax208, %83
+  %umax209 = tail call i64 @llvm.umax.i64(i64 %log_walsh2.1, i64 %j.029.i37)
+  %85 = add i64 %umax209, %82
+  %umin210 = tail call i64 @llvm.umin.i64(i64 %84, i64 %85)
+  %umin211 = tail call i64 @llvm.umin.i64(i64 %umin210, i64 %81)
+  %86 = add nsw i64 %umin211, 1
+  %min.iters.check214 = icmp ult i64 %86, 9
+  br i1 %min.iters.check214, label %bb6.i45.preheader234, label %vector.memcheck192
+
+bb6.i45.preheader234:                             ; preds = %vector.body220, %vector.memcheck192, %bb6.i45.preheader
+  %i.028.i46.ph = phi i64 [ %j.029.i37, %vector.memcheck192 ], [ %j.029.i37, %bb6.i45.preheader ], [ %ind.end218, %vector.body220 ]
+  br label %bb6.i45
+
+vector.memcheck192:                               ; preds = %bb6.i45.preheader
+  %87 = mul i64 %76, %indvar193
+  %88 = add i64 %79, %87
+  %scevgep203 = getelementptr i8, ptr %log_walsh2.0, i64 %88
+  %umax197 = tail call i64 @llvm.umax.i64(i64 %log_walsh2.1, i64 %indvars.iv.i36)
+  %89 = mul i64 %77, %indvar193
+  %90 = sub i64 %89, %depart_no.031.i33
+  %91 = add i64 %umax197, %90
+  %umax198 = tail call i64 @llvm.umax.i64(i64 %log_walsh2.1, i64 %j.029.i37)
+  %92 = add i64 %umax198, %89
+  %umin199 = tail call i64 @llvm.umin.i64(i64 %91, i64 %92)
+  %umin200 = tail call i64 @llvm.umin.i64(i64 %umin199, i64 %78)
+  %93 = shl nsw i64 %umin200, 1
+  %scevgep204 = getelementptr i8, ptr %scevgep203, i64 %93
+  %94 = add i64 %_56.i34, %87
+  %scevgep202 = getelementptr i8, ptr %log_walsh2.0, i64 %94
+  %95 = or i64 %87, 2
+  %scevgep196 = getelementptr i8, ptr %log_walsh2.0, i64 %95
+  %scevgep201 = getelementptr i8, ptr %scevgep196, i64 %93
+  %scevgep195 = getelementptr i8, ptr %log_walsh2.0, i64 %87
+  %bound0205 = icmp ult ptr %scevgep195, %scevgep204
+  %bound1206 = icmp ult ptr %scevgep202, %scevgep201
+  %found.conflict207 = and i1 %bound0205, %bound1206
+  br i1 %found.conflict207, label %bb6.i45.preheader234, label %vector.ph215
+
+vector.ph215:                                     ; preds = %vector.memcheck192
+  %n.mod.vf216 = and i64 %86, 7
+  %96 = icmp eq i64 %n.mod.vf216, 0
+  %97 = select i1 %96, i64 8, i64 %n.mod.vf216
+  %n.vec217 = sub i64 %86, %97
+  %ind.end218 = add i64 %j.029.i37, %n.vec217
+  br label %vector.body220
+
+vector.body220:                                   ; preds = %vector.body220, %vector.ph215
+  %index221 = phi i64 [ 0, %vector.ph215 ], [ %index.next232, %vector.body220 ]
+  %98 = phi i64 [ %j.029.i37, %vector.ph215 ], [ %113, %vector.body220 ]
+  %offset.idx227 = add i64 %j.029.i37, %index221
+  %99 = getelementptr inbounds [0 x i16], ptr %log_walsh2.0, i64 0, i64 %offset.idx227
+  %wide.load230 = load <8 x i16>, ptr %99, align 2, !alias.scope !296, !noalias !299
+  %100 = zext <8 x i16> %wide.load230 to <8 x i32>
+  %101 = add nuw nsw <8 x i32> %100, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
+  %102 = add nuw nsw i64 %98, %depart_no.031.i33
+  %103 = getelementptr inbounds [0 x i16], ptr %log_walsh2.0, i64 0, i64 %102
+  %wide.load231 = load <8 x i16>, ptr %103, align 2, !alias.scope !301
+  %104 = zext <8 x i16> %wide.load231 to <8 x i32>
+  %105 = sub nuw nsw <8 x i32> %101, %104
+  %106 = add nuw nsw <8 x i32> %104, %100
+  %107 = lshr <8 x i32> %106, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
+  %108 = add nuw nsw <8 x i32> %107, %106
+  %109 = trunc <8 x i32> %108 to <8 x i16>
+  store <8 x i16> %109, ptr %99, align 2, !alias.scope !296, !noalias !299
+  %110 = lshr <8 x i32> %105, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
+  %111 = add nuw nsw <8 x i32> %110, %105
+  %112 = trunc <8 x i32> %111 to <8 x i16>
+  store <8 x i16> %112, ptr %103, align 2, !alias.scope !301
+  %index.next232 = add nuw i64 %index221, 8
+  %113 = add i64 %98, 8
+  %114 = icmp eq i64 %index.next232, %n.vec217
+  br i1 %114, label %bb6.i45.preheader234, label %vector.body220, !llvm.loop !302
+
+bb14.i43:                                         ; preds = %bb13.i40
+  %_4.i44 = icmp ult i64 %depart_no.031.i33, 32768
+  br i1 %_4.i44, label %bb3.preheader.i32, label %bb17.preheader
+
+bb17.preheader:                                   ; preds = %bb14.i43
+  br i1 %_6395.not, label %bb19, label %bb18
+
+bb13.i40:                                         ; preds = %bb8.i53
+  %115 = add nuw nsw i64 %j.029.i37, %_56.i34
+  %_7.i41 = icmp ult i64 %115, 65536
+  %indvars.iv.next.i42 = add nuw nsw i64 %indvars.iv.i36, %_56.i34
+  %indvar.next194 = add i64 %indvar193, 1
+  br i1 %_7.i41, label %bb6.i45.preheader, label %bb14.i43
+
+bb6.i45:                                          ; preds = %bb6.i45.preheader234, %bb8.i53
+  %i.028.i46 = phi i64 [ %118, %bb8.i53 ], [ %i.028.i46.ph, %bb6.i45.preheader234 ]
+  %_20.i47 = icmp ult i64 %i.028.i46, %log_walsh2.1
+  br i1 %_20.i47, label %bb7.i49, label %panic.i48, !prof !119
+
+bb7.i49:                                          ; preds = %bb6.i45
+  %_22.i50 = add nuw nsw i64 %i.028.i46, %depart_no.031.i33
+  %_26.i51 = icmp ult i64 %_22.i50, %log_walsh2.1
+  br i1 %_26.i51, label %bb8.i53, label %panic1.i52, !prof !119
+
+panic.i48:                                        ; preds = %bb6.i45
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %i.028.i46, i64 noundef %log_walsh2.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_f835a666fb2fb9eb6998cab602faabdd) #25, !noalias !293
+  unreachable
+
+bb8.i53:                                          ; preds = %bb7.i49
+  %116 = getelementptr inbounds [0 x i16], ptr %log_walsh2.0, i64 0, i64 %i.028.i46
+  %self.i54 = load i16, ptr %116, align 2, !alias.scope !293, !noundef !3
+  %_17.i55 = zext i16 %self.i54 to i32
+  %_16.i56 = add nuw nsw i32 %_17.i55, 65535
+  %117 = getelementptr inbounds [0 x i16], ptr %log_walsh2.0, i64 0, i64 %_22.i50
+  %self2.i57 = load i16, ptr %117, align 2, !alias.scope !293, !noundef !3
+  %_21.i58 = zext i16 %self2.i57 to i32
+  %tmp2.i59 = sub nuw nsw i32 %_16.i56, %_21.i58
+  %tmp1.i60 = add nuw nsw i32 %_21.i58, %_17.i55
+  %_42.i61 = lshr i32 %tmp1.i60, 16
+  %_40.i62 = add nuw nsw i32 %_42.i61, %tmp1.i60
+  %_39.i63 = trunc i32 %_40.i62 to i16
+  store i16 %_39.i63, ptr %116, align 2, !alias.scope !293
+  %_50.i64 = lshr i32 %tmp2.i59, 16
+  %_48.i65 = add nuw nsw i32 %_50.i64, %tmp2.i59
+  %_47.i66 = trunc i32 %_48.i65 to i16
+  store i16 %_47.i66, ptr %117, align 2, !alias.scope !293
+  %118 = add nuw nsw i64 %i.028.i46, 1
+  %exitcond.not.i67 = icmp eq i64 %118, %indvars.iv.i36
+  br i1 %exitcond.not.i67, label %bb13.i40, label %bb6.i45, !llvm.loop !303
+
+panic1.i52:                                       ; preds = %bb7.i49
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %_22.i50, i64 noundef %log_walsh2.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_1db96d5b1a328d476c67fbf01169719e) #25, !noalias !293
+  unreachable
+
+bb19:                                             ; preds = %bb24, %bb17.preheader
+  ret void
+
+bb18:                                             ; preds = %bb17.preheader, %bb24
+  %iter6.sroa.0.0102 = phi i64 [ %_0.i69, %bb24 ], [ 0, %bb17.preheader ]
+  %_0.i69 = add nuw i64 %iter6.sroa.0.0102, 1
+  %119 = getelementptr inbounds [0 x i8], ptr %erasure.0, i64 0, i64 %iter6.sroa.0.0102
+  %120 = load i8, ptr %119, align 1, !range !249, !noundef !3
+  %_55.not = icmp eq i8 %120, 0
+  br i1 %_55.not, label %bb24, label %bb21
+
+bb24:                                             ; preds = %bb22, %bb18
+  %exitcond123.not = icmp eq i64 %_0.i69, %_0.0.sroa.speculated.i
+  br i1 %exitcond123.not, label %bb19, label %bb18
+
+bb21:                                             ; preds = %bb18
+  %_60 = icmp ult i64 %iter6.sroa.0.0102, %log_walsh2.1
+  br i1 %_60, label %bb22, label %panic10, !prof !119
+
+bb22:                                             ; preds = %bb21
+  %121 = getelementptr inbounds [0 x i16], ptr %log_walsh2.0, i64 0, i64 %iter6.sroa.0.0102
+  %rhs = load i16, ptr %121, align 2, !noundef !3
+  %_94.0 = xor i16 %rhs, -1
+  store i16 %_94.0, ptr %121, align 2
+  br label %bb24
+
+panic10:                                          ; preds = %bb21
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %iter6.sroa.0.0102, i64 noundef %log_walsh2.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_f1aa12ca0f369853a57abcfb504d4478) #25
+  unreachable
+
+bb14:                                             ; preds = %bb14.preheader238, %bb16
+  %iter4.sroa.0.0100 = phi i64 [ %_0.i31, %bb16 ], [ %iter4.sroa.0.0100.ph, %bb14.preheader238 ]
+  %exitcond121.not = icmp eq i64 %iter4.sroa.0.0100, %log_walsh.1
+  br i1 %exitcond121.not, label %panic15, label %bb16
+
+panic13:                                          ; preds = %bb12.us
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %log_walsh2.1, i64 noundef %log_walsh2.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_aff7f64644633cb3253a67eea439cb87) #25
+  unreachable
+
+panic15:                                          ; preds = %bb14
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %log_walsh.1, i64 noundef %log_walsh.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_3f8850fa998896bdaf02ad3f4f1d861b) #25
+  unreachable
+
+bb16:                                             ; preds = %bb14
+  %_0.i31 = add nuw i64 %iter4.sroa.0.0100, 1
+  %122 = getelementptr inbounds [0 x i16], ptr %log_walsh2.0, i64 0, i64 %iter4.sroa.0.0100
+  %self14 = load i16, ptr %122, align 2, !noundef !3
+  %_37 = zext i16 %self14 to i32
+  %123 = getelementptr inbounds [0 x i16], ptr %log_walsh.0, i64 0, i64 %iter4.sroa.0.0100
+  %self16 = load i16, ptr %123, align 2, !noundef !3
+  %_40 = zext i16 %self16 to i32
+  %tmp = mul nuw i32 %_40, %_37
+  %_45 = urem i32 %tmp, 65535
+  %_44 = trunc i32 %_45 to i16
+  store i16 %_44, ptr %122, align 2
+  %exitcond122.not = icmp eq i64 %_0.i31, %n
+  br i1 %exitcond122.not, label %bb13, label %bb14, !llvm.loop !304
+
+bb10:                                             ; preds = %bb8
+  %_0.i30 = add nuw i64 %iter2.sroa.0.098, 1
+  %124 = getelementptr inbounds [0 x i16], ptr %log_walsh2.0, i64 0, i64 %iter2.sroa.0.098
+  store i16 0, ptr %124, align 2
+  %exitcond118.not = icmp eq i64 %_0.i30, %n
+  br i1 %exitcond118.not, label %bb9, label %bb8
+
+panic19:                                          ; preds = %bb8
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %iter2.sroa.0.098, i64 noundef %log_walsh2.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_970e5e2449e975ca8f0f014539cb1adf) #25
+  unreachable
+
+bb6:                                              ; preds = %bb2
+  %_0.i = add nuw i64 %iter.sroa.0.096, 1
+  %125 = getelementptr inbounds [0 x i8], ptr %erasure.0, i64 0, i64 %iter.sroa.0.096
+  %126 = load i8, ptr %125, align 1, !range !249, !noundef !3
+  %_15 = zext i8 %126 to i16
+  %127 = getelementptr inbounds [0 x i16], ptr %log_walsh2.0, i64 0, i64 %iter.sroa.0.096
+  store i16 %_15, ptr %127, align 2
+  %exitcond117.not = icmp eq i64 %_0.i, %_0.0.sroa.speculated.i
+  br i1 %exitcond117.not, label %bb7.preheader, label %bb2, !llvm.loop !305
+
+panic22:                                          ; preds = %bb2
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %log_walsh2.1, i64 noundef %log_walsh2.1, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_0770269ece59578a7bd2110f9f31c864) #25
+  unreachable
+}
+
+; <reed_solomon_novelpoly::novel_poly_basis::CodeParams as core::fmt::Debug>::fmt
+; Function Attrs: nonlazybind uwtable
+define noundef zeroext i1 @"_ZN89_$LT$reed_solomon_novelpoly..novel_poly_basis..CodeParams$u20$as$u20$core..fmt..Debug$GT$3fmt17h30a235673ee44f14E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self, ptr noalias noundef align 8 dereferenceable(64) %f) unnamed_addr #0 {
+start:
+  %_13 = alloca ptr, align 8
+  %_9 = getelementptr inbounds %"novel_poly_basis::CodeParams", ptr %self, i64 0, i32 1
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_13)
+  %0 = getelementptr inbounds %"novel_poly_basis::CodeParams", ptr %self, i64 0, i32 2
+  store ptr %0, ptr %_13, align 8
+; call core::fmt::Formatter::debug_struct_field3_finish
+  %_0 = call noundef zeroext i1 @_ZN4core3fmt9Formatter26debug_struct_field3_finish17hb6f6e1d1fccb9bb5E(ptr noalias noundef nonnull align 8 dereferenceable(64) %f, ptr noalias noundef nonnull readonly align 1 @alloc_62d755d4af4d628bab9af0e41ac2cae4, i64 noundef 10, ptr noalias noundef nonnull readonly align 1 @alloc_e09e9ac7227dea4ed31edb4bbc3d6adf, i64 noundef 1, ptr noundef nonnull align 1 %self, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.6, ptr noalias noundef nonnull readonly align 1 @alloc_3629cf37e45f4088c031426ac602bbb6, i64 noundef 1, ptr noundef nonnull align 1 %_9, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.6, ptr noalias noundef nonnull readonly align 1 @alloc_8cf0898dc872bc8dff55f49d0e992a3c, i64 noundef 8, ptr noundef nonnull align 1 %_13, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.4)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_13)
+  ret i1 %_0
+}
+
+; <reed_solomon_novelpoly::novel_poly_basis::ReedSolomon as core::fmt::Debug>::fmt
+; Function Attrs: nonlazybind uwtable
+define noundef zeroext i1 @"_ZN90_$LT$reed_solomon_novelpoly..novel_poly_basis..ReedSolomon$u20$as$u20$core..fmt..Debug$GT$3fmt17h0d8222201d32c88aE"(ptr noalias noundef readonly align 8 dereferenceable(24) %self, ptr noalias noundef align 8 dereferenceable(64) %f) unnamed_addr #0 {
+start:
+  %_13 = alloca ptr, align 8
+  %_9 = getelementptr inbounds %"novel_poly_basis::ReedSolomon", ptr %self, i64 0, i32 1
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_13)
+  %0 = getelementptr inbounds %"novel_poly_basis::ReedSolomon", ptr %self, i64 0, i32 2
+  store ptr %0, ptr %_13, align 8
+; call core::fmt::Formatter::debug_struct_field3_finish
+  %_0 = call noundef zeroext i1 @_ZN4core3fmt9Formatter26debug_struct_field3_finish17hb6f6e1d1fccb9bb5E(ptr noalias noundef nonnull align 8 dereferenceable(64) %f, ptr noalias noundef nonnull readonly align 1 @alloc_30865dd7b0ebe566610fbe04988584e4, i64 noundef 11, ptr noalias noundef nonnull readonly align 1 @alloc_e09e9ac7227dea4ed31edb4bbc3d6adf, i64 noundef 1, ptr noundef nonnull align 1 %self, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.6, ptr noalias noundef nonnull readonly align 1 @alloc_3629cf37e45f4088c031426ac602bbb6, i64 noundef 1, ptr noundef nonnull align 1 %_9, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.6, ptr noalias noundef nonnull readonly align 1 @alloc_8cf0898dc872bc8dff55f49d0e992a3c, i64 noundef 8, ptr noundef nonnull align 1 %_13, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.4)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_13)
+  ret i1 %_0
+}
+
+; <reed_solomon_novelpoly::wrapped_shard::WrappedShard as core::fmt::Debug>::fmt
+; Function Attrs: nonlazybind uwtable
+define noundef zeroext i1 @"_ZN88_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..fmt..Debug$GT$3fmt17h056e564639bfd633E"(ptr noalias noundef readonly align 8 dereferenceable(24) %self, ptr noalias noundef align 8 dereferenceable(64) %f) unnamed_addr #0 {
+start:
+  %_7 = alloca ptr, align 8
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_7)
+  store ptr %self, ptr %_7, align 8
+; call core::fmt::Formatter::debug_struct_field1_finish
+  %_0 = call noundef zeroext i1 @_ZN4core3fmt9Formatter26debug_struct_field1_finish17he206a7683441c471E(ptr noalias noundef nonnull align 8 dereferenceable(64) %f, ptr noalias noundef nonnull readonly align 1 @alloc_b0193283e17cf8976adff67317af9b3b, i64 noundef 12, ptr noalias noundef nonnull readonly align 1 @alloc_6c342f467cee9eb46aaa013cf1ccd49c, i64 noundef 5, ptr noundef nonnull align 1 %_7, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.7)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_7)
+  ret i1 %_0
+}
+
+; reed_solomon_novelpoly::field::f2e16::AFFT::__static_init_initializer
+; Function Attrs: nonlazybind uwtable
+define void @_ZN22reed_solomon_novelpoly5field5f2e164AFFT25__static_init_initializer17heef256c84ca9d3d1E() unnamed_addr #0 personality ptr @rust_eh_personality {
+start:
+  %log_walsh4.i.i = alloca [65536 x i16], align 2
+  %exp_table.i.i = alloca [65536 x i16], align 2
+  %log_table.i.i = alloca [65536 x i16], align 16
+  %skews_multiplier.i = alloca [65535 x i16], align 2
+  %skews_additive.i = alloca [65535 x i16], align 2
+  %base.i = alloca [15 x i16], align 16
+  %_4.i = alloca { [65536 x i16], [65536 x i16], [65536 x i16] }, align 2
+  %log_walsh.i = alloca [65536 x i16], align 2
+  %exp_table.i = alloca [65536 x i16], align 2
+  %log_table.i = alloca [65536 x i16], align 2
+  %__static_init_expr_result = alloca %"field::f2e16::AdditiveFFT", align 2
+  call void @llvm.lifetime.start.p0(i64 524286, ptr nonnull %__static_init_expr_result)
+  call void @llvm.lifetime.start.p0(i64 131072, ptr nonnull %log_walsh.i)
+  call void @llvm.lifetime.start.p0(i64 393216, ptr nonnull %_4.i)
+  call void @llvm.lifetime.start.p0(i64 131072, ptr nonnull %log_table.i.i), !noalias !306
+  %0 = getelementptr inbounds i8, ptr %log_table.i.i, i64 128
+  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(131072) %0, i8 0, i64 130944, i1 false), !noalias !306
+  call void @llvm.lifetime.start.p0(i64 131072, ptr nonnull %exp_table.i.i), !noalias !306
+  %1 = getelementptr inbounds i8, ptr %exp_table.i.i, i64 2
+  call void @llvm.memset.p0.i64(ptr noundef nonnull align 2 dereferenceable(131072) %1, i8 0, i64 131070, i1 false), !noalias !306
+  br label %bb2.i.i
+
+bb7.i.i:                                          ; preds = %bb3.i65.i
+  store i16 -1, ptr %exp_table.i.i, align 2, !noalias !306
+  store <8 x i16> <i16 0, i16 1, i16 -21302, i16 -21301, i16 15374, i16 15375, i16 -28476, i16 -28475>, ptr %log_table.i.i, align 16, !noalias !306
+  %2 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 8
+  store <8 x i16> <i16 5694, i16 5695, i16 -17676, i16 -17675, i16 10800, i16 10801, i16 -30982, i16 -30981>, ptr %2, align 16, !noalias !306
+  %3 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 16
+  store <8 x i16> <i16 -14974, i16 -14973, i16 26952, i16 26953, i16 -1652, i16 -1651, i16 21830, i16 21831>, ptr %3, align 16, !noalias !306
+  %4 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 24
+  store <8 x i16> <i16 -11332, i16 -11331, i16 32630, i16 32631, i16 -4174, i16 -4173, i16 17272, i16 17273>, ptr %4, align 16, !noalias !306
+  %5 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 32
+  store <8 x i16> <i16 -4818, i16 -4817, i16 16868, i16 16869, i16 -12000, i16 -11999, i16 32234, i16 32235>, ptr %5, align 16, !noalias !306
+  %6 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 40
+  store <8 x i16> <i16 -1264, i16 -1263, i16 22490, i16 22491, i16 -14562, i16 -14561, i16 27604, i16 27605>, ptr %6, align 16, !noalias !306
+  %7 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 48
+  store <8 x i16> <i16 10412, i16 10413, i16 -31642, i16 -31641, i16 5282, i16 5283, i16 -18328, i16 -18327>, ptr %7, align 16, !noalias !306
+  %8 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 56
+  store <8 x i16> <i16 16018, i16 16019, i16 -28072, i16 -28071, i16 668, i16 669, i16 -20906, i16 -20905>, ptr %8, align 16, !noalias !306
+  %wide.load = load <8 x i16>, ptr %log_table.i.i, align 16, !noalias !306
+  %9 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 64
+  %10 = xor <8 x i16> %wide.load, <i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340>
+  store <8 x i16> %10, ptr %9, align 16, !noalias !306
+  %11 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 8
+  %wide.load.1 = load <8 x i16>, ptr %11, align 16, !noalias !306
+  %12 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 72
+  %13 = xor <8 x i16> %wide.load.1, <i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340>
+  store <8 x i16> %13, ptr %12, align 16, !noalias !306
+  %14 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 16
+  %wide.load.2 = load <8 x i16>, ptr %14, align 16, !noalias !306
+  %15 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 80
+  %16 = xor <8 x i16> %wide.load.2, <i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340>
+  store <8 x i16> %16, ptr %15, align 16, !noalias !306
+  %17 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 24
+  %wide.load.3 = load <8 x i16>, ptr %17, align 16, !noalias !306
+  %18 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 88
+  %19 = xor <8 x i16> %wide.load.3, <i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340>
+  store <8 x i16> %19, ptr %18, align 16, !noalias !306
+  %20 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 32
+  %wide.load.4 = load <8 x i16>, ptr %20, align 16, !noalias !306
+  %21 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 96
+  %22 = xor <8 x i16> %wide.load.4, <i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340>
+  store <8 x i16> %22, ptr %21, align 16, !noalias !306
+  %23 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 40
+  %wide.load.5 = load <8 x i16>, ptr %23, align 16, !noalias !306
+  %24 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 104
+  %25 = xor <8 x i16> %wide.load.5, <i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340>
+  store <8 x i16> %25, ptr %24, align 16, !noalias !306
+  %26 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 48
+  %wide.load.6 = load <8 x i16>, ptr %26, align 16, !noalias !306
+  %27 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 112
+  %28 = xor <8 x i16> %wide.load.6, <i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340>
+  store <8 x i16> %28, ptr %27, align 16, !noalias !306
+  %29 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 56
+  %wide.load.7 = load <8 x i16>, ptr %29, align 16, !noalias !306
+  %30 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 120
+  %31 = xor <8 x i16> %wide.load.7, <i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340, i16 -28340>
+  store <8 x i16> %31, ptr %30, align 16, !noalias !306
+  %wide.load24 = load <8 x i16>, ptr %log_table.i.i, align 16, !noalias !306
+  %32 = getelementptr inbounds i16, ptr %log_table.i.i, i64 8
+  %wide.load25 = load <8 x i16>, ptr %32, align 16, !noalias !306
+  %33 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 128
+  %34 = xor <8 x i16> %wide.load24, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %35 = xor <8 x i16> %wide.load25, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  store <8 x i16> %34, ptr %33, align 16, !noalias !306
+  %36 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 136
+  store <8 x i16> %35, ptr %36, align 16, !noalias !306
+  %37 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 16
+  %wide.load24.1 = load <8 x i16>, ptr %37, align 16, !noalias !306
+  %38 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 24
+  %wide.load25.1 = load <8 x i16>, ptr %38, align 16, !noalias !306
+  %39 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 144
+  %40 = xor <8 x i16> %wide.load24.1, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %41 = xor <8 x i16> %wide.load25.1, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  store <8 x i16> %40, ptr %39, align 16, !noalias !306
+  %42 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 152
+  store <8 x i16> %41, ptr %42, align 16, !noalias !306
+  %43 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 32
+  %wide.load24.2 = load <8 x i16>, ptr %43, align 16, !noalias !306
+  %44 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 40
+  %wide.load25.2 = load <8 x i16>, ptr %44, align 16, !noalias !306
+  %45 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 160
+  %46 = xor <8 x i16> %wide.load24.2, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %47 = xor <8 x i16> %wide.load25.2, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  store <8 x i16> %46, ptr %45, align 16, !noalias !306
+  %48 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 168
+  store <8 x i16> %47, ptr %48, align 16, !noalias !306
+  %49 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 48
+  %wide.load24.3 = load <8 x i16>, ptr %49, align 16, !noalias !306
+  %50 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 56
+  %wide.load25.3 = load <8 x i16>, ptr %50, align 16, !noalias !306
+  %51 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 176
+  %52 = xor <8 x i16> %wide.load24.3, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %53 = xor <8 x i16> %wide.load25.3, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  store <8 x i16> %52, ptr %51, align 16, !noalias !306
+  %54 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 184
+  store <8 x i16> %53, ptr %54, align 16, !noalias !306
+  %55 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 64
+  %wide.load24.4 = load <8 x i16>, ptr %55, align 16, !noalias !306
+  %56 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 72
+  %wide.load25.4 = load <8 x i16>, ptr %56, align 16, !noalias !306
+  %57 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 192
+  %58 = xor <8 x i16> %wide.load24.4, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %59 = xor <8 x i16> %wide.load25.4, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  store <8 x i16> %58, ptr %57, align 16, !noalias !306
+  %60 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 200
+  store <8 x i16> %59, ptr %60, align 16, !noalias !306
+  %61 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 80
+  %wide.load24.5 = load <8 x i16>, ptr %61, align 16, !noalias !306
+  %62 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 88
+  %wide.load25.5 = load <8 x i16>, ptr %62, align 16, !noalias !306
+  %63 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 208
+  %64 = xor <8 x i16> %wide.load24.5, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %65 = xor <8 x i16> %wide.load25.5, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  store <8 x i16> %64, ptr %63, align 16, !noalias !306
+  %66 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 216
+  store <8 x i16> %65, ptr %66, align 16, !noalias !306
+  %67 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 96
+  %wide.load24.6 = load <8 x i16>, ptr %67, align 16, !noalias !306
+  %68 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 104
+  %wide.load25.6 = load <8 x i16>, ptr %68, align 16, !noalias !306
+  %69 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 224
+  %70 = xor <8 x i16> %wide.load24.6, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %71 = xor <8 x i16> %wide.load25.6, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  store <8 x i16> %70, ptr %69, align 16, !noalias !306
+  %72 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 232
+  store <8 x i16> %71, ptr %72, align 16, !noalias !306
+  %73 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 112
+  %wide.load24.7 = load <8 x i16>, ptr %73, align 16, !noalias !306
+  %74 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 120
+  %wide.load25.7 = load <8 x i16>, ptr %74, align 16, !noalias !306
+  %75 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 240
+  %76 = xor <8 x i16> %wide.load24.7, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  %77 = xor <8 x i16> %wide.load25.7, <i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402, i16 16402>
+  store <8 x i16> %76, ptr %75, align 16, !noalias !306
+  %78 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 248
+  store <8 x i16> %77, ptr %78, align 16, !noalias !306
+  %wide.load34 = load <8 x i16>, ptr %log_table.i.i, align 16, !noalias !306
+  %79 = getelementptr inbounds i16, ptr %log_table.i.i, i64 8
+  %wide.load35 = load <8 x i16>, ptr %79, align 16, !noalias !306
+  %80 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 256
+  %81 = xor <8 x i16> %wide.load34, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %82 = xor <8 x i16> %wide.load35, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  store <8 x i16> %81, ptr %80, align 16, !noalias !306
+  %83 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 264
+  store <8 x i16> %82, ptr %83, align 16, !noalias !306
+  %84 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 16
+  %wide.load34.1 = load <8 x i16>, ptr %84, align 16, !noalias !306
+  %85 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 24
+  %wide.load35.1 = load <8 x i16>, ptr %85, align 16, !noalias !306
+  %86 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 272
+  %87 = xor <8 x i16> %wide.load34.1, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %88 = xor <8 x i16> %wide.load35.1, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  store <8 x i16> %87, ptr %86, align 16, !noalias !306
+  %89 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 280
+  store <8 x i16> %88, ptr %89, align 16, !noalias !306
+  %90 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 32
+  %wide.load34.2 = load <8 x i16>, ptr %90, align 16, !noalias !306
+  %91 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 40
+  %wide.load35.2 = load <8 x i16>, ptr %91, align 16, !noalias !306
+  %92 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 288
+  %93 = xor <8 x i16> %wide.load34.2, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %94 = xor <8 x i16> %wide.load35.2, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  store <8 x i16> %93, ptr %92, align 16, !noalias !306
+  %95 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 296
+  store <8 x i16> %94, ptr %95, align 16, !noalias !306
+  %96 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 48
+  %wide.load34.3 = load <8 x i16>, ptr %96, align 16, !noalias !306
+  %97 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 56
+  %wide.load35.3 = load <8 x i16>, ptr %97, align 16, !noalias !306
+  %98 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 304
+  %99 = xor <8 x i16> %wide.load34.3, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %100 = xor <8 x i16> %wide.load35.3, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  store <8 x i16> %99, ptr %98, align 16, !noalias !306
+  %101 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 312
+  store <8 x i16> %100, ptr %101, align 16, !noalias !306
+  %102 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 64
+  %wide.load34.4 = load <8 x i16>, ptr %102, align 16, !noalias !306
+  %103 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 72
+  %wide.load35.4 = load <8 x i16>, ptr %103, align 16, !noalias !306
+  %104 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 320
+  %105 = xor <8 x i16> %wide.load34.4, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %106 = xor <8 x i16> %wide.load35.4, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  store <8 x i16> %105, ptr %104, align 16, !noalias !306
+  %107 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 328
+  store <8 x i16> %106, ptr %107, align 16, !noalias !306
+  %108 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 80
+  %wide.load34.5 = load <8 x i16>, ptr %108, align 16, !noalias !306
+  %109 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 88
+  %wide.load35.5 = load <8 x i16>, ptr %109, align 16, !noalias !306
+  %110 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 336
+  %111 = xor <8 x i16> %wide.load34.5, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %112 = xor <8 x i16> %wide.load35.5, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  store <8 x i16> %111, ptr %110, align 16, !noalias !306
+  %113 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 344
+  store <8 x i16> %112, ptr %113, align 16, !noalias !306
+  %114 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 96
+  %wide.load34.6 = load <8 x i16>, ptr %114, align 16, !noalias !306
+  %115 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 104
+  %wide.load35.6 = load <8 x i16>, ptr %115, align 16, !noalias !306
+  %116 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 352
+  %117 = xor <8 x i16> %wide.load34.6, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %118 = xor <8 x i16> %wide.load35.6, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  store <8 x i16> %117, ptr %116, align 16, !noalias !306
+  %119 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 360
+  store <8 x i16> %118, ptr %119, align 16, !noalias !306
+  %120 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 112
+  %wide.load34.7 = load <8 x i16>, ptr %120, align 16, !noalias !306
+  %121 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 120
+  %wide.load35.7 = load <8 x i16>, ptr %121, align 16, !noalias !306
+  %122 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 368
+  %123 = xor <8 x i16> %wide.load34.7, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %124 = xor <8 x i16> %wide.load35.7, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  store <8 x i16> %123, ptr %122, align 16, !noalias !306
+  %125 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 376
+  store <8 x i16> %124, ptr %125, align 16, !noalias !306
+  %126 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 128
+  %wide.load34.8 = load <8 x i16>, ptr %126, align 16, !noalias !306
+  %127 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 136
+  %wide.load35.8 = load <8 x i16>, ptr %127, align 16, !noalias !306
+  %128 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 384
+  %129 = xor <8 x i16> %wide.load34.8, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %130 = xor <8 x i16> %wide.load35.8, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  store <8 x i16> %129, ptr %128, align 16, !noalias !306
+  %131 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 392
+  store <8 x i16> %130, ptr %131, align 16, !noalias !306
+  %132 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 144
+  %wide.load34.9 = load <8 x i16>, ptr %132, align 16, !noalias !306
+  %133 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 152
+  %wide.load35.9 = load <8 x i16>, ptr %133, align 16, !noalias !306
+  %134 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 400
+  %135 = xor <8 x i16> %wide.load34.9, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %136 = xor <8 x i16> %wide.load35.9, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  store <8 x i16> %135, ptr %134, align 16, !noalias !306
+  %137 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 408
+  store <8 x i16> %136, ptr %137, align 16, !noalias !306
+  %138 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 160
+  %wide.load34.10 = load <8 x i16>, ptr %138, align 16, !noalias !306
+  %139 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 168
+  %wide.load35.10 = load <8 x i16>, ptr %139, align 16, !noalias !306
+  %140 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 416
+  %141 = xor <8 x i16> %wide.load34.10, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %142 = xor <8 x i16> %wide.load35.10, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  store <8 x i16> %141, ptr %140, align 16, !noalias !306
+  %143 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 424
+  store <8 x i16> %142, ptr %143, align 16, !noalias !306
+  %144 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 176
+  %wide.load34.11 = load <8 x i16>, ptr %144, align 16, !noalias !306
+  %145 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 184
+  %wide.load35.11 = load <8 x i16>, ptr %145, align 16, !noalias !306
+  %146 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 432
+  %147 = xor <8 x i16> %wide.load34.11, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %148 = xor <8 x i16> %wide.load35.11, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  store <8 x i16> %147, ptr %146, align 16, !noalias !306
+  %149 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 440
+  store <8 x i16> %148, ptr %149, align 16, !noalias !306
+  %150 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 192
+  %wide.load34.12 = load <8 x i16>, ptr %150, align 16, !noalias !306
+  %151 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 200
+  %wide.load35.12 = load <8 x i16>, ptr %151, align 16, !noalias !306
+  %152 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 448
+  %153 = xor <8 x i16> %wide.load34.12, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %154 = xor <8 x i16> %wide.load35.12, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  store <8 x i16> %153, ptr %152, align 16, !noalias !306
+  %155 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 456
+  store <8 x i16> %154, ptr %155, align 16, !noalias !306
+  %156 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 208
+  %wide.load34.13 = load <8 x i16>, ptr %156, align 16, !noalias !306
+  %157 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 216
+  %wide.load35.13 = load <8 x i16>, ptr %157, align 16, !noalias !306
+  %158 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 464
+  %159 = xor <8 x i16> %wide.load34.13, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %160 = xor <8 x i16> %wide.load35.13, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  store <8 x i16> %159, ptr %158, align 16, !noalias !306
+  %161 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 472
+  store <8 x i16> %160, ptr %161, align 16, !noalias !306
+  %162 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 224
+  %wide.load34.14 = load <8 x i16>, ptr %162, align 16, !noalias !306
+  %163 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 232
+  %wide.load35.14 = load <8 x i16>, ptr %163, align 16, !noalias !306
+  %164 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 480
+  %165 = xor <8 x i16> %wide.load34.14, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %166 = xor <8 x i16> %wide.load35.14, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  store <8 x i16> %165, ptr %164, align 16, !noalias !306
+  %167 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 488
+  store <8 x i16> %166, ptr %167, align 16, !noalias !306
+  %168 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 240
+  %wide.load34.15 = load <8 x i16>, ptr %168, align 16, !noalias !306
+  %169 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 248
+  %wide.load35.15 = load <8 x i16>, ptr %169, align 16, !noalias !306
+  %170 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 496
+  %171 = xor <8 x i16> %wide.load34.15, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  %172 = xor <8 x i16> %wide.load35.15, <i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800, i16 27800>
+  store <8 x i16> %171, ptr %170, align 16, !noalias !306
+  %173 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 504
+  store <8 x i16> %172, ptr %173, align 16, !noalias !306
+  %wide.load44 = load <8 x i16>, ptr %log_table.i.i, align 16, !noalias !306
+  %174 = getelementptr inbounds i16, ptr %log_table.i.i, i64 8
+  %wide.load45 = load <8 x i16>, ptr %174, align 16, !noalias !306
+  %175 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 512
+  %176 = xor <8 x i16> %wide.load44, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %177 = xor <8 x i16> %wide.load45, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %176, ptr %175, align 16, !noalias !306
+  %178 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 520
+  store <8 x i16> %177, ptr %178, align 16, !noalias !306
+  %179 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 16
+  %wide.load44.1 = load <8 x i16>, ptr %179, align 16, !noalias !306
+  %180 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 24
+  %wide.load45.1 = load <8 x i16>, ptr %180, align 16, !noalias !306
+  %181 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 528
+  %182 = xor <8 x i16> %wide.load44.1, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %183 = xor <8 x i16> %wide.load45.1, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %182, ptr %181, align 16, !noalias !306
+  %184 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 536
+  store <8 x i16> %183, ptr %184, align 16, !noalias !306
+  %185 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 32
+  %wide.load44.2 = load <8 x i16>, ptr %185, align 16, !noalias !306
+  %186 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 40
+  %wide.load45.2 = load <8 x i16>, ptr %186, align 16, !noalias !306
+  %187 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 544
+  %188 = xor <8 x i16> %wide.load44.2, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %189 = xor <8 x i16> %wide.load45.2, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %188, ptr %187, align 16, !noalias !306
+  %190 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 552
+  store <8 x i16> %189, ptr %190, align 16, !noalias !306
+  %191 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 48
+  %wide.load44.3 = load <8 x i16>, ptr %191, align 16, !noalias !306
+  %192 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 56
+  %wide.load45.3 = load <8 x i16>, ptr %192, align 16, !noalias !306
+  %193 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 560
+  %194 = xor <8 x i16> %wide.load44.3, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %195 = xor <8 x i16> %wide.load45.3, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %194, ptr %193, align 16, !noalias !306
+  %196 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 568
+  store <8 x i16> %195, ptr %196, align 16, !noalias !306
+  %197 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 64
+  %wide.load44.4 = load <8 x i16>, ptr %197, align 16, !noalias !306
+  %198 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 72
+  %wide.load45.4 = load <8 x i16>, ptr %198, align 16, !noalias !306
+  %199 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 576
+  %200 = xor <8 x i16> %wide.load44.4, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %201 = xor <8 x i16> %wide.load45.4, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %200, ptr %199, align 16, !noalias !306
+  %202 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 584
+  store <8 x i16> %201, ptr %202, align 16, !noalias !306
+  %203 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 80
+  %wide.load44.5 = load <8 x i16>, ptr %203, align 16, !noalias !306
+  %204 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 88
+  %wide.load45.5 = load <8 x i16>, ptr %204, align 16, !noalias !306
+  %205 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 592
+  %206 = xor <8 x i16> %wide.load44.5, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %207 = xor <8 x i16> %wide.load45.5, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %206, ptr %205, align 16, !noalias !306
+  %208 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 600
+  store <8 x i16> %207, ptr %208, align 16, !noalias !306
+  %209 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 96
+  %wide.load44.6 = load <8 x i16>, ptr %209, align 16, !noalias !306
+  %210 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 104
+  %wide.load45.6 = load <8 x i16>, ptr %210, align 16, !noalias !306
+  %211 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 608
+  %212 = xor <8 x i16> %wide.load44.6, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %213 = xor <8 x i16> %wide.load45.6, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %212, ptr %211, align 16, !noalias !306
+  %214 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 616
+  store <8 x i16> %213, ptr %214, align 16, !noalias !306
+  %215 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 112
+  %wide.load44.7 = load <8 x i16>, ptr %215, align 16, !noalias !306
+  %216 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 120
+  %wide.load45.7 = load <8 x i16>, ptr %216, align 16, !noalias !306
+  %217 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 624
+  %218 = xor <8 x i16> %wide.load44.7, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %219 = xor <8 x i16> %wide.load45.7, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %218, ptr %217, align 16, !noalias !306
+  %220 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 632
+  store <8 x i16> %219, ptr %220, align 16, !noalias !306
+  %221 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 128
+  %wide.load44.8 = load <8 x i16>, ptr %221, align 16, !noalias !306
+  %222 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 136
+  %wide.load45.8 = load <8 x i16>, ptr %222, align 16, !noalias !306
+  %223 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 640
+  %224 = xor <8 x i16> %wide.load44.8, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %225 = xor <8 x i16> %wide.load45.8, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %224, ptr %223, align 16, !noalias !306
+  %226 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 648
+  store <8 x i16> %225, ptr %226, align 16, !noalias !306
+  %227 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 144
+  %wide.load44.9 = load <8 x i16>, ptr %227, align 16, !noalias !306
+  %228 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 152
+  %wide.load45.9 = load <8 x i16>, ptr %228, align 16, !noalias !306
+  %229 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 656
+  %230 = xor <8 x i16> %wide.load44.9, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %231 = xor <8 x i16> %wide.load45.9, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %230, ptr %229, align 16, !noalias !306
+  %232 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 664
+  store <8 x i16> %231, ptr %232, align 16, !noalias !306
+  %233 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 160
+  %wide.load44.10 = load <8 x i16>, ptr %233, align 16, !noalias !306
+  %234 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 168
+  %wide.load45.10 = load <8 x i16>, ptr %234, align 16, !noalias !306
+  %235 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 672
+  %236 = xor <8 x i16> %wide.load44.10, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %237 = xor <8 x i16> %wide.load45.10, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %236, ptr %235, align 16, !noalias !306
+  %238 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 680
+  store <8 x i16> %237, ptr %238, align 16, !noalias !306
+  %239 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 176
+  %wide.load44.11 = load <8 x i16>, ptr %239, align 16, !noalias !306
+  %240 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 184
+  %wide.load45.11 = load <8 x i16>, ptr %240, align 16, !noalias !306
+  %241 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 688
+  %242 = xor <8 x i16> %wide.load44.11, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %243 = xor <8 x i16> %wide.load45.11, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %242, ptr %241, align 16, !noalias !306
+  %244 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 696
+  store <8 x i16> %243, ptr %244, align 16, !noalias !306
+  %245 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 192
+  %wide.load44.12 = load <8 x i16>, ptr %245, align 16, !noalias !306
+  %246 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 200
+  %wide.load45.12 = load <8 x i16>, ptr %246, align 16, !noalias !306
+  %247 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 704
+  %248 = xor <8 x i16> %wide.load44.12, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %249 = xor <8 x i16> %wide.load45.12, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %248, ptr %247, align 16, !noalias !306
+  %250 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 712
+  store <8 x i16> %249, ptr %250, align 16, !noalias !306
+  %251 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 208
+  %wide.load44.13 = load <8 x i16>, ptr %251, align 16, !noalias !306
+  %252 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 216
+  %wide.load45.13 = load <8 x i16>, ptr %252, align 16, !noalias !306
+  %253 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 720
+  %254 = xor <8 x i16> %wide.load44.13, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %255 = xor <8 x i16> %wide.load45.13, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %254, ptr %253, align 16, !noalias !306
+  %256 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 728
+  store <8 x i16> %255, ptr %256, align 16, !noalias !306
+  %257 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 224
+  %wide.load44.14 = load <8 x i16>, ptr %257, align 16, !noalias !306
+  %258 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 232
+  %wide.load45.14 = load <8 x i16>, ptr %258, align 16, !noalias !306
+  %259 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 736
+  %260 = xor <8 x i16> %wide.load44.14, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %261 = xor <8 x i16> %wide.load45.14, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %260, ptr %259, align 16, !noalias !306
+  %262 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 744
+  store <8 x i16> %261, ptr %262, align 16, !noalias !306
+  %263 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 240
+  %wide.load44.15 = load <8 x i16>, ptr %263, align 16, !noalias !306
+  %264 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 248
+  %wide.load45.15 = load <8 x i16>, ptr %264, align 16, !noalias !306
+  %265 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 752
+  %266 = xor <8 x i16> %wide.load44.15, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %267 = xor <8 x i16> %wide.load45.15, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %266, ptr %265, align 16, !noalias !306
+  %268 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 760
+  store <8 x i16> %267, ptr %268, align 16, !noalias !306
+  %269 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 256
+  %wide.load44.16 = load <8 x i16>, ptr %269, align 16, !noalias !306
+  %270 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 264
+  %wide.load45.16 = load <8 x i16>, ptr %270, align 16, !noalias !306
+  %271 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 768
+  %272 = xor <8 x i16> %wide.load44.16, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %273 = xor <8 x i16> %wide.load45.16, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %272, ptr %271, align 16, !noalias !306
+  %274 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 776
+  store <8 x i16> %273, ptr %274, align 16, !noalias !306
+  %275 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 272
+  %wide.load44.17 = load <8 x i16>, ptr %275, align 16, !noalias !306
+  %276 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 280
+  %wide.load45.17 = load <8 x i16>, ptr %276, align 16, !noalias !306
+  %277 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 784
+  %278 = xor <8 x i16> %wide.load44.17, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %279 = xor <8 x i16> %wide.load45.17, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %278, ptr %277, align 16, !noalias !306
+  %280 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 792
+  store <8 x i16> %279, ptr %280, align 16, !noalias !306
+  %281 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 288
+  %wide.load44.18 = load <8 x i16>, ptr %281, align 16, !noalias !306
+  %282 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 296
+  %wide.load45.18 = load <8 x i16>, ptr %282, align 16, !noalias !306
+  %283 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 800
+  %284 = xor <8 x i16> %wide.load44.18, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %285 = xor <8 x i16> %wide.load45.18, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %284, ptr %283, align 16, !noalias !306
+  %286 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 808
+  store <8 x i16> %285, ptr %286, align 16, !noalias !306
+  %287 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 304
+  %wide.load44.19 = load <8 x i16>, ptr %287, align 16, !noalias !306
+  %288 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 312
+  %wide.load45.19 = load <8 x i16>, ptr %288, align 16, !noalias !306
+  %289 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 816
+  %290 = xor <8 x i16> %wide.load44.19, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %291 = xor <8 x i16> %wide.load45.19, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %290, ptr %289, align 16, !noalias !306
+  %292 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 824
+  store <8 x i16> %291, ptr %292, align 16, !noalias !306
+  %293 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 320
+  %wide.load44.20 = load <8 x i16>, ptr %293, align 16, !noalias !306
+  %294 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 328
+  %wide.load45.20 = load <8 x i16>, ptr %294, align 16, !noalias !306
+  %295 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 832
+  %296 = xor <8 x i16> %wide.load44.20, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %297 = xor <8 x i16> %wide.load45.20, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %296, ptr %295, align 16, !noalias !306
+  %298 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 840
+  store <8 x i16> %297, ptr %298, align 16, !noalias !306
+  %299 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 336
+  %wide.load44.21 = load <8 x i16>, ptr %299, align 16, !noalias !306
+  %300 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 344
+  %wide.load45.21 = load <8 x i16>, ptr %300, align 16, !noalias !306
+  %301 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 848
+  %302 = xor <8 x i16> %wide.load44.21, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %303 = xor <8 x i16> %wide.load45.21, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %302, ptr %301, align 16, !noalias !306
+  %304 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 856
+  store <8 x i16> %303, ptr %304, align 16, !noalias !306
+  %305 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 352
+  %wide.load44.22 = load <8 x i16>, ptr %305, align 16, !noalias !306
+  %306 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 360
+  %wide.load45.22 = load <8 x i16>, ptr %306, align 16, !noalias !306
+  %307 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 864
+  %308 = xor <8 x i16> %wide.load44.22, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %309 = xor <8 x i16> %wide.load45.22, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %308, ptr %307, align 16, !noalias !306
+  %310 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 872
+  store <8 x i16> %309, ptr %310, align 16, !noalias !306
+  %311 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 368
+  %wide.load44.23 = load <8 x i16>, ptr %311, align 16, !noalias !306
+  %312 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 376
+  %wide.load45.23 = load <8 x i16>, ptr %312, align 16, !noalias !306
+  %313 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 880
+  %314 = xor <8 x i16> %wide.load44.23, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %315 = xor <8 x i16> %wide.load45.23, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %314, ptr %313, align 16, !noalias !306
+  %316 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 888
+  store <8 x i16> %315, ptr %316, align 16, !noalias !306
+  %317 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 384
+  %wide.load44.24 = load <8 x i16>, ptr %317, align 16, !noalias !306
+  %318 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 392
+  %wide.load45.24 = load <8 x i16>, ptr %318, align 16, !noalias !306
+  %319 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 896
+  %320 = xor <8 x i16> %wide.load44.24, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %321 = xor <8 x i16> %wide.load45.24, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %320, ptr %319, align 16, !noalias !306
+  %322 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 904
+  store <8 x i16> %321, ptr %322, align 16, !noalias !306
+  %323 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 400
+  %wide.load44.25 = load <8 x i16>, ptr %323, align 16, !noalias !306
+  %324 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 408
+  %wide.load45.25 = load <8 x i16>, ptr %324, align 16, !noalias !306
+  %325 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 912
+  %326 = xor <8 x i16> %wide.load44.25, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %327 = xor <8 x i16> %wide.load45.25, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %326, ptr %325, align 16, !noalias !306
+  %328 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 920
+  store <8 x i16> %327, ptr %328, align 16, !noalias !306
+  %329 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 416
+  %wide.load44.26 = load <8 x i16>, ptr %329, align 16, !noalias !306
+  %330 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 424
+  %wide.load45.26 = load <8 x i16>, ptr %330, align 16, !noalias !306
+  %331 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 928
+  %332 = xor <8 x i16> %wide.load44.26, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %333 = xor <8 x i16> %wide.load45.26, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %332, ptr %331, align 16, !noalias !306
+  %334 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 936
+  store <8 x i16> %333, ptr %334, align 16, !noalias !306
+  %335 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 432
+  %wide.load44.27 = load <8 x i16>, ptr %335, align 16, !noalias !306
+  %336 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 440
+  %wide.load45.27 = load <8 x i16>, ptr %336, align 16, !noalias !306
+  %337 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 944
+  %338 = xor <8 x i16> %wide.load44.27, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %339 = xor <8 x i16> %wide.load45.27, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %338, ptr %337, align 16, !noalias !306
+  %340 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 952
+  store <8 x i16> %339, ptr %340, align 16, !noalias !306
+  %341 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 448
+  %wide.load44.28 = load <8 x i16>, ptr %341, align 16, !noalias !306
+  %342 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 456
+  %wide.load45.28 = load <8 x i16>, ptr %342, align 16, !noalias !306
+  %343 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 960
+  %344 = xor <8 x i16> %wide.load44.28, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %345 = xor <8 x i16> %wide.load45.28, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %344, ptr %343, align 16, !noalias !306
+  %346 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 968
+  store <8 x i16> %345, ptr %346, align 16, !noalias !306
+  %347 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 464
+  %wide.load44.29 = load <8 x i16>, ptr %347, align 16, !noalias !306
+  %348 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 472
+  %wide.load45.29 = load <8 x i16>, ptr %348, align 16, !noalias !306
+  %349 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 976
+  %350 = xor <8 x i16> %wide.load44.29, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %351 = xor <8 x i16> %wide.load45.29, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %350, ptr %349, align 16, !noalias !306
+  %352 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 984
+  store <8 x i16> %351, ptr %352, align 16, !noalias !306
+  %353 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 480
+  %wide.load44.30 = load <8 x i16>, ptr %353, align 16, !noalias !306
+  %354 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 488
+  %wide.load45.30 = load <8 x i16>, ptr %354, align 16, !noalias !306
+  %355 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 992
+  %356 = xor <8 x i16> %wide.load44.30, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %357 = xor <8 x i16> %wide.load45.30, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %356, ptr %355, align 16, !noalias !306
+  %358 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 1000
+  store <8 x i16> %357, ptr %358, align 16, !noalias !306
+  %359 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 496
+  %wide.load44.31 = load <8 x i16>, ptr %359, align 16, !noalias !306
+  %360 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 504
+  %wide.load45.31 = load <8 x i16>, ptr %360, align 16, !noalias !306
+  %361 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 1008
+  %362 = xor <8 x i16> %wide.load44.31, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  %363 = xor <8 x i16> %wide.load45.31, <i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312, i16 4312>
+  store <8 x i16> %362, ptr %361, align 16, !noalias !306
+  %364 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 1016
+  store <8 x i16> %363, ptr %364, align 16, !noalias !306
+  br label %vector.body52
+
+bb2.i.i:                                          ; preds = %bb3.i65.i.1, %start
+  %state.037.i.i = phi i64 [ 1, %start ], [ %state.1.i.i.1, %bb3.i65.i.1 ]
+  %i.036.i.i = phi i64 [ 0, %start ], [ %538, %bb3.i65.i.1 ]
+  %_9.i64.i = icmp ult i64 %state.037.i.i, 65536
+  br i1 %_9.i64.i, label %bb3.i65.i, label %panic12.i.i, !prof !119
+
+bb27.i.i:                                         ; preds = %bb26.i.i
+  %_54.i.i = load i16, ptr %exp_table.i.i, align 2, !noalias !306, !noundef !3
+  %365 = getelementptr inbounds [65536 x i16], ptr %exp_table.i.i, i64 0, i64 65535
+  store i16 %_54.i.i, ptr %365, align 2, !noalias !306
+  call void @llvm.lifetime.start.p0(i64 131072, ptr nonnull %log_walsh4.i.i), !noalias !306
+  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(131072) %log_walsh4.i.i, ptr noundef nonnull align 16 dereferenceable(131072) %log_table.i.i, i64 131072, i1 false), !noalias !306
+  store i16 0, ptr %log_walsh4.i.i, align 2, !noalias !306
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !311)
+  br label %bb3.preheader.i.i.i
+
+bb3.preheader.i.i.i:                              ; preds = %bb14.i.i.i, %bb27.i.i
+  %depart_no.031.i.i.i = phi i64 [ %_56.i.i.i, %bb14.i.i.i ], [ 1, %bb27.i.i ]
+  %_56.i.i.i = shl i64 %depart_no.031.i.i.i, 1
+  %366 = shl i64 %depart_no.031.i.i.i, 2
+  %367 = mul i64 %depart_no.031.i.i.i, -2
+  %368 = add nsw i64 %depart_no.031.i.i.i, -1
+  %369 = add i64 %_56.i.i.i, 2
+  %370 = mul i64 %depart_no.031.i.i.i, -2
+  %371 = add nsw i64 %depart_no.031.i.i.i, -1
+  br label %bb6.i.preheader.i.i
+
+bb6.i.preheader.i.i:                              ; preds = %bb13.i.i.i, %bb3.preheader.i.i.i
+  %indvar = phi i64 [ %indvar.next, %bb13.i.i.i ], [ 0, %bb3.preheader.i.i.i ]
+  %indvars.iv.i.i.i = phi i64 [ %indvars.iv.next.i.i.i, %bb13.i.i.i ], [ %depart_no.031.i.i.i, %bb3.preheader.i.i.i ]
+  %j.029.i.i.i = phi i64 [ %405, %bb13.i.i.i ], [ 0, %bb3.preheader.i.i.i ]
+  %umax114 = call i64 @llvm.umax.i64(i64 %indvars.iv.i.i.i, i64 65536)
+  %372 = mul i64 %370, %indvar
+  %373 = sub i64 %372, %depart_no.031.i.i.i
+  %374 = add i64 %umax114, %373
+  %umax115 = call i64 @llvm.umax.i64(i64 %j.029.i.i.i, i64 65536)
+  %375 = add i64 %umax115, %372
+  %umin116 = call i64 @llvm.umin.i64(i64 %374, i64 %375)
+  %umin117 = call i64 @llvm.umin.i64(i64 %umin116, i64 %371)
+  %376 = add nuw nsw i64 %umin117, 1
+  %min.iters.check = icmp ult i64 %umin117, 8
+  br i1 %min.iters.check, label %bb6.i.i.i.preheader, label %vector.memcheck
+
+bb6.i.i.i.preheader:                              ; preds = %vector.body122, %vector.memcheck, %bb6.i.preheader.i.i
+  %i.028.i.i.i.ph = phi i64 [ %j.029.i.i.i, %vector.memcheck ], [ %j.029.i.i.i, %bb6.i.preheader.i.i ], [ %ind.end, %vector.body122 ]
+  br label %bb6.i.i.i
+
+vector.memcheck:                                  ; preds = %bb6.i.preheader.i.i
+  %377 = mul i64 %366, %indvar
+  %378 = add i64 %369, %377
+  %scevgep112 = getelementptr i8, ptr %log_walsh4.i.i, i64 %378
+  %umax = call i64 @llvm.umax.i64(i64 %indvars.iv.i.i.i, i64 65536)
+  %379 = mul i64 %367, %indvar
+  %380 = sub i64 %379, %depart_no.031.i.i.i
+  %381 = add i64 %umax, %380
+  %umax108 = call i64 @llvm.umax.i64(i64 %j.029.i.i.i, i64 65536)
+  %382 = add i64 %umax108, %379
+  %umin = call i64 @llvm.umin.i64(i64 %381, i64 %382)
+  %umin109 = call i64 @llvm.umin.i64(i64 %umin, i64 %368)
+  %383 = shl nsw i64 %umin109, 1
+  %scevgep113 = getelementptr i8, ptr %scevgep112, i64 %383
+  %384 = add i64 %_56.i.i.i, %377
+  %scevgep111 = getelementptr i8, ptr %log_walsh4.i.i, i64 %384
+  %385 = or i64 %377, 2
+  %scevgep107 = getelementptr i8, ptr %log_walsh4.i.i, i64 %385
+  %scevgep110 = getelementptr i8, ptr %scevgep107, i64 %383
+  %scevgep = getelementptr i8, ptr %log_walsh4.i.i, i64 %377
+  %bound0 = icmp ult ptr %scevgep, %scevgep113
+  %bound1 = icmp ult ptr %scevgep111, %scevgep110
+  %found.conflict = and i1 %bound0, %bound1
+  br i1 %found.conflict, label %bb6.i.i.i.preheader, label %vector.ph120
+
+vector.ph120:                                     ; preds = %vector.memcheck
+  %n.mod.vf = and i64 %376, 7
+  %386 = icmp eq i64 %n.mod.vf, 0
+  %387 = select i1 %386, i64 8, i64 %n.mod.vf
+  %n.vec = sub i64 %376, %387
+  %ind.end = add i64 %j.029.i.i.i, %n.vec
+  br label %vector.body122
+
+vector.body122:                                   ; preds = %vector.body122, %vector.ph120
+  %index123 = phi i64 [ 0, %vector.ph120 ], [ %index.next126, %vector.body122 ]
+  %388 = phi i64 [ %j.029.i.i.i, %vector.ph120 ], [ %403, %vector.body122 ]
+  %offset.idx = add i64 %j.029.i.i.i, %index123
+  %389 = getelementptr inbounds [0 x i16], ptr %log_walsh4.i.i, i64 0, i64 %offset.idx
+  %wide.load124 = load <8 x i16>, ptr %389, align 2, !alias.scope !314, !noalias !317
+  %390 = zext <8 x i16> %wide.load124 to <8 x i32>
+  %391 = add nuw nsw <8 x i32> %390, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
+  %392 = add nuw nsw i64 %388, %depart_no.031.i.i.i
+  %393 = getelementptr inbounds [0 x i16], ptr %log_walsh4.i.i, i64 0, i64 %392
+  %wide.load125 = load <8 x i16>, ptr %393, align 2, !alias.scope !319, !noalias !306
+  %394 = zext <8 x i16> %wide.load125 to <8 x i32>
+  %395 = sub nuw nsw <8 x i32> %391, %394
+  %396 = add nuw nsw <8 x i32> %394, %390
+  %397 = lshr <8 x i32> %396, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
+  %398 = add nuw nsw <8 x i32> %397, %396
+  %399 = trunc <8 x i32> %398 to <8 x i16>
+  store <8 x i16> %399, ptr %389, align 2, !alias.scope !314, !noalias !317
+  %400 = lshr <8 x i32> %395, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
+  %401 = add nuw nsw <8 x i32> %400, %395
+  %402 = trunc <8 x i32> %401 to <8 x i16>
+  store <8 x i16> %402, ptr %393, align 2, !alias.scope !319, !noalias !306
+  %index.next126 = add nuw i64 %index123, 8
+  %403 = add i64 %388, 8
+  %404 = icmp eq i64 %index.next126, %n.vec
+  br i1 %404, label %bb6.i.i.i.preheader, label %vector.body122, !llvm.loop !320
+
+bb14.i.i.i:                                       ; preds = %bb13.i.i.i
+  %_4.i.i.i = icmp ult i64 %depart_no.031.i.i.i, 32768
+  br i1 %_4.i.i.i, label %bb3.preheader.i.i.i, label %_ZN22reed_solomon_novelpoly5field5f2e1621generate_field_tables17hc6f474d1e8e993cbE.exit.i
+
+bb13.i.i.i:                                       ; preds = %bb8.i.i.i
+  %405 = add nuw nsw i64 %j.029.i.i.i, %_56.i.i.i
+  %_7.i.i.i = icmp ult i64 %405, 65536
+  %indvars.iv.next.i.i.i = add nuw nsw i64 %indvars.iv.i.i.i, %_56.i.i.i
+  %indvar.next = add i64 %indvar, 1
+  br i1 %_7.i.i.i, label %bb6.i.preheader.i.i, label %bb14.i.i.i
+
+bb6.i.i.i:                                        ; preds = %bb6.i.i.i.preheader, %bb8.i.i.i
+  %i.028.i.i.i = phi i64 [ %408, %bb8.i.i.i ], [ %i.028.i.i.i.ph, %bb6.i.i.i.preheader ]
+  %_20.i.i.i = icmp ult i64 %i.028.i.i.i, 65536
+  br i1 %_20.i.i.i, label %bb7.i.i.i, label %panic.i.i.i, !prof !119
+
+bb7.i.i.i:                                        ; preds = %bb6.i.i.i
+  %_22.i.i.i = add nuw nsw i64 %i.028.i.i.i, %depart_no.031.i.i.i
+  %_26.i.i.i = icmp ult i64 %_22.i.i.i, 65536
+  br i1 %_26.i.i.i, label %bb8.i.i.i, label %panic1.i.i.i, !prof !119
+
+panic.i.i.i:                                      ; preds = %bb6.i.i.i
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %i.028.i.i.i, i64 noundef 65536, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_f835a666fb2fb9eb6998cab602faabdd) #25, !noalias !321
+  unreachable
+
+bb8.i.i.i:                                        ; preds = %bb7.i.i.i
+  %406 = getelementptr inbounds [0 x i16], ptr %log_walsh4.i.i, i64 0, i64 %i.028.i.i.i
+  %self.i.i.i = load i16, ptr %406, align 2, !alias.scope !311, !noalias !306, !noundef !3
+  %_17.i.i.i = zext i16 %self.i.i.i to i32
+  %_16.i.i.i = add nuw nsw i32 %_17.i.i.i, 65535
+  %407 = getelementptr inbounds [0 x i16], ptr %log_walsh4.i.i, i64 0, i64 %_22.i.i.i
+  %self2.i.i.i = load i16, ptr %407, align 2, !alias.scope !311, !noalias !306, !noundef !3
+  %_21.i.i.i = zext i16 %self2.i.i.i to i32
+  %tmp2.i.i.i = sub nuw nsw i32 %_16.i.i.i, %_21.i.i.i
+  %tmp1.i.i.i = add nuw nsw i32 %_21.i.i.i, %_17.i.i.i
+  %_42.i.i.i = lshr i32 %tmp1.i.i.i, 16
+  %_40.i.i.i = add nuw nsw i32 %_42.i.i.i, %tmp1.i.i.i
+  %_39.i.i.i = trunc i32 %_40.i.i.i to i16
+  store i16 %_39.i.i.i, ptr %406, align 2, !alias.scope !311, !noalias !306
+  %_50.i.i.i = lshr i32 %tmp2.i.i.i, 16
+  %_48.i.i.i = add nuw nsw i32 %_50.i.i.i, %tmp2.i.i.i
+  %_47.i.i.i = trunc i32 %_48.i.i.i to i16
+  store i16 %_47.i.i.i, ptr %407, align 2, !alias.scope !311, !noalias !306
+  %408 = add nuw nsw i64 %i.028.i.i.i, 1
+  %exitcond.not.i.i.i = icmp eq i64 %408, %indvars.iv.i.i.i
+  br i1 %exitcond.not.i.i.i, label %bb13.i.i.i, label %bb6.i.i.i, !llvm.loop !322
+
+panic1.i.i.i:                                     ; preds = %bb7.i.i.i
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %_22.i.i.i, i64 noundef 65536, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_1db96d5b1a328d476c67fbf01169719e) #25, !noalias !321
+  unreachable
+
+bb26.i.i:                                         ; preds = %bb19.i.i, %bb26.i.i
+  %i3.041.i.i = phi i64 [ %424, %bb26.i.i ], [ 0, %bb19.i.i ]
+  %409 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %i3.041.i.i
+  %_50.i.i = load i16, ptr %409, align 8, !noalias !306, !noundef !3
+  %_49.i.i = zext i16 %_50.i.i to i64
+  %410 = getelementptr inbounds [65536 x i16], ptr %exp_table.i.i, i64 0, i64 %_49.i.i
+  %411 = trunc i64 %i3.041.i.i to i16
+  store i16 %411, ptr %410, align 2, !noalias !306
+  %412 = or i64 %i3.041.i.i, 1
+  %413 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %412
+  %_50.i.i.1 = load i16, ptr %413, align 2, !noalias !306, !noundef !3
+  %_49.i.i.1 = zext i16 %_50.i.i.1 to i64
+  %414 = getelementptr inbounds [65536 x i16], ptr %exp_table.i.i, i64 0, i64 %_49.i.i.1
+  %415 = trunc i64 %412 to i16
+  store i16 %415, ptr %414, align 2, !noalias !306
+  %416 = or i64 %i3.041.i.i, 2
+  %417 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %416
+  %_50.i.i.2 = load i16, ptr %417, align 4, !noalias !306, !noundef !3
+  %_49.i.i.2 = zext i16 %_50.i.i.2 to i64
+  %418 = getelementptr inbounds [65536 x i16], ptr %exp_table.i.i, i64 0, i64 %_49.i.i.2
+  %419 = trunc i64 %416 to i16
+  store i16 %419, ptr %418, align 2, !noalias !306
+  %420 = or i64 %i3.041.i.i, 3
+  %421 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %420
+  %_50.i.i.3 = load i16, ptr %421, align 2, !noalias !306, !noundef !3
+  %_49.i.i.3 = zext i16 %_50.i.i.3 to i64
+  %422 = getelementptr inbounds [65536 x i16], ptr %exp_table.i.i, i64 0, i64 %_49.i.i.3
+  %423 = trunc i64 %420 to i16
+  store i16 %423, ptr %422, align 2, !noalias !306
+  %424 = add nuw nsw i64 %i3.041.i.i, 4
+  %exitcond49.not.i.i.3 = icmp eq i64 %424, 65536
+  br i1 %exitcond49.not.i.i.3, label %bb27.i.i, label %bb26.i.i
+
+bb19.i.i:                                         ; preds = %vector.body102, %bb19.i.i
+  %i2.040.i.i = phi i64 [ %436, %bb19.i.i ], [ 0, %vector.body102 ]
+  %425 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %i2.040.i.i
+  %_39.i.i = load i16, ptr %425, align 8, !noalias !306, !noundef !3
+  %_38.i.i = zext i16 %_39.i.i to i64
+  %426 = getelementptr inbounds [65536 x i16], ptr %exp_table.i.i, i64 0, i64 %_38.i.i
+  %_37.i.i = load i16, ptr %426, align 2, !noalias !306, !noundef !3
+  store i16 %_37.i.i, ptr %425, align 8, !noalias !306
+  %427 = or i64 %i2.040.i.i, 1
+  %428 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %427
+  %_39.i.i.1 = load i16, ptr %428, align 2, !noalias !306, !noundef !3
+  %_38.i.i.1 = zext i16 %_39.i.i.1 to i64
+  %429 = getelementptr inbounds [65536 x i16], ptr %exp_table.i.i, i64 0, i64 %_38.i.i.1
+  %_37.i.i.1 = load i16, ptr %429, align 2, !noalias !306, !noundef !3
+  store i16 %_37.i.i.1, ptr %428, align 2, !noalias !306
+  %430 = or i64 %i2.040.i.i, 2
+  %431 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %430
+  %_39.i.i.2 = load i16, ptr %431, align 4, !noalias !306, !noundef !3
+  %_38.i.i.2 = zext i16 %_39.i.i.2 to i64
+  %432 = getelementptr inbounds [65536 x i16], ptr %exp_table.i.i, i64 0, i64 %_38.i.i.2
+  %_37.i.i.2 = load i16, ptr %432, align 2, !noalias !306, !noundef !3
+  store i16 %_37.i.i.2, ptr %431, align 4, !noalias !306
+  %433 = or i64 %i2.040.i.i, 3
+  %434 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %433
+  %_39.i.i.3 = load i16, ptr %434, align 2, !noalias !306, !noundef !3
+  %_38.i.i.3 = zext i16 %_39.i.i.3 to i64
+  %435 = getelementptr inbounds [65536 x i16], ptr %exp_table.i.i, i64 0, i64 %_38.i.i.3
+  %_37.i.i.3 = load i16, ptr %435, align 2, !noalias !306, !noundef !3
+  store i16 %_37.i.i.3, ptr %434, align 2, !noalias !306
+  %436 = add nuw nsw i64 %i2.040.i.i, 4
+  %exitcond48.not.i.i.3 = icmp eq i64 %436, 65536
+  br i1 %exitcond48.not.i.i.3, label %bb26.i.i, label %bb19.i.i
+
+vector.body52:                                    ; preds = %vector.body52, %bb7.i.i
+  %index53 = phi i64 [ 0, %bb7.i.i ], [ %index.next56.1, %vector.body52 ]
+  %437 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %index53
+  %wide.load54 = load <8 x i16>, ptr %437, align 16, !noalias !306
+  %438 = getelementptr inbounds i16, ptr %437, i64 8
+  %wide.load55 = load <8 x i16>, ptr %438, align 16, !noalias !306
+  %439 = add nuw nsw i64 %index53, 1024
+  %440 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %439
+  %441 = xor <8 x i16> %wide.load54, <i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250>
+  %442 = xor <8 x i16> %wide.load55, <i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250>
+  store <8 x i16> %441, ptr %440, align 16, !noalias !306
+  %443 = getelementptr inbounds i16, ptr %440, i64 8
+  store <8 x i16> %442, ptr %443, align 16, !noalias !306
+  %index.next56 = or i64 %index53, 16
+  %444 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %index.next56
+  %wide.load54.1 = load <8 x i16>, ptr %444, align 16, !noalias !306
+  %445 = getelementptr inbounds i16, ptr %444, i64 8
+  %wide.load55.1 = load <8 x i16>, ptr %445, align 16, !noalias !306
+  %446 = add nuw nsw i64 %index53, 1040
+  %447 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %446
+  %448 = xor <8 x i16> %wide.load54.1, <i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250>
+  %449 = xor <8 x i16> %wide.load55.1, <i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250, i16 27250>
+  store <8 x i16> %448, ptr %447, align 16, !noalias !306
+  %450 = getelementptr inbounds i16, ptr %447, i64 8
+  store <8 x i16> %449, ptr %450, align 16, !noalias !306
+  %index.next56.1 = add nuw nsw i64 %index53, 32
+  %451 = icmp eq i64 %index.next56.1, 1024
+  br i1 %451, label %vector.body62, label %vector.body52, !llvm.loop !323
+
+vector.body62:                                    ; preds = %vector.body52, %vector.body62
+  %index63 = phi i64 [ %index.next66.1, %vector.body62 ], [ 0, %vector.body52 ]
+  %452 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %index63
+  %wide.load64 = load <8 x i16>, ptr %452, align 16, !noalias !306
+  %453 = getelementptr inbounds i16, ptr %452, i64 8
+  %wide.load65 = load <8 x i16>, ptr %453, align 16, !noalias !306
+  %454 = add nuw nsw i64 %index63, 2048
+  %455 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %454
+  %456 = xor <8 x i16> %wide.load64, <i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176>
+  %457 = xor <8 x i16> %wide.load65, <i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176>
+  store <8 x i16> %456, ptr %455, align 16, !noalias !306
+  %458 = getelementptr inbounds i16, ptr %455, i64 8
+  store <8 x i16> %457, ptr %458, align 16, !noalias !306
+  %index.next66 = or i64 %index63, 16
+  %459 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %index.next66
+  %wide.load64.1 = load <8 x i16>, ptr %459, align 16, !noalias !306
+  %460 = getelementptr inbounds i16, ptr %459, i64 8
+  %wide.load65.1 = load <8 x i16>, ptr %460, align 16, !noalias !306
+  %461 = add nuw nsw i64 %index63, 2064
+  %462 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %461
+  %463 = xor <8 x i16> %wide.load64.1, <i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176>
+  %464 = xor <8 x i16> %wide.load65.1, <i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176, i16 -18176>
+  store <8 x i16> %463, ptr %462, align 16, !noalias !306
+  %465 = getelementptr inbounds i16, ptr %462, i64 8
+  store <8 x i16> %464, ptr %465, align 16, !noalias !306
+  %index.next66.1 = add nuw nsw i64 %index63, 32
+  %466 = icmp eq i64 %index.next66.1, 2048
+  br i1 %466, label %vector.body72, label %vector.body62, !llvm.loop !324
+
+vector.body72:                                    ; preds = %vector.body62, %vector.body72
+  %index73 = phi i64 [ %index.next76.1, %vector.body72 ], [ 0, %vector.body62 ]
+  %467 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %index73
+  %wide.load74 = load <8 x i16>, ptr %467, align 16, !noalias !306
+  %468 = getelementptr inbounds i16, ptr %467, i64 8
+  %wide.load75 = load <8 x i16>, ptr %468, align 16, !noalias !306
+  %469 = add nuw nsw i64 %index73, 4096
+  %470 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %469
+  %471 = xor <8 x i16> %wide.load74, <i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584>
+  %472 = xor <8 x i16> %wide.load75, <i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584>
+  store <8 x i16> %471, ptr %470, align 16, !noalias !306
+  %473 = getelementptr inbounds i16, ptr %470, i64 8
+  store <8 x i16> %472, ptr %473, align 16, !noalias !306
+  %index.next76 = or i64 %index73, 16
+  %474 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %index.next76
+  %wide.load74.1 = load <8 x i16>, ptr %474, align 16, !noalias !306
+  %475 = getelementptr inbounds i16, ptr %474, i64 8
+  %wide.load75.1 = load <8 x i16>, ptr %475, align 16, !noalias !306
+  %476 = add nuw nsw i64 %index73, 4112
+  %477 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %476
+  %478 = xor <8 x i16> %wide.load74.1, <i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584>
+  %479 = xor <8 x i16> %wide.load75.1, <i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584, i16 -584>
+  store <8 x i16> %478, ptr %477, align 16, !noalias !306
+  %480 = getelementptr inbounds i16, ptr %477, i64 8
+  store <8 x i16> %479, ptr %480, align 16, !noalias !306
+  %index.next76.1 = add nuw nsw i64 %index73, 32
+  %481 = icmp eq i64 %index.next76.1, 4096
+  br i1 %481, label %vector.body82, label %vector.body72, !llvm.loop !325
+
+vector.body82:                                    ; preds = %vector.body72, %vector.body82
+  %index83 = phi i64 [ %index.next86.1, %vector.body82 ], [ 0, %vector.body72 ]
+  %482 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %index83
+  %wide.load84 = load <8 x i16>, ptr %482, align 16, !noalias !306
+  %483 = getelementptr inbounds i16, ptr %482, i64 8
+  %wide.load85 = load <8 x i16>, ptr %483, align 16, !noalias !306
+  %484 = add nuw nsw i64 %index83, 8192
+  %485 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %484
+  %486 = xor <8 x i16> %wide.load84, <i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228>
+  %487 = xor <8 x i16> %wide.load85, <i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228>
+  store <8 x i16> %486, ptr %485, align 16, !noalias !306
+  %488 = getelementptr inbounds i16, ptr %485, i64 8
+  store <8 x i16> %487, ptr %488, align 16, !noalias !306
+  %index.next86 = or i64 %index83, 16
+  %489 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %index.next86
+  %wide.load84.1 = load <8 x i16>, ptr %489, align 16, !noalias !306
+  %490 = getelementptr inbounds i16, ptr %489, i64 8
+  %wide.load85.1 = load <8 x i16>, ptr %490, align 16, !noalias !306
+  %491 = add nuw nsw i64 %index83, 8208
+  %492 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %491
+  %493 = xor <8 x i16> %wide.load84.1, <i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228>
+  %494 = xor <8 x i16> %wide.load85.1, <i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228, i16 -1228>
+  store <8 x i16> %493, ptr %492, align 16, !noalias !306
+  %495 = getelementptr inbounds i16, ptr %492, i64 8
+  store <8 x i16> %494, ptr %495, align 16, !noalias !306
+  %index.next86.1 = add nuw nsw i64 %index83, 32
+  %496 = icmp eq i64 %index.next86.1, 8192
+  br i1 %496, label %vector.body92, label %vector.body82, !llvm.loop !326
+
+vector.body92:                                    ; preds = %vector.body82, %vector.body92
+  %index93 = phi i64 [ %index.next96.1, %vector.body92 ], [ 0, %vector.body82 ]
+  %497 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %index93
+  %wide.load94 = load <8 x i16>, ptr %497, align 16, !noalias !306
+  %498 = getelementptr inbounds i16, ptr %497, i64 8
+  %wide.load95 = load <8 x i16>, ptr %498, align 16, !noalias !306
+  %499 = add nuw nsw i64 %index93, 16384
+  %500 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %499
+  %501 = xor <8 x i16> %wide.load94, <i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200>
+  %502 = xor <8 x i16> %wide.load95, <i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200>
+  store <8 x i16> %501, ptr %500, align 16, !noalias !306
+  %503 = getelementptr inbounds i16, ptr %500, i64 8
+  store <8 x i16> %502, ptr %503, align 16, !noalias !306
+  %index.next96 = or i64 %index93, 16
+  %504 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %index.next96
+  %wide.load94.1 = load <8 x i16>, ptr %504, align 16, !noalias !306
+  %505 = getelementptr inbounds i16, ptr %504, i64 8
+  %wide.load95.1 = load <8 x i16>, ptr %505, align 16, !noalias !306
+  %506 = add nuw nsw i64 %index93, 16400
+  %507 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %506
+  %508 = xor <8 x i16> %wide.load94.1, <i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200>
+  %509 = xor <8 x i16> %wide.load95.1, <i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200, i16 -200>
+  store <8 x i16> %508, ptr %507, align 16, !noalias !306
+  %510 = getelementptr inbounds i16, ptr %507, i64 8
+  store <8 x i16> %509, ptr %510, align 16, !noalias !306
+  %index.next96.1 = add nuw nsw i64 %index93, 32
+  %511 = icmp eq i64 %index.next96.1, 16384
+  br i1 %511, label %vector.body102, label %vector.body92, !llvm.loop !327
+
+vector.body102:                                   ; preds = %vector.body92, %vector.body102
+  %index103 = phi i64 [ %index.next106.1, %vector.body102 ], [ 0, %vector.body92 ]
+  %512 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %index103
+  %wide.load104 = load <8 x i16>, ptr %512, align 16, !noalias !306
+  %513 = getelementptr inbounds i16, ptr %512, i64 8
+  %wide.load105 = load <8 x i16>, ptr %513, align 16, !noalias !306
+  %514 = add nuw nsw i64 %index103, 32768
+  %515 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %514
+  %516 = xor <8 x i16> %wide.load104, <i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338>
+  %517 = xor <8 x i16> %wide.load105, <i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338>
+  store <8 x i16> %516, ptr %515, align 16, !noalias !306
+  %518 = getelementptr inbounds i16, ptr %515, i64 8
+  store <8 x i16> %517, ptr %518, align 16, !noalias !306
+  %index.next106 = or i64 %index103, 16
+  %519 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %index.next106
+  %wide.load104.1 = load <8 x i16>, ptr %519, align 16, !noalias !306
+  %520 = getelementptr inbounds i16, ptr %519, i64 8
+  %wide.load105.1 = load <8 x i16>, ptr %520, align 16, !noalias !306
+  %521 = add nuw nsw i64 %index103, 32784
+  %522 = getelementptr inbounds [65536 x i16], ptr %log_table.i.i, i64 0, i64 %521
+  %523 = xor <8 x i16> %wide.load104.1, <i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338>
+  %524 = xor <8 x i16> %wide.load105.1, <i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338, i16 -26338>
+  store <8 x i16> %523, ptr %522, align 16, !noalias !306
+  %525 = getelementptr inbounds i16, ptr %522, i64 8
+  store <8 x i16> %524, ptr %525, align 16, !noalias !306
+  %index.next106.1 = add nuw nsw i64 %index103, 32
+  %526 = icmp eq i64 %index.next106.1, 32768
+  br i1 %526, label %bb19.i.i, label %vector.body102, !llvm.loop !328
+
+bb3.i65.i:                                        ; preds = %bb2.i.i
+  %527 = getelementptr inbounds [65536 x i16], ptr %exp_table.i.i, i64 0, i64 %state.037.i.i
+  %528 = trunc i64 %i.036.i.i to i16
+  store i16 %528, ptr %527, align 2, !noalias !306
+  %529 = icmp ult i64 %state.037.i.i, 32768
+  %530 = shl nuw nsw i64 %state.037.i.i, 1
+  %_12.i.i = and i64 %530, 65534
+  %531 = xor i64 %_12.i.i, 45
+  %state.1.i.i = select i1 %529, i64 %530, i64 %531
+  %532 = or i64 %i.036.i.i, 1
+  %exitcond.not.i.i = icmp eq i64 %532, 65535
+  br i1 %exitcond.not.i.i, label %bb7.i.i, label %bb2.i.i.1
+
+bb2.i.i.1:                                        ; preds = %bb3.i65.i
+  %_9.i64.i.1 = icmp ult i64 %state.1.i.i, 65536
+  br i1 %_9.i64.i.1, label %bb3.i65.i.1, label %panic12.i.i, !prof !119
+
+bb3.i65.i.1:                                      ; preds = %bb2.i.i.1
+  %533 = getelementptr inbounds [65536 x i16], ptr %exp_table.i.i, i64 0, i64 %state.1.i.i
+  %534 = trunc i64 %532 to i16
+  store i16 %534, ptr %533, align 2, !noalias !306
+  %535 = icmp ult i64 %state.1.i.i, 32768
+  %536 = shl nuw nsw i64 %state.1.i.i, 1
+  %_12.i.i.1 = and i64 %536, 65534
+  %537 = xor i64 %_12.i.i.1, 45
+  %state.1.i.i.1 = select i1 %535, i64 %536, i64 %537
+  %538 = add nuw nsw i64 %i.036.i.i, 2
+  br label %bb2.i.i
+
+panic12.i.i:                                      ; preds = %bb2.i.i.1, %bb2.i.i
+  %state.037.i.i.lcssa = phi i64 [ %state.037.i.i, %bb2.i.i ], [ %state.1.i.i, %bb2.i.i.1 ]
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef %state.037.i.i.lcssa, i64 noundef 65536, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_6da96708b40fa6682fd8f5f72b14ed61) #25, !noalias !306
+  unreachable
+
+_ZN22reed_solomon_novelpoly5field5f2e1621generate_field_tables17hc6f474d1e8e993cbE.exit.i: ; preds = %bb14.i.i.i
+  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(131072) %_4.i, ptr noundef nonnull align 16 dereferenceable(131072) %log_table.i.i, i64 131072, i1 false), !noalias !329
+  %539 = getelementptr inbounds { [65536 x i16], [65536 x i16], [65536 x i16] }, ptr %_4.i, i64 0, i32 1
+  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(131072) %539, ptr noundef nonnull align 2 dereferenceable(131072) %exp_table.i.i, i64 131072, i1 false), !noalias !329
+  %540 = getelementptr inbounds { [65536 x i16], [65536 x i16], [65536 x i16] }, ptr %_4.i, i64 0, i32 2
+  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(131072) %540, ptr noundef nonnull align 2 dereferenceable(131072) %log_walsh4.i.i, i64 131072, i1 false), !noalias !329
+  call void @llvm.lifetime.end.p0(i64 131072, ptr nonnull %log_walsh4.i.i), !noalias !306
+  call void @llvm.lifetime.end.p0(i64 131072, ptr nonnull %exp_table.i.i), !noalias !306
+  call void @llvm.lifetime.end.p0(i64 131072, ptr nonnull %log_table.i.i), !noalias !306
+  call void @llvm.lifetime.start.p0(i64 131072, ptr nonnull %log_table.i), !noalias !329
+  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(131072) %log_table.i, ptr noundef nonnull align 2 dereferenceable(131072) %_4.i, i64 131072, i1 false), !noalias !329
+  call void @llvm.lifetime.start.p0(i64 131072, ptr nonnull %exp_table.i), !noalias !329
+  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(131072) %exp_table.i, ptr noundef nonnull align 2 dereferenceable(131072) %539, i64 131072, i1 false), !noalias !329
+  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(131072) %log_walsh.i, ptr noundef nonnull align 2 dereferenceable(131072) %540, i64 131072, i1 false), !noalias !329
+  call void @llvm.lifetime.end.p0(i64 393216, ptr nonnull %_4.i)
+  call void @llvm.lifetime.start.p0(i64 30, ptr nonnull %base.i), !noalias !329
+  call void @llvm.lifetime.start.p0(i64 131070, ptr nonnull %skews_additive.i), !noalias !329
+  call void @llvm.memset.p0.i64(ptr noundef nonnull align 2 dereferenceable(131070) %skews_additive.i, i8 0, i64 131070, i1 false), !noalias !329
+  store <8 x i16> <i16 2, i16 4, i16 8, i16 16, i16 32, i16 64, i16 128, i16 256>, ptr %base.i, align 16, !noalias !329
+  %541 = getelementptr inbounds [15 x i16], ptr %base.i, i64 0, i64 8
+  store <4 x i16> <i16 512, i16 1024, i16 2048, i16 4096>, ptr %541, align 16, !noalias !329
+  %542 = getelementptr inbounds [15 x i16], ptr %base.i, i64 0, i64 12
+  store i16 8192, ptr %542, align 8, !noalias !329
+  %543 = getelementptr inbounds [15 x i16], ptr %base.i, i64 0, i64 13
+  store i16 16384, ptr %543, align 2, !noalias !329
+  %544 = getelementptr inbounds [15 x i16], ptr %base.i, i64 0, i64 14
+  store i16 -32768, ptr %544, align 4, !noalias !329
+  br label %bb9.i
+
+bb8.loopexit.i:                                   ; preds = %_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE.exit63.i, %_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE.exit.i
+  %exitcond.not.i = icmp eq i64 %_0.i66.i, 15
+  br i1 %exitcond.not.i, label %bb10.i, label %bb9.i
+
+bb10.i:                                           ; preds = %bb8.loopexit.i
+  call void @llvm.lifetime.start.p0(i64 131070, ptr nonnull %skews_multiplier.i), !noalias !329
+  call void @llvm.memset.p0.i64(ptr noundef nonnull align 2 dereferenceable(131070) %skews_multiplier.i, i8 0, i64 131070, i1 false), !noalias !329
+  br label %bb37.i
+
+bb9.i:                                            ; preds = %bb8.loopexit.i, %_ZN22reed_solomon_novelpoly5field5f2e1621generate_field_tables17hc6f474d1e8e993cbE.exit.i
+  %iter1.sroa.0.0101.i = phi i64 [ %_0.i66.i, %bb8.loopexit.i ], [ 0, %_ZN22reed_solomon_novelpoly5field5f2e1621generate_field_tables17hc6f474d1e8e993cbE.exit.i ]
+  %_0.i66.i = add nuw nsw i64 %iter1.sroa.0.0101.i, 1
+  %step.i = shl i64 2, %iter1.sroa.0.0101.i
+  %notmask.i = shl nsw i64 -1, %iter1.sroa.0.0101.i
+  %_21.i = xor i64 %notmask.i, -1
+  %545 = getelementptr inbounds [65535 x i16], ptr %skews_additive.i, i64 0, i64 %_21.i
+  store i16 0, ptr %545, align 2, !noalias !329
+  br label %bb13.i
+
+bb37.i:                                           ; preds = %bb37.i, %bb10.i
+  %iter5.sroa.0.0102.i = phi i64 [ 0, %bb10.i ], [ %_0.i67.i.4, %bb37.i ]
+  %_0.i67.i = add nuw nsw i64 %iter5.sroa.0.0102.i, 1
+  %546 = getelementptr inbounds [65535 x i16], ptr %skews_additive.i, i64 0, i64 %iter5.sroa.0.0102.i
+  %self8.i = load i16, ptr %546, align 2, !noalias !329, !noundef !3
+  %_154.i = zext i16 %self8.i to i64
+  %547 = getelementptr inbounds [0 x i16], ptr %log_table.i, i64 0, i64 %_154.i
+  %_153.i = load i16, ptr %547, align 2, !noalias !329, !noundef !3
+  %548 = getelementptr inbounds [65535 x i16], ptr %skews_multiplier.i, i64 0, i64 %iter5.sroa.0.0102.i
+  store i16 %_153.i, ptr %548, align 2, !noalias !329
+  %_0.i67.i.1 = add nuw nsw i64 %iter5.sroa.0.0102.i, 2
+  %549 = getelementptr inbounds [65535 x i16], ptr %skews_additive.i, i64 0, i64 %_0.i67.i
+  %self8.i.1 = load i16, ptr %549, align 2, !noalias !329, !noundef !3
+  %_154.i.1 = zext i16 %self8.i.1 to i64
+  %550 = getelementptr inbounds [0 x i16], ptr %log_table.i, i64 0, i64 %_154.i.1
+  %_153.i.1 = load i16, ptr %550, align 2, !noalias !329, !noundef !3
+  %551 = getelementptr inbounds [65535 x i16], ptr %skews_multiplier.i, i64 0, i64 %_0.i67.i
+  store i16 %_153.i.1, ptr %551, align 2, !noalias !329
+  %_0.i67.i.2 = add nuw nsw i64 %iter5.sroa.0.0102.i, 3
+  %552 = getelementptr inbounds [65535 x i16], ptr %skews_additive.i, i64 0, i64 %_0.i67.i.1
+  %self8.i.2 = load i16, ptr %552, align 2, !noalias !329, !noundef !3
+  %_154.i.2 = zext i16 %self8.i.2 to i64
+  %553 = getelementptr inbounds [0 x i16], ptr %log_table.i, i64 0, i64 %_154.i.2
+  %_153.i.2 = load i16, ptr %553, align 2, !noalias !329, !noundef !3
+  %554 = getelementptr inbounds [65535 x i16], ptr %skews_multiplier.i, i64 0, i64 %_0.i67.i.1
+  store i16 %_153.i.2, ptr %554, align 2, !noalias !329
+  %_0.i67.i.3 = add nuw nsw i64 %iter5.sroa.0.0102.i, 4
+  %555 = getelementptr inbounds [65535 x i16], ptr %skews_additive.i, i64 0, i64 %_0.i67.i.2
+  %self8.i.3 = load i16, ptr %555, align 2, !noalias !329, !noundef !3
+  %_154.i.3 = zext i16 %self8.i.3 to i64
+  %556 = getelementptr inbounds [0 x i16], ptr %log_table.i, i64 0, i64 %_154.i.3
+  %_153.i.3 = load i16, ptr %556, align 2, !noalias !329, !noundef !3
+  %557 = getelementptr inbounds [65535 x i16], ptr %skews_multiplier.i, i64 0, i64 %_0.i67.i.2
+  store i16 %_153.i.3, ptr %557, align 2, !noalias !329
+  %_0.i67.i.4 = add nuw nsw i64 %iter5.sroa.0.0102.i, 5
+  %558 = getelementptr inbounds [65535 x i16], ptr %skews_additive.i, i64 0, i64 %_0.i67.i.3
+  %self8.i.4 = load i16, ptr %558, align 2, !noalias !329, !noundef !3
+  %_154.i.4 = zext i16 %self8.i.4 to i64
+  %559 = getelementptr inbounds [0 x i16], ptr %log_table.i, i64 0, i64 %_154.i.4
+  %_153.i.4 = load i16, ptr %559, align 2, !noalias !329, !noundef !3
+  %560 = getelementptr inbounds [65535 x i16], ptr %skews_multiplier.i, i64 0, i64 %_0.i67.i.3
+  store i16 %_153.i.4, ptr %560, align 2, !noalias !329
+  %exitcond107.not.i.4 = icmp eq i64 %_0.i67.i.4, 65535
+  br i1 %exitcond107.not.i.4, label %_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT9initalize17ha5ac3800babec180E.exit, label %bb37.i
+
+bb12.loopexit.i:                                  ; preds = %bb19.i, %bb13.i
+  %_119.i = icmp ult i64 %iter2.sroa.0.097.i, 14
+  br i1 %_119.i, label %bb13.i, label %bb21.i
+
+bb13.i:                                           ; preds = %bb12.loopexit.i, %bb9.i
+  %iter2.sroa.0.097.i = phi i64 [ %iter1.sroa.0.0101.i, %bb9.i ], [ %_0.i68.i, %bb12.loopexit.i ]
+  %_0.i68.i = add nuw nsw i64 %iter2.sroa.0.097.i, 1
+  %s.i = shl i64 2, %iter2.sroa.0.097.i
+  %_3495.i = icmp ugt i64 %s.i, %_21.i
+  br i1 %_3495.i, label %bb18.lr.ph.i, label %bb12.loopexit.i
+
+bb18.lr.ph.i:                                     ; preds = %bb13.i
+  %561 = getelementptr inbounds [15 x i16], ptr %base.i, i64 0, i64 %iter2.sroa.0.097.i
+  br label %bb18.i
+
+bb21.i:                                           ; preds = %bb12.loopexit.i
+  %562 = getelementptr inbounds [15 x i16], ptr %base.i, i64 0, i64 %iter1.sroa.0.0101.i
+  %_46.i = load i16, ptr %562, align 2, !noalias !329, !noundef !3
+  %self15.i = xor i16 %_46.i, 1
+  %_128.i = zext i16 %self15.i to i64
+  %563 = getelementptr inbounds [0 x i16], ptr %log_table.i, i64 0, i64 %_128.i
+  %_127.i = load i16, ptr %563, align 2, !noalias !329, !noundef !3
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !330)
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !333)
+  %564 = icmp eq i16 %_46.i, 0
+  br i1 %564, label %_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE.exit.i, label %bb3.i.i
+
+bb3.i.i:                                          ; preds = %bb21.i
+  %_9.i.i = zext i16 %_46.i to i64
+  %565 = getelementptr inbounds [0 x i16], ptr %log_table.i, i64 0, i64 %_9.i.i
+  %_8.i.i = load i16, ptr %565, align 2, !alias.scope !330, !noalias !335, !noundef !3
+  %_7.i.i = zext i16 %_8.i.i to i32
+  %_13.i.i = zext i16 %_127.i to i32
+  %log.i.i = add nuw nsw i32 %_7.i.i, %_13.i.i
+  %_16.i.i = and i32 %log.i.i, 65535
+  %_17.i.i = lshr i32 %log.i.i, 16
+  %offset.i.i = add nuw nsw i32 %_16.i.i, %_17.i.i
+  %_21.i.i = icmp ult i32 %offset.i.i, 65536
+  br i1 %_21.i.i, label %bb4.i.i, label %panic1.i.i, !prof !119
+
+bb4.i.i:                                          ; preds = %bb3.i.i
+  %_19.i.i = zext i32 %offset.i.i to i64
+  %566 = getelementptr inbounds [0 x i16], ptr %exp_table.i, i64 0, i64 %_19.i.i
+  %_18.i.i = load i16, ptr %566, align 2, !alias.scope !333, !noalias !336, !noundef !3
+  br label %_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE.exit.i
+
+panic1.i.i:                                       ; preds = %bb3.i.i
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef 65536, i64 noundef 65536, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_a995c1b115ddac8a49a962bb459f7a82) #25, !noalias !337
+  unreachable
+
+_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE.exit.i: ; preds = %bb4.i.i, %bb21.i
+  %_0.0.i.i = phi i16 [ %_18.i.i, %bb4.i.i ], [ 0, %bb21.i ]
+  %_132.i = zext i16 %_0.0.i.i to i64
+  %567 = getelementptr inbounds [0 x i16], ptr %log_table.i, i64 0, i64 %_132.i
+  %_131.i = load i16, ptr %567, align 2, !noalias !329, !noundef !3
+  %568 = xor i16 %_131.i, -1
+  store i16 %568, ptr %562, align 2, !noalias !329
+  %_13599.i = icmp ult i64 %iter1.sroa.0.0101.i, 14
+  br i1 %_13599.i, label %bb28.i, label %bb8.loopexit.i
+
+bb28.i:                                           ; preds = %_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE.exit.i, %_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE.exit63.i
+  %iter4.sroa.0.0100.in.i = phi i64 [ %iter4.sroa.0.0100.i, %_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE.exit63.i ], [ %iter1.sroa.0.0101.i, %_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE.exit.i ]
+  %iter4.sroa.0.0100.i = add nuw nsw i64 %iter4.sroa.0.0100.in.i, 1
+  %569 = getelementptr inbounds [15 x i16], ptr %base.i, i64 0, i64 %iter4.sroa.0.0100.i
+  %_71.i = load i16, ptr %569, align 2, !noalias !329, !noundef !3
+  %self22.i = xor i16 %_71.i, 1
+  %_143.i = zext i16 %self22.i to i64
+  %570 = getelementptr inbounds [0 x i16], ptr %log_table.i, i64 0, i64 %_143.i
+  %self24.i = load i16, ptr %570, align 2, !noalias !329, !noundef !3
+  %_76.i = load i16, ptr %562, align 2, !noalias !329, !noundef !3
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !338)
+  tail call void @llvm.experimental.noalias.scope.decl(metadata !341)
+  %571 = icmp eq i16 %_71.i, 0
+  br i1 %571, label %_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE.exit63.i, label %bb3.i48.i
+
+bb3.i48.i:                                        ; preds = %bb28.i
+  %_69.i = zext i16 %self24.i to i32
+  %_75.i = zext i16 %_76.i to i32
+  %b.i = add nuw nsw i32 %_75.i, %_69.i
+  %b26.i = urem i32 %b.i, 65535
+  %_9.i49.i = zext i16 %_71.i to i64
+  %572 = getelementptr inbounds [0 x i16], ptr %log_table.i, i64 0, i64 %_9.i49.i
+  %_8.i50.i = load i16, ptr %572, align 2, !alias.scope !338, !noalias !343, !noundef !3
+  %_7.i51.i = zext i16 %_8.i50.i to i32
+  %log.i53.i = add nuw nsw i32 %b26.i, %_7.i51.i
+  %_16.i54.i = and i32 %log.i53.i, 65535
+  %_17.i55.i = lshr i32 %log.i53.i, 16
+  %offset.i56.i = add nuw nsw i32 %_16.i54.i, %_17.i55.i
+  %_21.i57.i = icmp ult i32 %offset.i56.i, 65536
+  br i1 %_21.i57.i, label %bb4.i59.i, label %panic1.i58.i, !prof !119
+
+bb4.i59.i:                                        ; preds = %bb3.i48.i
+  %_19.i60.i = zext i32 %offset.i56.i to i64
+  %573 = getelementptr inbounds [0 x i16], ptr %exp_table.i, i64 0, i64 %_19.i60.i
+  %_18.i61.i = load i16, ptr %573, align 2, !alias.scope !341, !noalias !344, !noundef !3
+  br label %_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE.exit63.i
+
+panic1.i58.i:                                     ; preds = %bb3.i48.i
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef 65536, i64 noundef 65536, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_a995c1b115ddac8a49a962bb459f7a82) #25, !noalias !345
+  unreachable
+
+_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE.exit63.i: ; preds = %bb4.i59.i, %bb28.i
+  %_0.0.i62.i = phi i16 [ %_18.i61.i, %bb4.i59.i ], [ 0, %bb28.i ]
+  store i16 %_0.0.i62.i, ptr %569, align 2, !noalias !329
+  %_135.i = icmp ult i64 %iter4.sroa.0.0100.in.i, 13
+  br i1 %_135.i, label %bb28.i, label %bb8.loopexit.i
+
+bb18.i:                                           ; preds = %bb19.i, %bb18.lr.ph.i
+  %j.096.i = phi i64 [ %_21.i, %bb18.lr.ph.i ], [ %576, %bb19.i ]
+  %_41.i = add nuw nsw i64 %j.096.i, %s.i
+  %_43.i = icmp ult i64 %_41.i, 65535
+  br i1 %_43.i, label %bb19.i, label %panic33.i, !prof !119
+
+bb19.i:                                           ; preds = %bb18.i
+  %574 = getelementptr inbounds [65535 x i16], ptr %skews_additive.i, i64 0, i64 %j.096.i
+  %self31.i = load i16, ptr %574, align 2, !noalias !329, !noundef !3
+  %rhs.i = load i16, ptr %561, align 2, !noalias !329, !noundef !3
+  %_126.i = xor i16 %rhs.i, %self31.i
+  %575 = getelementptr inbounds [65535 x i16], ptr %skews_additive.i, i64 0, i64 %_41.i
+  store i16 %_126.i, ptr %575, align 2, !noalias !329
+  %576 = add nuw nsw i64 %j.096.i, %step.i
+  %_34.i = icmp ult i64 %576, %s.i
+  br i1 %_34.i, label %bb18.i, label %bb12.loopexit.i
+
+panic33.i:                                        ; preds = %bb18.i
+; call core::panicking::panic_bounds_check
+  tail call void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef 65535, i64 noundef 65535, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @alloc_f94f82537a892f0cff1d205984cd5415) #25, !noalias !329
+  unreachable
+
+_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT9initalize17ha5ac3800babec180E.exit: ; preds = %bb37.i
+  %577 = getelementptr inbounds %"field::f2e16::AdditiveFFT", ptr %__static_init_expr_result, i64 0, i32 3
+  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(131070) %577, ptr noundef nonnull align 2 dereferenceable(131070) %skews_multiplier.i, i64 131070, i1 false)
+  %578 = getelementptr inbounds %"field::f2e16::AdditiveFFT", ptr %__static_init_expr_result, i64 0, i32 1
+  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(131072) %578, ptr noundef nonnull align 2 dereferenceable(131072) %exp_table.i, i64 131072, i1 false)
+  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(131072) %__static_init_expr_result, ptr noundef nonnull align 2 dereferenceable(131072) %log_table.i, i64 131072, i1 false)
+  %579 = getelementptr inbounds %"field::f2e16::AdditiveFFT", ptr %__static_init_expr_result, i64 0, i32 2
+  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(131072) %579, ptr noundef nonnull align 2 dereferenceable(131072) %log_walsh.i, i64 131072, i1 false)
+  call void @llvm.lifetime.end.p0(i64 131070, ptr nonnull %skews_multiplier.i), !noalias !329
+  call void @llvm.lifetime.end.p0(i64 131070, ptr nonnull %skews_additive.i), !noalias !329
+  call void @llvm.lifetime.end.p0(i64 30, ptr nonnull %base.i), !noalias !329
+  call void @llvm.lifetime.end.p0(i64 131072, ptr nonnull %exp_table.i), !noalias !329
+  call void @llvm.lifetime.end.p0(i64 131072, ptr nonnull %log_table.i), !noalias !329
+  call void @llvm.lifetime.end.p0(i64 131072, ptr nonnull %log_walsh.i)
+  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 2 dereferenceable(524286) @_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, ptr noundef nonnull align 2 dereferenceable(524286) %__static_init_expr_result, i64 524286, i1 false)
+  call void @llvm.lifetime.end.p0(i64 524286, ptr nonnull %__static_init_expr_result)
+  ret void
+}
+
+; <reed_solomon_novelpoly::field::f2e16::Multiplier as core::fmt::Debug>::fmt
+; Function Attrs: nonlazybind uwtable
+define noundef zeroext i1 @"_ZN85_$LT$reed_solomon_novelpoly..field..f2e16..Multiplier$u20$as$u20$core..fmt..Debug$GT$3fmt17h5fc988076c741129E"(ptr noalias noundef readonly align 2 dereferenceable(2) %self, ptr noalias noundef align 8 dereferenceable(64) %f) unnamed_addr #0 {
+start:
+  %_6 = alloca ptr, align 8
+  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %_6)
+  store ptr %self, ptr %_6, align 8
+; call core::fmt::Formatter::debug_tuple_field1_finish
+  %_0 = call noundef zeroext i1 @_ZN4core3fmt9Formatter25debug_tuple_field1_finish17h989fcf61d9a53692E(ptr noalias noundef nonnull align 8 dereferenceable(64) %f, ptr noalias noundef nonnull readonly align 1 @alloc_88bfea4fabafdbb0e94416283adb6d98, i64 noundef 10, ptr noundef nonnull align 1 %_6, ptr noalias noundef nonnull readonly align 8 dereferenceable(24) @vtable.8)
+  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %_6)
+  ret i1 %_0
+}
+
+; Function Attrs: nonlazybind uwtable
+declare noundef i32 @rust_eh_personality(i32 noundef, i32 noundef, i64 noundef, ptr noundef, ptr noundef) unnamed_addr #0
+
+; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
+declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #12
+
+; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
+declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #13
+
+; core::panicking::panic
+; Function Attrs: cold noinline noreturn nonlazybind uwtable
+declare void @_ZN4core9panicking5panic17hcad0f3a89a1b36aaE(ptr noalias noundef nonnull readonly align 1, i64 noundef, ptr noalias noundef readonly align 8 dereferenceable(24)) unnamed_addr #4
+
+; core::slice::index::slice_end_index_len_fail
+; Function Attrs: cold noinline noreturn nonlazybind uwtable
+declare void @_ZN4core5slice5index24slice_end_index_len_fail17h37d7f9da4c251f06E(i64 noundef, i64 noundef, ptr noalias noundef readonly align 8 dereferenceable(24)) unnamed_addr #4
+
+; core::slice::index::slice_index_order_fail
+; Function Attrs: cold noinline noreturn nonlazybind uwtable
+declare void @_ZN4core5slice5index22slice_index_order_fail17h980cdeba17e6d1eaE(i64 noundef, i64 noundef, ptr noalias noundef readonly align 8 dereferenceable(24)) unnamed_addr #4
+
+; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
+declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #14
+
+; core::panicking::panic_fmt
+; Function Attrs: cold noinline noreturn nonlazybind uwtable
+declare void @_ZN4core9panicking9panic_fmt17h979245e2fdb2fabdE(ptr noalias nocapture noundef readonly align 8 dereferenceable(48), ptr noalias noundef readonly align 8 dereferenceable(24)) unnamed_addr #4
+
+; core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @"_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h41ddf95380c12bacE"(ptr noalias noundef readonly align 8 dereferenceable(8), ptr noalias noundef align 8 dereferenceable(64)) unnamed_addr #0
+
+; core::fmt::Formatter::debug_list
+; Function Attrs: nonlazybind uwtable
+declare void @_ZN4core3fmt9Formatter10debug_list17ha6f679d6ea0da051E(ptr noalias nocapture noundef sret(%"core::fmt::builders::DebugList<'_, '_>") align 8 dereferenceable(16), ptr noalias noundef align 8 dereferenceable(64)) unnamed_addr #0
+
+; core::fmt::builders::DebugList::finish
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @_ZN4core3fmt8builders9DebugList6finish17h7338d0230ed6c7b7E(ptr noalias noundef align 8 dereferenceable(16)) unnamed_addr #0
+
+; core::fmt::Formatter::debug_lower_hex
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @_ZN4core3fmt9Formatter15debug_lower_hex17h02451919f875e20fE(ptr noalias noundef readonly align 8 dereferenceable(64)) unnamed_addr #0
+
+; core::fmt::Formatter::debug_upper_hex
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @_ZN4core3fmt9Formatter15debug_upper_hex17ha0597c99843b7c7fE(ptr noalias noundef readonly align 8 dereferenceable(64)) unnamed_addr #0
+
+; core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @"_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5ab4f508d380af32E"(ptr noalias noundef readonly align 1 dereferenceable(1), ptr noalias noundef align 8 dereferenceable(64)) unnamed_addr #0
+
+; core::fmt::num::<impl core::fmt::UpperHex for u8>::fmt
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @"_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h1292c8b8bfbad611E"(ptr noalias noundef readonly align 1 dereferenceable(1), ptr noalias noundef align 8 dereferenceable(64)) unnamed_addr #0
+
+; core::fmt::num::<impl core::fmt::LowerHex for u8>::fmt
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @"_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17h4887ced3a43cbb7bE"(ptr noalias noundef readonly align 1 dereferenceable(1), ptr noalias noundef align 8 dereferenceable(64)) unnamed_addr #0
+
+; core::fmt::num::imp::<impl core::fmt::Display for u16>::fmt
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @"_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h92d6ed61ed30e366E"(ptr noalias noundef readonly align 2 dereferenceable(2), ptr noalias noundef align 8 dereferenceable(64)) unnamed_addr #0
+
+; core::fmt::num::<impl core::fmt::UpperHex for u16>::fmt
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @"_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17h333cc88ae1837532E"(ptr noalias noundef readonly align 2 dereferenceable(2), ptr noalias noundef align 8 dereferenceable(64)) unnamed_addr #0
+
+; core::fmt::num::<impl core::fmt::LowerHex for u16>::fmt
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @"_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17h3e388c420aea3b33E"(ptr noalias noundef readonly align 2 dereferenceable(2), ptr noalias noundef align 8 dereferenceable(64)) unnamed_addr #0
+
+; core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @"_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h7921b150890d4ccbE"(ptr noalias noundef readonly align 8 dereferenceable(8), ptr noalias noundef align 8 dereferenceable(64)) unnamed_addr #0
+
+; core::fmt::num::<impl core::fmt::LowerHex for usize>::fmt
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @"_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h783d0409ebf978eaE"(ptr noalias noundef readonly align 8 dereferenceable(8), ptr noalias noundef align 8 dereferenceable(64)) unnamed_addr #0
+
+; core::fmt::builders::DebugList::entry
+; Function Attrs: nonlazybind uwtable
+declare noundef align 8 dereferenceable(16) ptr @_ZN4core3fmt8builders9DebugList5entry17h7ad76c6fe3c0cf5aE(ptr noalias noundef align 8 dereferenceable(16), ptr noundef nonnull align 1, ptr noalias noundef readonly align 8 dereferenceable(24)) unnamed_addr #0
+
+; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
+declare void @llvm.assume(i1 noundef) #15
+
+; core::slice::<impl [T]>::copy_from_slice::len_mismatch_fail
+; Function Attrs: cold noinline noreturn nonlazybind uwtable
+declare void @"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17hfd4b87aade02c693E"(i64 noundef, i64 noundef, ptr noalias noundef readonly align 8 dereferenceable(24)) unnamed_addr #4
+
+; core::result::unwrap_failed
+; Function Attrs: cold noinline noreturn nonlazybind uwtable
+declare void @_ZN4core6result13unwrap_failed17h8c4b86241881fbbbE(ptr noalias noundef nonnull readonly align 1, i64 noundef, ptr noundef nonnull align 1, ptr noalias noundef readonly align 8 dereferenceable(24), ptr noalias noundef readonly align 8 dereferenceable(24)) unnamed_addr #4
+
+; core::panicking::assert_failed_inner
+; Function Attrs: cold noinline noreturn nonlazybind uwtable
+declare void @_ZN4core9panicking19assert_failed_inner17h717c029df0cb454bE(i8 noundef, ptr noundef nonnull align 1, ptr noalias noundef readonly align 8 dereferenceable(24), ptr noundef nonnull align 1, ptr noalias noundef readonly align 8 dereferenceable(24), ptr noalias nocapture noundef readonly align 8 dereferenceable(48), ptr noalias noundef readonly align 8 dereferenceable(24)) unnamed_addr #4
+
+; Function Attrs: nounwind nonlazybind allockind("alloc,uninitialized,aligned") allocsize(0) uwtable
+declare noalias noundef ptr @__rust_alloc(i64 noundef, i64 allocalign noundef) unnamed_addr #16
+
+; Function Attrs: nounwind nonlazybind allockind("realloc,aligned") allocsize(3) uwtable
+declare noalias noundef ptr @__rust_realloc(ptr allocptr noundef, i64 noundef, i64 allocalign noundef, i64 noundef) unnamed_addr #17
+
+; alloc::raw_vec::capacity_overflow
+; Function Attrs: noreturn nonlazybind uwtable
+declare void @_ZN5alloc7raw_vec17capacity_overflow17h7596d82a86d51ab8E() unnamed_addr #18
+
+; alloc::alloc::handle_alloc_error
+; Function Attrs: cold noreturn nonlazybind uwtable
+declare void @_ZN5alloc5alloc18handle_alloc_error17h6c194ef306599f55E(i64 noundef, i64 noundef) unnamed_addr #19
+
+; Function Attrs: nounwind nonlazybind allockind("free") uwtable
+declare void @__rust_dealloc(ptr allocptr noundef, i64 noundef, i64 noundef) unnamed_addr #20
+
+; core::fmt::Formatter::write_str
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @_ZN4core3fmt9Formatter9write_str17hbd49080fe771c6c2E(ptr noalias noundef align 8 dereferenceable(64), ptr noalias noundef nonnull readonly align 1, i64 noundef) unnamed_addr #0
+
+; core::fmt::Formatter::debug_tuple_field1_finish
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @_ZN4core3fmt9Formatter25debug_tuple_field1_finish17h989fcf61d9a53692E(ptr noalias noundef align 8 dereferenceable(64), ptr noalias noundef nonnull readonly align 1, i64 noundef, ptr noundef nonnull align 1, ptr noalias noundef readonly align 8 dereferenceable(24)) unnamed_addr #0
+
+; core::panicking::panic_bounds_check
+; Function Attrs: cold noinline noreturn nonlazybind uwtable
+declare void @_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E(i64 noundef, i64 noundef, ptr noalias noundef readonly align 8 dereferenceable(24)) unnamed_addr #4
+
+; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
+declare i64 @llvm.ctlz.i64(i64, i1 immarg) #14
+
+; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
+declare i64 @llvm.usub.sat.i64(i64, i64) #14
+
+; core::fmt::Formatter::write_fmt
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @_ZN4core3fmt9Formatter9write_fmt17hf01228dccc6fed43E(ptr noalias noundef align 8 dereferenceable(64), ptr noalias nocapture noundef align 8 dereferenceable(48)) unnamed_addr #0
+
+; core::fmt::Formatter::debug_struct_field3_finish
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @_ZN4core3fmt9Formatter26debug_struct_field3_finish17hb6f6e1d1fccb9bb5E(ptr noalias noundef align 8 dereferenceable(64), ptr noalias noundef nonnull readonly align 1, i64 noundef, ptr noalias noundef nonnull readonly align 1, i64 noundef, ptr noundef nonnull align 1, ptr noalias noundef readonly align 8 dereferenceable(24), ptr noalias noundef nonnull readonly align 1, i64 noundef, ptr noundef nonnull align 1, ptr noalias noundef readonly align 8 dereferenceable(24), ptr noalias noundef nonnull readonly align 1, i64 noundef, ptr noundef nonnull align 1, ptr noalias noundef readonly align 8 dereferenceable(24)) unnamed_addr #0
+
+; core::fmt::Formatter::debug_struct_field2_finish
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @_ZN4core3fmt9Formatter26debug_struct_field2_finish17h79e5a622e536f867E(ptr noalias noundef align 8 dereferenceable(64), ptr noalias noundef nonnull readonly align 1, i64 noundef, ptr noalias noundef nonnull readonly align 1, i64 noundef, ptr noundef nonnull align 1, ptr noalias noundef readonly align 8 dereferenceable(24), ptr noalias noundef nonnull readonly align 1, i64 noundef, ptr noundef nonnull align 1, ptr noalias noundef readonly align 8 dereferenceable(24)) unnamed_addr #0
+
+; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
+declare i16 @llvm.bswap.i16(i16) #14
+
+; core::fmt::Formatter::debug_struct_field1_finish
+; Function Attrs: nonlazybind uwtable
+declare noundef zeroext i1 @_ZN4core3fmt9Formatter26debug_struct_field1_finish17he206a7683441c471E(ptr noalias noundef align 8 dereferenceable(64), ptr noalias noundef nonnull readonly align 1, i64 noundef, ptr noalias noundef nonnull readonly align 1, i64 noundef, ptr noundef nonnull align 1, ptr noalias noundef readonly align 8 dereferenceable(24)) unnamed_addr #0
+
+; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
+declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #21
+
+; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
+declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #21
+
+; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
+declare i64 @llvm.ctpop.i64(i64) #22
+
+; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite)
+declare void @llvm.experimental.noalias.scope.decl(metadata) #23
+
+; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
+declare i64 @llvm.umax.i64(i64, i64) #22
+
+; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
+declare i64 @llvm.umin.i64(i64, i64) #22
+
+; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
+declare <2 x i64> @llvm.ctpop.v2i64(<2 x i64>) #22
+
+attributes #0 = { nonlazybind uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" "target-features"="-sse3,-avx,-avx2,-sse4.2" }
+attributes #1 = { inlinehint nonlazybind uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" "target-features"="-sse3,-avx,-avx2,-sse4.2" }
+attributes #2 = { nounwind nonlazybind uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" "target-features"="-sse3,-avx,-avx2,-sse4.2" }
+attributes #3 = { inlinehint mustprogress nofree norecurse nosync nounwind nonlazybind willreturn memory(none) uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" "target-features"="-sse3,-avx,-avx2,-sse4.2" }
+attributes #4 = { cold noinline noreturn nonlazybind uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" "target-features"="-sse3,-avx,-avx2,-sse4.2" }
+attributes #5 = { noinline nounwind nonlazybind uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" "target-features"="-sse3,-avx,-avx2,-sse4.2" }
+attributes #6 = { noinline nonlazybind uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" "target-features"="-sse3,-avx,-avx2,-sse4.2" }
+attributes #7 = { cold nonlazybind uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" "target-features"="-sse3,-avx,-avx2,-sse4.2" }
+attributes #8 = { mustprogress nofree nosync nounwind nonlazybind willreturn memory(none) uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" "target-features"="-sse3,-avx,-avx2,-sse4.2" }
+attributes #9 = { mustprogress nofree norecurse nosync nounwind nonlazybind willreturn memory(none) uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" "target-features"="-sse3,-avx,-avx2,-sse4.2" }
+attributes #10 = { mustprogress nofree norecurse nosync nounwind nonlazybind willreturn memory(argmem: read) uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" "target-features"="-sse3,-avx,-avx2,-sse4.2" }
+attributes #11 = { mustprogress nofree nosync nounwind nonlazybind willreturn memory(argmem: readwrite) uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" "target-features"="-sse3,-avx,-avx2,-sse4.2" }
+attributes #12 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
+attributes #13 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
+attributes #14 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
+attributes #15 = { mustprogress nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
+attributes #16 = { nounwind nonlazybind allockind("alloc,uninitialized,aligned") allocsize(0) uwtable "alloc-family"="__rust_alloc" "probe-stack"="inline-asm" "target-cpu"="x86-64" "target-features"="-sse3,-avx,-avx2,-sse4.2" }
+attributes #17 = { nounwind nonlazybind allockind("realloc,aligned") allocsize(3) uwtable "alloc-family"="__rust_alloc" "probe-stack"="inline-asm" "target-cpu"="x86-64" "target-features"="-sse3,-avx,-avx2,-sse4.2" }
+attributes #18 = { noreturn nonlazybind uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" "target-features"="-sse3,-avx,-avx2,-sse4.2" }
+attributes #19 = { cold noreturn nonlazybind uwtable "probe-stack"="inline-asm" "target-cpu"="x86-64" "target-features"="-sse3,-avx,-avx2,-sse4.2" }
+attributes #20 = { nounwind nonlazybind allockind("free") uwtable "alloc-family"="__rust_alloc" "probe-stack"="inline-asm" "target-cpu"="x86-64" "target-features"="-sse3,-avx,-avx2,-sse4.2" }
+attributes #21 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
+attributes #22 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
+attributes #23 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: readwrite) }
+attributes #24 = { nounwind }
+attributes #25 = { noreturn }
+attributes #26 = { noinline }
+
+!llvm.module.flags = !{!0, !1}
+!llvm.ident = !{!2}
+
+!0 = !{i32 8, !"PIC Level", i32 2}
+!1 = !{i32 2, !"RtLibUseGOT", i32 1}
+!2 = !{!"rustc version 1.74.0 (79e9716c9 2023-11-13)"}
+!3 = !{}
+!4 = !{i64 1}
+!5 = !{!6}
+!6 = distinct !{!6, !7, !"_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hb9743ec7083ac4f0E: %self"}
+!7 = distinct !{!7, !"_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17hb9743ec7083ac4f0E"}
+!8 = !{i64 8}
+!9 = !{!10, !12, !13}
+!10 = distinct !{!10, !11, !"_ZN48_$LT$$u5b$T$u5d$$u20$as$u20$core..fmt..Debug$GT$3fmt17h40749695d80f42acE: %self.0"}
+!11 = distinct !{!11, !"_ZN48_$LT$$u5b$T$u5d$$u20$as$u20$core..fmt..Debug$GT$3fmt17h40749695d80f42acE"}
+!12 = distinct !{!12, !11, !"_ZN48_$LT$$u5b$T$u5d$$u20$as$u20$core..fmt..Debug$GT$3fmt17h40749695d80f42acE: %f"}
+!13 = distinct !{!13, !14, !"_ZN65_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hfb04d40fa165d9a7E: %f"}
+!14 = distinct !{!14, !"_ZN65_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hfb04d40fa165d9a7E"}
+!15 = !{!10}
+!16 = !{!17, !10, !12, !13}
+!17 = distinct !{!17, !18, !"_ZN4core3fmt8builders9DebugList7entries17hf955381dc656065aE: %self"}
+!18 = distinct !{!18, !"_ZN4core3fmt8builders9DebugList7entries17hf955381dc656065aE"}
+!19 = !{!20}
+!20 = distinct !{!20, !21, !"_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hda6ef4ff662f905dE: %self"}
+!21 = distinct !{!21, !"_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hda6ef4ff662f905dE"}
+!22 = !{i64 2}
+!23 = !{!24}
+!24 = distinct !{!24, !25, !"_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h84f1bfa5dc014928E: %self"}
+!25 = distinct !{!25, !"_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17h84f1bfa5dc014928E"}
+!26 = !{!27}
+!27 = distinct !{!27, !28, !"_ZN86_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h54732f587efc4ab0E: %self"}
+!28 = distinct !{!28, !"_ZN86_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h54732f587efc4ab0E"}
+!29 = !{i64 0, i64 -9223372036854775807}
+!30 = !{!31}
+!31 = distinct !{!31, !32, !"_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h42b42094881d891dE: %_0"}
+!32 = distinct !{!32, !"_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h42b42094881d891dE"}
+!33 = !{!34}
+!34 = distinct !{!34, !35, !"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E: %self"}
+!35 = distinct !{!35, !"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E"}
+!36 = !{!37}
+!37 = distinct !{!37, !38, !"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h90659b6bc211e545E: %_0"}
+!38 = distinct !{!38, !"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h90659b6bc211e545E"}
+!39 = !{i64 0, i64 2}
+!40 = !{!41, !34}
+!41 = distinct !{!41, !42, !"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17hec4661957d5b5156E: %self"}
+!42 = distinct !{!42, !"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17hec4661957d5b5156E"}
+!43 = !{!44}
+!44 = distinct !{!44, !45, !"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E: %self"}
+!45 = distinct !{!45, !"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17he501bd7d6d30ccf7E"}
+!46 = !{!47}
+!47 = distinct !{!47, !48, !"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h90659b6bc211e545E: %_0"}
+!48 = distinct !{!48, !"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h90659b6bc211e545E"}
+!49 = !{!50, !44}
+!50 = distinct !{!50, !51, !"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17hec4661957d5b5156E: %self"}
+!51 = distinct !{!51, !"_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$15set_ptr_and_cap17hec4661957d5b5156E"}
+!52 = !{i64 0, i64 65}
+!53 = !{!54}
+!54 = distinct !{!54, !55, !"_ZN4core6result19Result$LT$T$C$E$GT$6expect17h9ffcb329ef52d96dE: %t"}
+!55 = distinct !{!55, !"_ZN4core6result19Result$LT$T$C$E$GT$6expect17h9ffcb329ef52d96dE"}
+!56 = !{!57}
+!57 = distinct !{!57, !55, !"_ZN4core6result19Result$LT$T$C$E$GT$6expect17h9ffcb329ef52d96dE: %self"}
+!58 = !{!54, !57}
+!59 = !{!"branch_weights", i32 1, i32 2000}
+!60 = !{!61}
+!61 = distinct !{!61, !62, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb941c2cca04652f0E: %self"}
+!62 = distinct !{!62, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb941c2cca04652f0E"}
+!63 = !{!64}
+!64 = distinct !{!64, !65, !"_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard3new17h113340e5cbc1f570E: %_0"}
+!65 = distinct !{!65, !"_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard3new17h113340e5cbc1f570E"}
+!66 = !{!67}
+!67 = distinct !{!67, !65, !"_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard3new17h113340e5cbc1f570E: %data"}
+!68 = !{!69}
+!69 = distinct !{!69, !70, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb941c2cca04652f0E: %self"}
+!70 = distinct !{!70, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17hb941c2cca04652f0E"}
+!71 = !{!69, !67}
+!72 = !{!69, !64, !67}
+!73 = !{!64, !67}
+!74 = !{i64 0, i64 7}
+!75 = !{!76}
+!76 = distinct !{!76, !77, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %_0"}
+!77 = distinct !{!77, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E"}
+!78 = !{!79, !80}
+!79 = distinct !{!79, !77, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %pieces.0"}
+!80 = distinct !{!80, !77, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %args.0"}
+!81 = !{!82}
+!82 = distinct !{!82, !83, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %_0"}
+!83 = distinct !{!83, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E"}
+!84 = !{!85, !86}
+!85 = distinct !{!85, !83, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %pieces.0"}
+!86 = distinct !{!86, !83, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %args.0"}
+!87 = !{!88}
+!88 = distinct !{!88, !89, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %_0"}
+!89 = distinct !{!89, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E"}
+!90 = !{!91, !92}
+!91 = distinct !{!91, !89, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %pieces.0"}
+!92 = distinct !{!92, !89, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %args.0"}
+!93 = !{!94}
+!94 = distinct !{!94, !95, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %_0"}
+!95 = distinct !{!95, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E"}
+!96 = !{!97, !98}
+!97 = distinct !{!97, !95, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %pieces.0"}
+!98 = distinct !{!98, !95, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %args.0"}
+!99 = !{!100}
+!100 = distinct !{!100, !101, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %_0"}
+!101 = distinct !{!101, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E"}
+!102 = !{!103, !104}
+!103 = distinct !{!103, !101, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %pieces.0"}
+!104 = distinct !{!104, !101, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %args.0"}
+!105 = !{!106}
+!106 = distinct !{!106, !107, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %_0"}
+!107 = distinct !{!107, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E"}
+!108 = !{!109, !110}
+!109 = distinct !{!109, !107, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %pieces.0"}
+!110 = distinct !{!110, !107, !"_ZN4core3fmt9Arguments6new_v117h7e98e8a5572b2305E: %args.0"}
+!111 = !{!112}
+!112 = distinct !{!112, !113}
+!113 = distinct !{!113, !"LVerDomain"}
+!114 = !{!115}
+!115 = distinct !{!115, !113}
+!116 = distinct !{!116, !117, !118}
+!117 = !{!"llvm.loop.isvectorized", i32 1}
+!118 = !{!"llvm.loop.unroll.runtime.disable"}
+!119 = !{!"branch_weights", i32 2000, i32 1}
+!120 = distinct !{!120, !117}
+!121 = !{!122}
+!122 = distinct !{!122, !123}
+!123 = distinct !{!123, !"LVerDomain"}
+!124 = !{!125}
+!125 = distinct !{!125, !123}
+!126 = distinct !{!126, !117, !118}
+!127 = distinct !{!127, !117}
+!128 = !{!129}
+!129 = distinct !{!129, !130}
+!130 = distinct !{!130, !"LVerDomain"}
+!131 = !{!132}
+!132 = distinct !{!132, !130}
+!133 = distinct !{!133, !117, !118}
+!134 = distinct !{!134, !117}
+!135 = !{!136, !138}
+!136 = distinct !{!136, !137, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E: %self.0"}
+!137 = distinct !{!137, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E"}
+!138 = distinct !{!138, !137, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E: %src.0"}
+!139 = !{!140}
+!140 = distinct !{!140, !137, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E: argument 2"}
+!141 = !{!142, !144}
+!142 = distinct !{!142, !143, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$12split_at_mut17ha5bfd732e9e4b989E: %_0"}
+!143 = distinct !{!143, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$12split_at_mut17ha5bfd732e9e4b989E"}
+!144 = distinct !{!144, !143, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$12split_at_mut17ha5bfd732e9e4b989E: %self.0"}
+!145 = !{!146, !148}
+!146 = distinct !{!146, !147, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E: %self.0"}
+!147 = distinct !{!147, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E"}
+!148 = distinct !{!148, !147, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E: %src.0"}
+!149 = !{!150}
+!150 = distinct !{!150, !147, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E: argument 2"}
+!151 = !{!152}
+!152 = distinct !{!152, !153, !"_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hc1f77569f7ffd7a3E: %slice.0"}
+!153 = distinct !{!153, !"_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hc1f77569f7ffd7a3E"}
+!154 = !{!155, !157}
+!155 = distinct !{!155, !156, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E: %self.0"}
+!156 = distinct !{!156, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E"}
+!157 = distinct !{!157, !156, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E: %src.0"}
+!158 = !{!159}
+!159 = distinct !{!159, !156, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E: argument 2"}
+!160 = distinct !{!160, !117, !118}
+!161 = !{!162}
+!162 = distinct !{!162, !163, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E: %self.0"}
+!163 = distinct !{!163, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E"}
+!164 = !{!165}
+!165 = distinct !{!165, !163, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E: %src.0"}
+!166 = !{!162, !165}
+!167 = !{!168}
+!168 = distinct !{!168, !163, !"_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17h307aab6fdbf75ef0E: argument 2"}
+!169 = distinct !{!169, !117, !118}
+!170 = distinct !{!170, !118, !117}
+!171 = !{!172}
+!172 = distinct !{!172, !173, !"_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hc1f77569f7ffd7a3E: %slice.0"}
+!173 = distinct !{!173, !"_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hc1f77569f7ffd7a3E"}
+!174 = !{!175}
+!175 = distinct !{!175, !176, !"_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h901708db41b7f678E: %slice.0"}
+!176 = distinct !{!176, !"_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$5index17h901708db41b7f678E"}
+!177 = distinct !{!177, !118, !117}
+!178 = !{!179}
+!179 = distinct !{!179, !180, !"_ZN62_$LT$T$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h9bf62ff95364ce18E: %_0"}
+!180 = distinct !{!180, !"_ZN62_$LT$T$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h9bf62ff95364ce18E"}
+!181 = !{!182}
+!182 = distinct !{!182, !183, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$11extend_with17hb2e1b10a1708af56E: %self"}
+!183 = distinct !{!183, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$11extend_with17hb2e1b10a1708af56E"}
+!184 = !{!185, !187, !188}
+!185 = distinct !{!185, !186, !"_ZN52_$LT$T$u20$as$u20$alloc..slice..hack..ConvertVec$GT$6to_vec17h92dd8dd75bda9a01E: %_0"}
+!186 = distinct !{!186, !"_ZN52_$LT$T$u20$as$u20$alloc..slice..hack..ConvertVec$GT$6to_vec17h92dd8dd75bda9a01E"}
+!187 = distinct !{!187, !186, !"_ZN52_$LT$T$u20$as$u20$alloc..slice..hack..ConvertVec$GT$6to_vec17h92dd8dd75bda9a01E: %s.0"}
+!188 = distinct !{!188, !189, !"_ZN67_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h5ba980d016ab4c27E: %_0"}
+!189 = distinct !{!189, !"_ZN67_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h5ba980d016ab4c27E"}
+!190 = !{!191}
+!191 = distinct !{!191, !192, !"_ZN62_$LT$T$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h9bf62ff95364ce18E: %_0"}
+!192 = distinct !{!192, !"_ZN62_$LT$T$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h9bf62ff95364ce18E"}
+!193 = !{!194}
+!194 = distinct !{!194, !195, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$11extend_with17hb2e1b10a1708af56E: %self"}
+!195 = distinct !{!195, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$11extend_with17hb2e1b10a1708af56E"}
+!196 = !{!197, !199, !200, !202}
+!197 = distinct !{!197, !198, !"_ZN111_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$alloc..vec..spec_from_iter_nested..SpecFromIterNested$LT$T$C$I$GT$$GT$9from_iter17hae729d67a1762341E: %_0"}
+!198 = distinct !{!198, !"_ZN111_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$alloc..vec..spec_from_iter_nested..SpecFromIterNested$LT$T$C$I$GT$$GT$9from_iter17hae729d67a1762341E"}
+!199 = distinct !{!199, !198, !"_ZN111_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$alloc..vec..spec_from_iter_nested..SpecFromIterNested$LT$T$C$I$GT$$GT$9from_iter17hae729d67a1762341E: %iterator"}
+!200 = distinct !{!200, !201, !"_ZN98_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$alloc..vec..spec_from_iter..SpecFromIter$LT$T$C$I$GT$$GT$9from_iter17hbea476331bd13207E: %_0"}
+!201 = distinct !{!201, !"_ZN98_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$alloc..vec..spec_from_iter..SpecFromIter$LT$T$C$I$GT$$GT$9from_iter17hbea476331bd13207E"}
+!202 = distinct !{!202, !201, !"_ZN98_$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$alloc..vec..spec_from_iter..SpecFromIter$LT$T$C$I$GT$$GT$9from_iter17hbea476331bd13207E: %iterator"}
+!203 = !{i16 0, i16 2}
+!204 = !{!205, !207, !209, !210, !212, !213, !215, !216, !218, !219, !221, !222, !224, !197, !199, !200, !202}
+!205 = distinct !{!205, !206, !"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hdbfbe6603b5dc130E: %f"}
+!206 = distinct !{!206, !"_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hdbfbe6603b5dc130E"}
+!207 = distinct !{!207, !208, !"_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17ha0c5ca71de77ffc3E: %self"}
+!208 = distinct !{!208, !"_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17ha0c5ca71de77ffc3E"}
+!209 = distinct !{!209, !208, !"_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17ha0c5ca71de77ffc3E: %fold"}
+!210 = distinct !{!210, !211, !"_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h60289b12d92dbddaE: %self"}
+!211 = distinct !{!211, !"_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h60289b12d92dbddaE"}
+!212 = distinct !{!212, !211, !"_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17h60289b12d92dbddaE: %g"}
+!213 = distinct !{!213, !214, !"_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hff9b760d4a84a8d8E: %self"}
+!214 = distinct !{!214, !"_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hff9b760d4a84a8d8E"}
+!215 = distinct !{!215, !214, !"_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hff9b760d4a84a8d8E: %g"}
+!216 = distinct !{!216, !217, !"_ZN4core4iter6traits8iterator8Iterator8for_each17h07293024e45a8b46E: %self"}
+!217 = distinct !{!217, !"_ZN4core4iter6traits8iterator8Iterator8for_each17h07293024e45a8b46E"}
+!218 = distinct !{!218, !217, !"_ZN4core4iter6traits8iterator8Iterator8for_each17h07293024e45a8b46E: %f"}
+!219 = distinct !{!219, !220, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$14extend_trusted17h79e2fa5ae53b6488E: %self"}
+!220 = distinct !{!220, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$14extend_trusted17h79e2fa5ae53b6488E"}
+!221 = distinct !{!221, !220, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$14extend_trusted17h79e2fa5ae53b6488E: %iterator"}
+!222 = distinct !{!222, !223, !"_ZN97_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$T$C$I$GT$$GT$11spec_extend17hef1d5ec65c03c861E: %self"}
+!223 = distinct !{!223, !"_ZN97_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$T$C$I$GT$$GT$11spec_extend17hef1d5ec65c03c861E"}
+!224 = distinct !{!224, !223, !"_ZN97_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$T$C$I$GT$$GT$11spec_extend17hef1d5ec65c03c861E: %iterator"}
+!225 = !{!226, !228, !230, !205, !207, !209, !210, !212, !213, !215, !216, !218, !219, !221, !222, !224, !197, !199, !200, !202}
+!226 = distinct !{!226, !227, !"_ZN4core4iter8adapters3map8map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h14329c3a0f4177a5E: %_1"}
+!227 = distinct !{!227, !"_ZN4core4iter8adapters3map8map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h14329c3a0f4177a5E"}
+!228 = distinct !{!228, !229, !"_ZN4core4iter8adapters3map8map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h94360694cc5478d3E: %_1"}
+!229 = distinct !{!229, !"_ZN4core4iter8adapters3map8map_fold28_$u7b$$u7b$closure$u7d$$u7d$17h94360694cc5478d3E"}
+!230 = distinct !{!230, !231, !"_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17hce835e915ac759b3E: %_1"}
+!231 = distinct !{!231, !"_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17hce835e915ac759b3E"}
+!232 = !{!233, !235, !226, !228, !230, !205, !207, !209, !210, !212, !213, !215, !216, !218, !219, !221, !222, !224, !197, !199, !200, !202}
+!233 = distinct !{!233, !234, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$14extend_trusted28_$u7b$$u7b$closure$u7d$$u7d$17h6183fdbbf54f2427E: %_1"}
+!234 = distinct !{!234, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$14extend_trusted28_$u7b$$u7b$closure$u7d$$u7d$17h6183fdbbf54f2427E"}
+!235 = distinct !{!235, !236, !"_ZN4core4iter6traits8iterator8Iterator8for_each4call28_$u7b$$u7b$closure$u7d$$u7d$17h3e1618833ffc679bE: %_1"}
+!236 = distinct !{!236, !"_ZN4core4iter6traits8iterator8Iterator8for_each4call28_$u7b$$u7b$closure$u7d$$u7d$17h3e1618833ffc679bE"}
+!237 = !{!238, !240}
+!238 = distinct !{!238, !239, !"_ZN98_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..adapters..take..SpecTake$GT$13spec_for_each17h53bb2d18a4baac4eE: %self"}
+!239 = distinct !{!239, !"_ZN98_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..adapters..take..SpecTake$GT$13spec_for_each17h53bb2d18a4baac4eE"}
+!240 = distinct !{!240, !239, !"_ZN98_$LT$core..iter..adapters..take..Take$LT$I$GT$$u20$as$u20$core..iter..adapters..take..SpecTake$GT$13spec_for_each17h53bb2d18a4baac4eE: %f"}
+!241 = !{!242}
+!242 = distinct !{!242, !243, !"_ZN22reed_solomon_novelpoly5field5f2e1611decode_main17ha50a767c35f0e241E: %codeword.0"}
+!243 = distinct !{!243, !"_ZN22reed_solomon_novelpoly5field5f2e1611decode_main17ha50a767c35f0e241E"}
+!244 = !{!245}
+!245 = distinct !{!245, !243, !"_ZN22reed_solomon_novelpoly5field5f2e1611decode_main17ha50a767c35f0e241E: %erasure.0"}
+!246 = !{!247}
+!247 = distinct !{!247, !243, !"_ZN22reed_solomon_novelpoly5field5f2e1611decode_main17ha50a767c35f0e241E: %log_walsh2.0"}
+!248 = !{!242, !245, !247}
+!249 = !{i8 0, i8 2}
+!250 = !{!242, !247}
+!251 = !{!245, !247}
+!252 = !{!242, !245}
+!253 = !{!240}
+!254 = !{!255}
+!255 = distinct !{!255, !256, !"_ZN4core4iter6traits8iterator8Iterator8try_fold17h2bef1e687fd804b3E: argument 1"}
+!256 = distinct !{!256, !"_ZN4core4iter6traits8iterator8Iterator8try_fold17h2bef1e687fd804b3E"}
+!257 = !{!258, !260, !255, !238, !240}
+!258 = distinct !{!258, !259, !"_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd2d3e6c5315dbe04E: %self"}
+!259 = distinct !{!259, !"_ZN103_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd2d3e6c5315dbe04E"}
+!260 = distinct !{!260, !256, !"_ZN4core4iter6traits8iterator8Iterator8try_fold17h2bef1e687fd804b3E: %self"}
+!261 = !{!262}
+!262 = distinct !{!262, !263, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17hcf42f679d2a7f6c3E: %self"}
+!263 = distinct !{!263, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17hcf42f679d2a7f6c3E"}
+!264 = !{!265, !267, !262, !255, !240}
+!265 = distinct !{!265, !266, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h9d73ec3549f7e1a6E: %self"}
+!266 = distinct !{!266, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h9d73ec3549f7e1a6E"}
+!267 = distinct !{!267, !268, !"_ZN132_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$$RF$T$C$core..slice..iter..Iter$LT$T$GT$$GT$$GT$11spec_extend17he00408687ac2e521E: %self"}
+!268 = distinct !{!268, !"_ZN132_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$$RF$T$C$core..slice..iter..Iter$LT$T$GT$$GT$$GT$11spec_extend17he00408687ac2e521E"}
+!269 = !{!270, !260, !238}
+!270 = distinct !{!270, !263, !"_ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17hcf42f679d2a7f6c3E: %other.0"}
+!271 = !{!238}
+!272 = !{!267, !262, !255, !240}
+!273 = !{!262, !270, !260, !255, !238, !240}
+!274 = !{!275, !238, !240}
+!275 = distinct !{!275, !276, !"_ZN86_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h54732f587efc4ab0E: %self"}
+!276 = distinct !{!276, !"_ZN86_$LT$alloc..vec..into_iter..IntoIter$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h54732f587efc4ab0E"}
+!277 = distinct !{!277, !117, !118}
+!278 = !{!279}
+!279 = distinct !{!279, !280, !"_ZN22reed_solomon_novelpoly5field5f2e1611walsh_plain17h7770fb0b24f1eac3E: %data.0"}
+!280 = distinct !{!280, !"_ZN22reed_solomon_novelpoly5field5f2e1611walsh_plain17h7770fb0b24f1eac3E"}
+!281 = !{!279, !282}
+!282 = distinct !{!282, !283}
+!283 = distinct !{!283, !"LVerDomain"}
+!284 = !{!285}
+!285 = distinct !{!285, !283}
+!286 = !{!279, !285}
+!287 = distinct !{!287, !117, !118}
+!288 = distinct !{!288, !117, !118}
+!289 = distinct !{!289, !290, !117, !118}
+!290 = !{!"llvm.loop.unswitch.injection.disable"}
+!291 = distinct !{!291, !118, !117}
+!292 = distinct !{!292, !117}
+!293 = !{!294}
+!294 = distinct !{!294, !295, !"_ZN22reed_solomon_novelpoly5field5f2e1611walsh_plain17h7770fb0b24f1eac3E: %data.0"}
+!295 = distinct !{!295, !"_ZN22reed_solomon_novelpoly5field5f2e1611walsh_plain17h7770fb0b24f1eac3E"}
+!296 = !{!294, !297}
+!297 = distinct !{!297, !298}
+!298 = distinct !{!298, !"LVerDomain"}
+!299 = !{!300}
+!300 = distinct !{!300, !298}
+!301 = !{!294, !300}
+!302 = distinct !{!302, !117, !118}
+!303 = distinct !{!303, !117}
+!304 = distinct !{!304, !290, !118, !117}
+!305 = distinct !{!305, !118, !117}
+!306 = !{!307, !309}
+!307 = distinct !{!307, !308, !"_ZN22reed_solomon_novelpoly5field5f2e1621generate_field_tables17hc6f474d1e8e993cbE: %_0"}
+!308 = distinct !{!308, !"_ZN22reed_solomon_novelpoly5field5f2e1621generate_field_tables17hc6f474d1e8e993cbE"}
+!309 = distinct !{!309, !310, !"_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT9initalize17ha5ac3800babec180E: %_0"}
+!310 = distinct !{!310, !"_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT9initalize17ha5ac3800babec180E"}
+!311 = !{!312}
+!312 = distinct !{!312, !313, !"_ZN22reed_solomon_novelpoly5field5f2e1611walsh_plain17h7770fb0b24f1eac3E: %data.0"}
+!313 = distinct !{!313, !"_ZN22reed_solomon_novelpoly5field5f2e1611walsh_plain17h7770fb0b24f1eac3E"}
+!314 = !{!312, !315}
+!315 = distinct !{!315, !316}
+!316 = distinct !{!316, !"LVerDomain"}
+!317 = !{!307, !309, !318}
+!318 = distinct !{!318, !316}
+!319 = !{!312, !318}
+!320 = distinct !{!320, !117, !118}
+!321 = !{!312, !307, !309}
+!322 = distinct !{!322, !117}
+!323 = distinct !{!323, !117, !118}
+!324 = distinct !{!324, !117, !118}
+!325 = distinct !{!325, !117, !118}
+!326 = distinct !{!326, !117, !118}
+!327 = distinct !{!327, !117, !118}
+!328 = distinct !{!328, !117, !118}
+!329 = !{!309}
+!330 = !{!331}
+!331 = distinct !{!331, !332, !"_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE: %log_table.0"}
+!332 = distinct !{!332, !"_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE"}
+!333 = !{!334}
+!334 = distinct !{!334, !332, !"_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE: %exp_table.0"}
+!335 = !{!334, !309}
+!336 = !{!331, !309}
+!337 = !{!331, !334, !309}
+!338 = !{!339}
+!339 = distinct !{!339, !340, !"_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE: %log_table.0"}
+!340 = distinct !{!340, !"_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE"}
+!341 = !{!342}
+!342 = distinct !{!342, !340, !"_ZN22reed_solomon_novelpoly5field5f2e168Additive12mul_explicit17h37465b912065a32bE: %exp_table.0"}
+!343 = !{!342, !309}
+!344 = !{!339, !309}
+!345 = !{!339, !342, !309}
diff --git a/reed_solomon_novelpoly-e7f9373e66f5f657.s b/reed_solomon_novelpoly-e7f9373e66f5f657.s
new file mode 100644
index 0000000..9bfd806
--- /dev/null
+++ b/reed_solomon_novelpoly-e7f9373e66f5f657.s
@@ -0,0 +1,7093 @@
+	.text
+	.file	"reed_solomon_novelpoly.be3e966f96638472-cgu.0"
+	.section	".text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03f8b3d393e0291bE","ax",@progbits
+	.p2align	4, 0x90
+	.type	_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03f8b3d393e0291bE,@function
+_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03f8b3d393e0291bE:
+	.cfi_startproc
+	pushq	%r14
+	.cfi_def_cfa_offset 16
+	pushq	%rbx
+	.cfi_def_cfa_offset 24
+	pushq	%rax
+	.cfi_def_cfa_offset 32
+	.cfi_offset %rbx, -24
+	.cfi_offset %r14, -16
+	movq	%rsi, %rbx
+	movq	(%rdi), %r14
+	movq	%rsi, %rdi
+	callq	*_ZN4core3fmt9Formatter15debug_lower_hex17h02451919f875e20fE@GOTPCREL(%rip)
+	testb	%al, %al
+	je	.LBB0_1
+	movq	%r14, %rdi
+	movq	%rbx, %rsi
+	addq	$8, %rsp
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	jmpq	*_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17h4887ced3a43cbb7bE@GOTPCREL(%rip)
+.LBB0_1:
+	.cfi_def_cfa_offset 32
+	movq	%rbx, %rdi
+	callq	*_ZN4core3fmt9Formatter15debug_upper_hex17ha0597c99843b7c7fE@GOTPCREL(%rip)
+	movq	%r14, %rdi
+	movq	%rbx, %rsi
+	addq	$8, %rsp
+	testb	%al, %al
+	je	.LBB0_4
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	jmpq	*_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h1292c8b8bfbad611E@GOTPCREL(%rip)
+.LBB0_4:
+	.cfi_def_cfa_offset 32
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	jmpq	*_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5ab4f508d380af32E@GOTPCREL(%rip)
+.Lfunc_end0:
+	.size	_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03f8b3d393e0291bE, .Lfunc_end0-_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03f8b3d393e0291bE
+	.cfi_endproc
+
+	.section	".text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4b55c2857193cb84E","ax",@progbits
+	.p2align	4, 0x90
+	.type	_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4b55c2857193cb84E,@function
+_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4b55c2857193cb84E:
+	.cfi_startproc
+	pushq	%rbp
+	.cfi_def_cfa_offset 16
+	pushq	%r15
+	.cfi_def_cfa_offset 24
+	pushq	%r14
+	.cfi_def_cfa_offset 32
+	pushq	%r13
+	.cfi_def_cfa_offset 40
+	pushq	%r12
+	.cfi_def_cfa_offset 48
+	pushq	%rbx
+	.cfi_def_cfa_offset 56
+	subq	$24, %rsp
+	.cfi_def_cfa_offset 80
+	.cfi_offset %rbx, -56
+	.cfi_offset %r12, -48
+	.cfi_offset %r13, -40
+	.cfi_offset %r14, -32
+	.cfi_offset %r15, -24
+	.cfi_offset %rbp, -16
+	movq	(%rdi), %rax
+	movq	(%rax), %r12
+	movq	16(%rax), %r13
+	leaq	8(%rsp), %rdi
+	callq	*_ZN4core3fmt9Formatter10debug_list17ha6f679d6ea0da051E@GOTPCREL(%rip)
+	testq	%r13, %r13
+	je	.LBB1_3
+	leaq	.L__unnamed_1(%rip), %rbx
+	leaq	8(%rsp), %r14
+	movq	%rsp, %r15
+	movq	_ZN4core3fmt8builders9DebugList5entry17h7ad76c6fe3c0cf5aE@GOTPCREL(%rip), %rbp
+	.p2align	4, 0x90
+.LBB1_2:
+	movq	%r12, (%rsp)
+	incq	%r12
+	movq	%r14, %rdi
+	movq	%r15, %rsi
+	movq	%rbx, %rdx
+	callq	*%rbp
+	decq	%r13
+	jne	.LBB1_2
+.LBB1_3:
+	leaq	8(%rsp), %rdi
+	callq	*_ZN4core3fmt8builders9DebugList6finish17h7338d0230ed6c7b7E@GOTPCREL(%rip)
+	addq	$24, %rsp
+	.cfi_def_cfa_offset 56
+	popq	%rbx
+	.cfi_def_cfa_offset 48
+	popq	%r12
+	.cfi_def_cfa_offset 40
+	popq	%r13
+	.cfi_def_cfa_offset 32
+	popq	%r14
+	.cfi_def_cfa_offset 24
+	popq	%r15
+	.cfi_def_cfa_offset 16
+	popq	%rbp
+	.cfi_def_cfa_offset 8
+	retq
+.Lfunc_end1:
+	.size	_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4b55c2857193cb84E, .Lfunc_end1-_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4b55c2857193cb84E
+	.cfi_endproc
+
+	.section	".text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17ha700999c63438872E","ax",@progbits
+	.p2align	4, 0x90
+	.type	_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17ha700999c63438872E,@function
+_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17ha700999c63438872E:
+	.cfi_startproc
+	pushq	%r14
+	.cfi_def_cfa_offset 16
+	pushq	%rbx
+	.cfi_def_cfa_offset 24
+	pushq	%rax
+	.cfi_def_cfa_offset 32
+	.cfi_offset %rbx, -24
+	.cfi_offset %r14, -16
+	movq	%rsi, %rbx
+	movq	(%rdi), %r14
+	movq	%rsi, %rdi
+	callq	*_ZN4core3fmt9Formatter15debug_lower_hex17h02451919f875e20fE@GOTPCREL(%rip)
+	testb	%al, %al
+	je	.LBB2_1
+	movq	%r14, %rdi
+	movq	%rbx, %rsi
+	addq	$8, %rsp
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	jmpq	*_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h783d0409ebf978eaE@GOTPCREL(%rip)
+.LBB2_1:
+	.cfi_def_cfa_offset 32
+	movq	%rbx, %rdi
+	callq	*_ZN4core3fmt9Formatter15debug_upper_hex17ha0597c99843b7c7fE@GOTPCREL(%rip)
+	movq	%r14, %rdi
+	movq	%rbx, %rsi
+	addq	$8, %rsp
+	testb	%al, %al
+	je	.LBB2_4
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	jmpq	*_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h7921b150890d4ccbE@GOTPCREL(%rip)
+.LBB2_4:
+	.cfi_def_cfa_offset 32
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	jmpq	*_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h41ddf95380c12bacE@GOTPCREL(%rip)
+.Lfunc_end2:
+	.size	_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17ha700999c63438872E, .Lfunc_end2-_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17ha700999c63438872E
+	.cfi_endproc
+
+	.section	".text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb4548768d1434584E","ax",@progbits
+	.p2align	4, 0x90
+	.type	_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb4548768d1434584E,@function
+_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb4548768d1434584E:
+	.cfi_startproc
+	pushq	%r14
+	.cfi_def_cfa_offset 16
+	pushq	%rbx
+	.cfi_def_cfa_offset 24
+	pushq	%rax
+	.cfi_def_cfa_offset 32
+	.cfi_offset %rbx, -24
+	.cfi_offset %r14, -16
+	movq	%rsi, %rbx
+	movq	(%rdi), %r14
+	movq	%rsi, %rdi
+	callq	*_ZN4core3fmt9Formatter15debug_lower_hex17h02451919f875e20fE@GOTPCREL(%rip)
+	testb	%al, %al
+	je	.LBB3_1
+	movq	%r14, %rdi
+	movq	%rbx, %rsi
+	addq	$8, %rsp
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	jmpq	*_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17h3e388c420aea3b33E@GOTPCREL(%rip)
+.LBB3_1:
+	.cfi_def_cfa_offset 32
+	movq	%rbx, %rdi
+	callq	*_ZN4core3fmt9Formatter15debug_upper_hex17ha0597c99843b7c7fE@GOTPCREL(%rip)
+	movq	%r14, %rdi
+	movq	%rbx, %rsi
+	addq	$8, %rsp
+	testb	%al, %al
+	je	.LBB3_4
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	jmpq	*_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17h333cc88ae1837532E@GOTPCREL(%rip)
+.LBB3_4:
+	.cfi_def_cfa_offset 32
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	jmpq	*_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h92d6ed61ed30e366E@GOTPCREL(%rip)
+.Lfunc_end3:
+	.size	_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb4548768d1434584E, .Lfunc_end3-_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb4548768d1434584E
+	.cfi_endproc
+
+	.section	".text._ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E","ax",@progbits
+	.p2align	4, 0x90
+	.type	_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E,@function
+_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E:
+	.cfi_startproc
+	movq	(%rdi), %rdi
+	jmpq	*_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h41ddf95380c12bacE@GOTPCREL(%rip)
+.Lfunc_end4:
+	.size	_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E, .Lfunc_end4-_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E
+	.cfi_endproc
+
+	.section	".text._ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hda6ef4ff662f905dE","ax",@progbits
+	.p2align	4, 0x90
+	.type	_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hda6ef4ff662f905dE,@function
+_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hda6ef4ff662f905dE:
+	.cfi_startproc
+	pushq	%r14
+	.cfi_def_cfa_offset 16
+	pushq	%rbx
+	.cfi_def_cfa_offset 24
+	pushq	%rax
+	.cfi_def_cfa_offset 32
+	.cfi_offset %rbx, -24
+	.cfi_offset %r14, -16
+	movq	%rsi, %rbx
+	movq	%rdi, %r14
+	movq	%rsi, %rdi
+	callq	*_ZN4core3fmt9Formatter15debug_lower_hex17h02451919f875e20fE@GOTPCREL(%rip)
+	testb	%al, %al
+	je	.LBB5_1
+	movq	%r14, %rdi
+	movq	%rbx, %rsi
+	addq	$8, %rsp
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	jmpq	*_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h783d0409ebf978eaE@GOTPCREL(%rip)
+.LBB5_1:
+	.cfi_def_cfa_offset 32
+	movq	%rbx, %rdi
+	callq	*_ZN4core3fmt9Formatter15debug_upper_hex17ha0597c99843b7c7fE@GOTPCREL(%rip)
+	movq	%r14, %rdi
+	movq	%rbx, %rsi
+	addq	$8, %rsp
+	testb	%al, %al
+	je	.LBB5_4
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	jmpq	*_ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h7921b150890d4ccbE@GOTPCREL(%rip)
+.LBB5_4:
+	.cfi_def_cfa_offset 32
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	jmpq	*_ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h41ddf95380c12bacE@GOTPCREL(%rip)
+.Lfunc_end5:
+	.size	_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hda6ef4ff662f905dE, .Lfunc_end5-_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hda6ef4ff662f905dE
+	.cfi_endproc
+
+	.section	".text._ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E","ax",@progbits
+	.p2align	4, 0x90
+	.type	_ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E,@function
+_ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E:
+	.cfi_startproc
+	testq	%rsi, %rsi
+	je	.LBB6_1
+	addq	%rsi, %rsi
+	movl	$2, %edx
+	jmpq	*__rust_dealloc@GOTPCREL(%rip)
+.LBB6_1:
+	retq
+.Lfunc_end6:
+	.size	_ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E, .Lfunc_end6-_ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E
+	.cfi_endproc
+
+	.section	".text._ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE","ax",@progbits
+	.p2align	4, 0x90
+	.type	_ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE,@function
+_ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE:
+	.cfi_startproc
+	retq
+.Lfunc_end7:
+	.size	_ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE, .Lfunc_end7-_ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE
+	.cfi_endproc
+
+	.section	".text._ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17h01244c5b000d92deE","ax",@progbits
+	.p2align	4, 0x90
+	.type	_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17h01244c5b000d92deE,@function
+_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17h01244c5b000d92deE:
+	.cfi_startproc
+	testq	%rsi, %rsi
+	je	.LBB8_1
+	movl	$1, %edx
+	jmpq	*__rust_dealloc@GOTPCREL(%rip)
+.LBB8_1:
+	retq
+.Lfunc_end8:
+	.size	_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17h01244c5b000d92deE, .Lfunc_end8-_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17h01244c5b000d92deE
+	.cfi_endproc
+
+	.section	.text.unlikely._ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E,"ax",@progbits
+	.p2align	4, 0x90
+	.type	_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E,@function
+_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E:
+	.cfi_startproc
+	subq	$24, %rsp
+	.cfi_def_cfa_offset 32
+	movq	%rdx, %r9
+	movq	%rdi, 8(%rsp)
+	movq	%rsi, 16(%rsp)
+	movq	%rcx, (%rsp)
+	leaq	.L__unnamed_2(%rip), %rdx
+	leaq	8(%rsp), %rsi
+	leaq	16(%rsp), %rcx
+	xorl	%edi, %edi
+	movq	%rdx, %r8
+	callq	*_ZN4core9panicking19assert_failed_inner17h717c029df0cb454bE@GOTPCREL(%rip)
+	ud2
+.Lfunc_end9:
+	.size	_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E, .Lfunc_end9-_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E
+	.cfi_endproc
+
+	.section	.text._ZN5alloc7raw_vec11finish_grow17hc2b15c976a1f0a5aE,"ax",@progbits
+	.p2align	4, 0x90
+	.type	_ZN5alloc7raw_vec11finish_grow17hc2b15c976a1f0a5aE,@function
+_ZN5alloc7raw_vec11finish_grow17hc2b15c976a1f0a5aE:
+	.cfi_startproc
+	pushq	%r15
+	.cfi_def_cfa_offset 16
+	pushq	%r14
+	.cfi_def_cfa_offset 24
+	pushq	%rbx
+	.cfi_def_cfa_offset 32
+	.cfi_offset %rbx, -32
+	.cfi_offset %r14, -24
+	.cfi_offset %r15, -16
+	movq	%rdx, %rbx
+	movq	%rdi, %r14
+	testq	%rsi, %rsi
+	je	.LBB10_6
+	movq	%rsi, %r15
+	cmpq	$0, 8(%rcx)
+	je	.LBB10_7
+	movq	16(%rcx), %rsi
+	testq	%rsi, %rsi
+	je	.LBB10_7
+	movq	(%rcx), %rdi
+	movq	%r15, %rdx
+	movq	%rbx, %rcx
+	callq	*__rust_realloc@GOTPCREL(%rip)
+	testq	%rax, %rax
+	jne	.LBB10_11
+.LBB10_4:
+	movq	%r15, 8(%r14)
+	jmp	.LBB10_5
+.LBB10_7:
+	testq	%rbx, %rbx
+	je	.LBB10_8
+	movq	__rust_no_alloc_shim_is_unstable@GOTPCREL(%rip), %rax
+	movzbl	(%rax), %eax
+	movq	%rbx, %rdi
+	movq	%r15, %rsi
+	callq	*__rust_alloc@GOTPCREL(%rip)
+	testq	%rax, %rax
+	je	.LBB10_4
+.LBB10_11:
+	movq	%rax, 8(%r14)
+	xorl	%eax, %eax
+	jmp	.LBB10_12
+.LBB10_6:
+	movq	$0, 8(%r14)
+.LBB10_5:
+	movl	$1, %eax
+.LBB10_12:
+	movq	%rbx, 16(%r14)
+	movq	%rax, (%r14)
+	popq	%rbx
+	.cfi_def_cfa_offset 24
+	popq	%r14
+	.cfi_def_cfa_offset 16
+	popq	%r15
+	.cfi_def_cfa_offset 8
+	retq
+.LBB10_8:
+	.cfi_def_cfa_offset 32
+	movq	%r15, %rax
+	testq	%rax, %rax
+	jne	.LBB10_11
+	jmp	.LBB10_4
+.Lfunc_end10:
+	.size	_ZN5alloc7raw_vec11finish_grow17hc2b15c976a1f0a5aE, .Lfunc_end10-_ZN5alloc7raw_vec11finish_grow17hc2b15c976a1f0a5aE
+	.cfi_endproc
+
+	.section	".text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h66a5e27c35238407E","ax",@progbits
+	.p2align	4, 0x90
+	.type	_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h66a5e27c35238407E,@function
+_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h66a5e27c35238407E:
+	.cfi_startproc
+	pushq	%r14
+	.cfi_def_cfa_offset 16
+	pushq	%rbx
+	.cfi_def_cfa_offset 24
+	subq	$56, %rsp
+	.cfi_def_cfa_offset 80
+	.cfi_offset %rbx, -24
+	.cfi_offset %r14, -16
+	incq	%rsi
+	je	.LBB11_10
+	movq	%rdi, %rbx
+	movq	8(%rdi), %rax
+	leaq	(%rax,%rax), %rcx
+	cmpq	%rsi, %rcx
+	cmovaq	%rcx, %rsi
+	cmpq	$9, %rsi
+	movl	$8, %r14d
+	cmovaeq	%rsi, %r14
+	movq	%r14, %rsi
+	notq	%rsi
+	shrq	$63, %rsi
+	testq	%rax, %rax
+	je	.LBB11_2
+	movq	(%rbx), %rcx
+	movq	%rcx, 8(%rsp)
+	movq	$1, 16(%rsp)
+	movq	%rax, 24(%rsp)
+	jmp	.LBB11_4
+.LBB11_2:
+	movq	$0, 16(%rsp)
+.LBB11_4:
+	leaq	32(%rsp), %rdi
+	leaq	8(%rsp), %rcx
+	movq	%r14, %rdx
+	callq	_ZN5alloc7raw_vec11finish_grow17hc2b15c976a1f0a5aE
+	cmpq	$0, 32(%rsp)
+	movq	40(%rsp), %rdi
+	je	.LBB11_5
+	movabsq	$-9223372036854775807, %rax
+	cmpq	%rax, %rdi
+	jne	.LBB11_8
+	addq	$56, %rsp
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	retq
+.LBB11_5:
+	.cfi_def_cfa_offset 80
+	movq	%rdi, (%rbx)
+	movq	%r14, 8(%rbx)
+	addq	$56, %rsp
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	retq
+.LBB11_8:
+	.cfi_def_cfa_offset 80
+	testq	%rdi, %rdi
+	jne	.LBB11_9
+.LBB11_10:
+	callq	*_ZN5alloc7raw_vec17capacity_overflow17h7596d82a86d51ab8E@GOTPCREL(%rip)
+	ud2
+.LBB11_9:
+	movq	48(%rsp), %rsi
+	callq	*_ZN5alloc5alloc18handle_alloc_error17h6c194ef306599f55E@GOTPCREL(%rip)
+	ud2
+.Lfunc_end11:
+	.size	_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h66a5e27c35238407E, .Lfunc_end11-_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h66a5e27c35238407E
+	.cfi_endproc
+
+	.section	".text.unlikely._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h9df8d8a6ecfddd52E","ax",@progbits
+	.p2align	4, 0x90
+	.type	_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h9df8d8a6ecfddd52E,@function
+_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h9df8d8a6ecfddd52E:
+	.cfi_startproc
+	pushq	%r14
+	.cfi_def_cfa_offset 16
+	pushq	%rbx
+	.cfi_def_cfa_offset 24
+	subq	$56, %rsp
+	.cfi_def_cfa_offset 80
+	.cfi_offset %rbx, -24
+	.cfi_offset %r14, -16
+	addq	%rdx, %rsi
+	jb	.LBB12_10
+	movq	%rdi, %rbx
+	movq	8(%rdi), %rax
+	leaq	(%rax,%rax), %rcx
+	cmpq	%rsi, %rcx
+	cmovaq	%rcx, %rsi
+	cmpq	$9, %rsi
+	movl	$8, %r14d
+	cmovaeq	%rsi, %r14
+	movq	%r14, %rsi
+	notq	%rsi
+	shrq	$63, %rsi
+	testq	%rax, %rax
+	je	.LBB12_2
+	movq	(%rbx), %rcx
+	movq	%rcx, 8(%rsp)
+	movq	$1, 16(%rsp)
+	movq	%rax, 24(%rsp)
+	jmp	.LBB12_4
+.LBB12_2:
+	movq	$0, 16(%rsp)
+.LBB12_4:
+	leaq	32(%rsp), %rdi
+	leaq	8(%rsp), %rcx
+	movq	%r14, %rdx
+	callq	_ZN5alloc7raw_vec11finish_grow17hc2b15c976a1f0a5aE
+	cmpq	$0, 32(%rsp)
+	movq	40(%rsp), %rdi
+	je	.LBB12_5
+	movabsq	$-9223372036854775807, %rax
+	cmpq	%rax, %rdi
+	jne	.LBB12_8
+	addq	$56, %rsp
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	retq
+.LBB12_5:
+	.cfi_def_cfa_offset 80
+	movq	%rdi, (%rbx)
+	movq	%r14, 8(%rbx)
+	addq	$56, %rsp
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	retq
+.LBB12_8:
+	.cfi_def_cfa_offset 80
+	testq	%rdi, %rdi
+	jne	.LBB12_9
+.LBB12_10:
+	callq	*_ZN5alloc7raw_vec17capacity_overflow17h7596d82a86d51ab8E@GOTPCREL(%rip)
+	ud2
+.LBB12_9:
+	movq	48(%rsp), %rsi
+	callq	*_ZN5alloc5alloc18handle_alloc_error17h6c194ef306599f55E@GOTPCREL(%rip)
+	ud2
+.Lfunc_end12:
+	.size	_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h9df8d8a6ecfddd52E, .Lfunc_end12-_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h9df8d8a6ecfddd52E
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly4util4log217h811450e0482d939fE,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly4util4log217h811450e0482d939fE
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly4util4log217h811450e0482d939fE,@function
+_ZN22reed_solomon_novelpoly4util4log217h811450e0482d939fE:
+	.cfi_startproc
+	bsrq	%rdi, %rax
+	cmoveq	%rdi, %rax
+	retq
+.Lfunc_end13:
+	.size	_ZN22reed_solomon_novelpoly4util4log217h811450e0482d939fE, .Lfunc_end13-_ZN22reed_solomon_novelpoly4util4log217h811450e0482d939fE
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly4util13is_power_of_217h2c7ff0eaf50d5901E,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly4util13is_power_of_217h2c7ff0eaf50d5901E
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly4util13is_power_of_217h2c7ff0eaf50d5901E,@function
+_ZN22reed_solomon_novelpoly4util13is_power_of_217h2c7ff0eaf50d5901E:
+	.cfi_startproc
+	testq	%rdi, %rdi
+	je	.LBB14_1
+	leaq	-1(%rdi), %rax
+	testq	%rax, %rdi
+	sete	%al
+	retq
+.LBB14_1:
+	xorl	%eax, %eax
+	retq
+.Lfunc_end14:
+	.size	_ZN22reed_solomon_novelpoly4util13is_power_of_217h2c7ff0eaf50d5901E, .Lfunc_end14-_ZN22reed_solomon_novelpoly4util13is_power_of_217h2c7ff0eaf50d5901E
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly4util22next_higher_power_of_217h5f58c2f585fcfd0eE,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly4util22next_higher_power_of_217h5f58c2f585fcfd0eE
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly4util22next_higher_power_of_217h5f58c2f585fcfd0eE,@function
+_ZN22reed_solomon_novelpoly4util22next_higher_power_of_217h5f58c2f585fcfd0eE:
+	.cfi_startproc
+	movq	%rdi, %rax
+	leaq	-1(%rdi), %rcx
+	testq	%rcx, %rdi
+	sete	%cl
+	testq	%rdi, %rdi
+	setne	%dl
+	testb	%cl, %dl
+	jne	.LBB15_2
+	bsrq	%rax, %rcx
+	notl	%ecx
+	negb	%cl
+	movl	$1, %edx
+	shlq	%cl, %rdx
+	testq	%rax, %rax
+	movl	$2, %eax
+	cmovneq	%rdx, %rax
+.LBB15_2:
+	retq
+.Lfunc_end15:
+	.size	_ZN22reed_solomon_novelpoly4util22next_higher_power_of_217h5f58c2f585fcfd0eE, .Lfunc_end15-_ZN22reed_solomon_novelpoly4util22next_higher_power_of_217h5f58c2f585fcfd0eE
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly4util21next_lower_power_of_217h168b243b626fb326E,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly4util21next_lower_power_of_217h168b243b626fb326E
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly4util21next_lower_power_of_217h168b243b626fb326E,@function
+_ZN22reed_solomon_novelpoly4util21next_lower_power_of_217h168b243b626fb326E:
+	.cfi_startproc
+	leaq	-1(%rdi), %rax
+	bsrq	%rdi, %rcx
+	movl	$1, %edx
+	shlq	%cl, %rdx
+	movl	$1, %ecx
+	testq	%rdi, %rdi
+	cmoveq	%rcx, %rdx
+	testq	%rax, %rdi
+	movq	%rdx, %rax
+	cmoveq	%rdi, %rax
+	testq	%rdi, %rdi
+	cmoveq	%rdx, %rax
+	retq
+.Lfunc_end16:
+	.size	_ZN22reed_solomon_novelpoly4util21next_lower_power_of_217h168b243b626fb326E, .Lfunc_end16-_ZN22reed_solomon_novelpoly4util21next_lower_power_of_217h168b243b626fb326E
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly4util25recoverablity_subset_size17h59fc543c57be755cE,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly4util25recoverablity_subset_size17h59fc543c57be755cE
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly4util25recoverablity_subset_size17h59fc543c57be755cE,@function
+_ZN22reed_solomon_novelpoly4util25recoverablity_subset_size17h59fc543c57be755cE:
+	.cfi_startproc
+	xorl	%eax, %eax
+	subq	$1, %rdi
+	cmovaeq	%rdi, %rax
+	movabsq	$-6148914691236517205, %rcx
+	mulq	%rcx
+	shrq	%rdx
+	leaq	1(%rdx), %rax
+	retq
+.Lfunc_end17:
+	.size	_ZN22reed_solomon_novelpoly4util25recoverablity_subset_size17h59fc543c57be755cE, .Lfunc_end17-_ZN22reed_solomon_novelpoly4util25recoverablity_subset_size17h59fc543c57be755cE
+	.cfi_endproc
+
+	.section	".text._ZN83_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..fmt..Debug$GT$3fmt17h80587c494ba364a6E","ax",@progbits
+	.globl	_ZN83_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..fmt..Debug$GT$3fmt17h80587c494ba364a6E
+	.p2align	4, 0x90
+	.type	_ZN83_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..fmt..Debug$GT$3fmt17h80587c494ba364a6E,@function
+_ZN83_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..fmt..Debug$GT$3fmt17h80587c494ba364a6E:
+	.cfi_startproc
+	subq	$120, %rsp
+	.cfi_def_cfa_offset 128
+	movq	%rsi, %rax
+	movq	%rdi, (%rsp)
+	movq	_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17h3e388c420aea3b33E@GOTPCREL(%rip), %rcx
+	movq	%rcx, 8(%rsp)
+	movq	$2, 64(%rsp)
+	movq	$0, 80(%rsp)
+	movq	$4, 88(%rsp)
+	movq	$0, 96(%rsp)
+	movabsq	$34359738400, %rcx
+	movq	%rcx, 104(%rsp)
+	movb	$3, 112(%rsp)
+	leaq	.L__unnamed_3(%rip), %rcx
+	movq	%rcx, 16(%rsp)
+	movq	$1, 24(%rsp)
+	leaq	64(%rsp), %rcx
+	movq	%rcx, 48(%rsp)
+	movq	$1, 56(%rsp)
+	movq	%rsp, %rcx
+	movq	%rcx, 32(%rsp)
+	movq	$1, 40(%rsp)
+	leaq	16(%rsp), %rsi
+	movq	%rax, %rdi
+	callq	*_ZN4core3fmt9Formatter9write_fmt17hf01228dccc6fed43E@GOTPCREL(%rip)
+	addq	$120, %rsp
+	.cfi_def_cfa_offset 8
+	retq
+.Lfunc_end18:
+	.size	_ZN83_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..fmt..Debug$GT$3fmt17h80587c494ba364a6E, .Lfunc_end18-_ZN83_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..fmt..Debug$GT$3fmt17h80587c494ba364a6E
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams17derive_parameters17h6fee1a97c6778ac4E,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams17derive_parameters17h6fee1a97c6778ac4E
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams17derive_parameters17h6fee1a97c6778ac4E,@function
+_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams17derive_parameters17h6fee1a97c6778ac4E:
+	.cfi_startproc
+	cmpq	$2, %rsi
+	jae	.LBB19_1
+	movq	$1, (%rdi)
+	movq	%rsi, 8(%rdi)
+	movq	%rdi, %rax
+	retq
+.LBB19_1:
+	testq	%rdx, %rdx
+	je	.LBB19_9
+	leaq	-1(%rdx), %rax
+	bsrq	%rdx, %rcx
+	movl	$1, %r8d
+	shlq	%cl, %r8
+	testq	%rax, %rdx
+	movq	%r8, %rax
+	cmoveq	%rdx, %rax
+	movl	$1, %r9d
+	testq	%rdx, %rdx
+	cmoveq	%r8, %rax
+	leaq	-1(%rsi), %r8
+	bsrq	%rsi, %rcx
+	notl	%ecx
+	negb	%cl
+	shlq	%cl, %r9
+	testq	%r8, %rsi
+	movq	%r9, %rcx
+	cmoveq	%rsi, %rcx
+	testq	%rsi, %rsi
+	cmoveq	%r9, %rcx
+	movq	%rax, %r8
+	imulq	%rsi, %r8
+	imulq	%rcx, %rdx
+	cmpq	%rdx, %r8
+	ja	.LBB19_10
+	cmpq	$65536, %rcx
+	jbe	.LBB19_4
+	movq	$0, (%rdi)
+	movq	%rsi, 8(%rdi)
+	movq	%rdi, %rax
+	retq
+.LBB19_9:
+	movq	$2, (%rdi)
+	movq	$0, 8(%rdi)
+	movq	%rdi, %rax
+	retq
+.LBB19_4:
+	movq	%rcx, 8(%rdi)
+	movq	%rax, 16(%rdi)
+	movq	%rsi, 24(%rdi)
+	movq	$7, (%rdi)
+	movq	%rdi, %rax
+	retq
+.LBB19_10:
+	pushq	%rax
+	.cfi_def_cfa_offset 16
+	leaq	.L__unnamed_4(%rip), %rdi
+	leaq	.L__unnamed_5(%rip), %rdx
+	movl	$40, %esi
+	callq	*_ZN4core9panicking5panic17hcad0f3a89a1b36aaE@GOTPCREL(%rip)
+	ud2
+.Lfunc_end19:
+	.size	_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams17derive_parameters17h6fee1a97c6778ac4E, .Lfunc_end19-_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams17derive_parameters17h6fee1a97c6778ac4E
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams10is_faster817h9d7bda00b0acd947E,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams10is_faster817h9d7bda00b0acd947E
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams10is_faster817h9d7bda00b0acd947E,@function
+_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams10is_faster817h9d7bda00b0acd947E:
+	.cfi_startproc
+	xorl	%eax, %eax
+	retq
+.Lfunc_end20:
+	.size	_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams10is_faster817h9d7bda00b0acd947E, .Lfunc_end20-_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams10is_faster817h9d7bda00b0acd947E
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams12make_encoder17h8b44647d13fda8efE,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams12make_encoder17h8b44647d13fda8efE
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams12make_encoder17h8b44647d13fda8efE,@function
+_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams12make_encoder17h8b44647d13fda8efE:
+	.cfi_startproc
+	movq	16(%rsi), %rax
+	movdqu	(%rsi), %xmm0
+	pxor	%xmm1, %xmm1
+	movdqa	%xmm0, %xmm2
+	pcmpeqd	%xmm1, %xmm2
+	pshufd	$177, %xmm2, %xmm3
+	pand	%xmm2, %xmm3
+	pcmpeqd	%xmm2, %xmm2
+	paddq	%xmm0, %xmm2
+	pand	%xmm0, %xmm2
+	pcmpeqd	%xmm1, %xmm2
+	pshufd	$177, %xmm2, %xmm1
+	pand	%xmm2, %xmm1
+	pandn	%xmm1, %xmm3
+	movmskpd	%xmm3, %ecx
+	testl	%ecx, %ecx
+	je	.LBB21_1
+	movdqu	%xmm0, (%rdi)
+	movq	%rax, 16(%rdi)
+	movq	%rdi, %rax
+	retq
+.LBB21_1:
+	subq	$40, %rsp
+	.cfi_def_cfa_offset 48
+	movq	$5, 8(%rsp)
+	movdqu	%xmm0, 16(%rsp)
+	movq	%rax, 32(%rsp)
+	leaq	.L__unnamed_6(%rip), %rdi
+	leaq	.L__unnamed_7(%rip), %rcx
+	leaq	.L__unnamed_8(%rip), %r8
+	leaq	8(%rsp), %rdx
+	movl	$57, %esi
+	callq	*_ZN4core6result13unwrap_failed17h8c4b86241881fbbbE@GOTPCREL(%rip)
+	ud2
+.Lfunc_end21:
+	.size	_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams12make_encoder17h8b44647d13fda8efE, .Lfunc_end21-_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams12make_encoder17h8b44647d13fda8efE
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams1n17hfc67bf225e95359aE,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams1n17hfc67bf225e95359aE
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams1n17hfc67bf225e95359aE,@function
+_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams1n17hfc67bf225e95359aE:
+	.cfi_startproc
+	movq	(%rdi), %rax
+	retq
+.Lfunc_end22:
+	.size	_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams1n17hfc67bf225e95359aE, .Lfunc_end22-_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams1n17hfc67bf225e95359aE
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams1k17haca36551044c1d21E,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams1k17haca36551044c1d21E
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams1k17haca36551044c1d21E,@function
+_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams1k17haca36551044c1d21E:
+	.cfi_startproc
+	movq	8(%rdi), %rax
+	retq
+.Lfunc_end23:
+	.size	_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams1k17haca36551044c1d21E, .Lfunc_end23-_ZN22reed_solomon_novelpoly16novel_poly_basis10CodeParams1k17haca36551044c1d21E
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly16novel_poly_basis11ReedSolomon9shard_len17h8a64e1ab6a1fd25fE,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly16novel_poly_basis11ReedSolomon9shard_len17h8a64e1ab6a1fd25fE
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly16novel_poly_basis11ReedSolomon9shard_len17h8a64e1ab6a1fd25fE,@function
+_ZN22reed_solomon_novelpoly16novel_poly_basis11ReedSolomon9shard_len17h8a64e1ab6a1fd25fE:
+	.cfi_startproc
+	movq	8(%rdi), %rcx
+	testq	%rcx, %rcx
+	je	.LBB24_5
+	incq	%rsi
+	shrq	%rsi
+	leaq	(%rsi,%rcx), %rax
+	decq	%rax
+	movq	%rax, %rdx
+	orq	%rcx, %rdx
+	shrq	$32, %rdx
+	je	.LBB24_2
+	xorl	%edx, %edx
+	divq	%rcx
+	addq	%rax, %rax
+	retq
+.LBB24_2:
+	xorl	%edx, %edx
+	divl	%ecx
+	addq	%rax, %rax
+	retq
+.LBB24_5:
+	pushq	%rax
+	.cfi_def_cfa_offset 16
+	leaq	str.0(%rip), %rdi
+	leaq	.L__unnamed_9(%rip), %rdx
+	movl	$25, %esi
+	callq	*_ZN4core9panicking5panic17hcad0f3a89a1b36aaE@GOTPCREL(%rip)
+	ud2
+.Lfunc_end24:
+	.size	_ZN22reed_solomon_novelpoly16novel_poly_basis11ReedSolomon9shard_len17h8a64e1ab6a1fd25fE, .Lfunc_end24-_ZN22reed_solomon_novelpoly16novel_poly_basis11ReedSolomon9shard_len17h8a64e1ab6a1fd25fE
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard3new17h113340e5cbc1f570E,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard3new17h113340e5cbc1f570E
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard3new17h113340e5cbc1f570E,@function
+_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard3new17h113340e5cbc1f570E:
+.Lfunc_begin0:
+	.cfi_startproc
+	.cfi_personality 155, DW.ref.rust_eh_personality
+	.cfi_lsda 27, .Lexception0
+	pushq	%r14
+	.cfi_def_cfa_offset 16
+	pushq	%rbx
+	.cfi_def_cfa_offset 24
+	pushq	%rax
+	.cfi_def_cfa_offset 32
+	.cfi_offset %rbx, -24
+	.cfi_offset %r14, -16
+	movq	%rsi, %rbx
+	movq	%rdi, %r14
+	movq	16(%rsi), %rsi
+	testb	$1, %sil
+	je	.LBB25_5
+	cmpq	8(%rbx), %rsi
+	jne	.LBB25_4
+.Ltmp0:
+	movq	%rbx, %rdi
+	callq	_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h66a5e27c35238407E
+.Ltmp1:
+	movq	16(%rbx), %rsi
+.LBB25_4:
+	movq	(%rbx), %rax
+	movb	$0, (%rax,%rsi)
+	incq	%rsi
+	movq	%rsi, 16(%rbx)
+.LBB25_5:
+	movq	16(%rbx), %rax
+	movq	%rax, 16(%r14)
+	movups	(%rbx), %xmm0
+	movups	%xmm0, (%r14)
+	movq	%r14, %rax
+	addq	$8, %rsp
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	retq
+.LBB25_6:
+	.cfi_def_cfa_offset 32
+.Ltmp2:
+	movq	%rax, %r14
+	movq	(%rbx), %rdi
+	movq	8(%rbx), %rsi
+	callq	_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17h01244c5b000d92deE
+	movq	%r14, %rdi
+	callq	_Unwind_Resume@PLT
+	ud2
+.Lfunc_end25:
+	.size	_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard3new17h113340e5cbc1f570E, .Lfunc_end25-_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard3new17h113340e5cbc1f570E
+	.cfi_endproc
+	.section	.gcc_except_table._ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard3new17h113340e5cbc1f570E,"a",@progbits
+	.p2align	2, 0x0
+GCC_except_table25:
+.Lexception0:
+	.byte	255
+	.byte	255
+	.byte	1
+	.uleb128 .Lcst_end0-.Lcst_begin0
+.Lcst_begin0:
+	.uleb128 .Ltmp0-.Lfunc_begin0
+	.uleb128 .Ltmp1-.Ltmp0
+	.uleb128 .Ltmp2-.Lfunc_begin0
+	.byte	0
+	.uleb128 .Ltmp1-.Lfunc_begin0
+	.uleb128 .Lfunc_end25-.Ltmp1
+	.byte	0
+	.byte	0
+.Lcst_end0:
+	.p2align	2, 0x0
+
+	.section	.text._ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard10into_inner17h01423f49ab401ceaE,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard10into_inner17h01423f49ab401ceaE
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard10into_inner17h01423f49ab401ceaE,@function
+_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard10into_inner17h01423f49ab401ceaE:
+	.cfi_startproc
+	movq	%rdi, %rax
+	movq	16(%rsi), %rcx
+	movq	%rcx, 16(%rdi)
+	movups	(%rsi), %xmm0
+	movups	%xmm0, (%rdi)
+	retq
+.Lfunc_end26:
+	.size	_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard10into_inner17h01423f49ab401ceaE, .Lfunc_end26-_ZN22reed_solomon_novelpoly13wrapped_shard12WrappedShard10into_inner17h01423f49ab401ceaE
+	.cfi_endproc
+
+	.section	".text._ZN124_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..From$LT$alloc..vec..Vec$LT$u8$GT$$GT$$GT$4from17h20db296a8e5281a3E","ax",@progbits
+	.globl	_ZN124_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..From$LT$alloc..vec..Vec$LT$u8$GT$$GT$$GT$4from17h20db296a8e5281a3E
+	.p2align	4, 0x90
+	.type	_ZN124_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..From$LT$alloc..vec..Vec$LT$u8$GT$$GT$$GT$4from17h20db296a8e5281a3E,@function
+_ZN124_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..From$LT$alloc..vec..Vec$LT$u8$GT$$GT$$GT$4from17h20db296a8e5281a3E:
+.Lfunc_begin1:
+	.cfi_startproc
+	.cfi_personality 155, DW.ref.rust_eh_personality
+	.cfi_lsda 27, .Lexception1
+	pushq	%r14
+	.cfi_def_cfa_offset 16
+	pushq	%rbx
+	.cfi_def_cfa_offset 24
+	pushq	%rax
+	.cfi_def_cfa_offset 32
+	.cfi_offset %rbx, -24
+	.cfi_offset %r14, -16
+	movq	%rsi, %rbx
+	movq	%rdi, %r14
+	movq	16(%rsi), %rsi
+	testb	$1, %sil
+	je	.LBB27_5
+	cmpq	8(%rbx), %rsi
+	jne	.LBB27_4
+.Ltmp3:
+	movq	%rbx, %rdi
+	callq	_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16reserve_for_push17h66a5e27c35238407E
+.Ltmp4:
+	movq	16(%rbx), %rsi
+.LBB27_4:
+	movq	(%rbx), %rax
+	movb	$0, (%rax,%rsi)
+	incq	%rsi
+	movq	%rsi, 16(%rbx)
+.LBB27_5:
+	movq	16(%rbx), %rax
+	movq	%rax, 16(%r14)
+	movups	(%rbx), %xmm0
+	movups	%xmm0, (%r14)
+	movq	%r14, %rax
+	addq	$8, %rsp
+	.cfi_def_cfa_offset 24
+	popq	%rbx
+	.cfi_def_cfa_offset 16
+	popq	%r14
+	.cfi_def_cfa_offset 8
+	retq
+.LBB27_6:
+	.cfi_def_cfa_offset 32
+.Ltmp5:
+	movq	%rax, %r14
+	movq	(%rbx), %rdi
+	movq	8(%rbx), %rsi
+	callq	_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17h01244c5b000d92deE
+	movq	%r14, %rdi
+	callq	_Unwind_Resume@PLT
+	ud2
+.Lfunc_end27:
+	.size	_ZN124_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..From$LT$alloc..vec..Vec$LT$u8$GT$$GT$$GT$4from17h20db296a8e5281a3E, .Lfunc_end27-_ZN124_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..From$LT$alloc..vec..Vec$LT$u8$GT$$GT$$GT$4from17h20db296a8e5281a3E
+	.cfi_endproc
+	.section	".gcc_except_table._ZN124_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..From$LT$alloc..vec..Vec$LT$u8$GT$$GT$$GT$4from17h20db296a8e5281a3E","a",@progbits
+	.p2align	2, 0x0
+GCC_except_table27:
+.Lexception1:
+	.byte	255
+	.byte	255
+	.byte	1
+	.uleb128 .Lcst_end1-.Lcst_begin1
+.Lcst_begin1:
+	.uleb128 .Ltmp3-.Lfunc_begin1
+	.uleb128 .Ltmp4-.Ltmp3
+	.uleb128 .Ltmp5-.Lfunc_begin1
+	.byte	0
+	.uleb128 .Ltmp4-.Lfunc_begin1
+	.uleb128 .Lfunc_end27-.Ltmp4
+	.byte	0
+	.byte	0
+.Lcst_end1:
+	.p2align	2, 0x0
+
+	.section	".text._ZN112_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsMut$LT$$u5b$u8$u5d$$GT$$GT$6as_mut17h9040ed54cdf1da03E","ax",@progbits
+	.globl	_ZN112_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsMut$LT$$u5b$u8$u5d$$GT$$GT$6as_mut17h9040ed54cdf1da03E
+	.p2align	4, 0x90
+	.type	_ZN112_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsMut$LT$$u5b$u8$u5d$$GT$$GT$6as_mut17h9040ed54cdf1da03E,@function
+_ZN112_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsMut$LT$$u5b$u8$u5d$$GT$$GT$6as_mut17h9040ed54cdf1da03E:
+	.cfi_startproc
+	movq	(%rdi), %rax
+	movq	16(%rdi), %rdx
+	retq
+.Lfunc_end28:
+	.size	_ZN112_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsMut$LT$$u5b$u8$u5d$$GT$$GT$6as_mut17h9040ed54cdf1da03E, .Lfunc_end28-_ZN112_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsMut$LT$$u5b$u8$u5d$$GT$$GT$6as_mut17h9040ed54cdf1da03E
+	.cfi_endproc
+
+	.section	".text._ZN133_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsRef$LT$$u5b$$u5b$u8$u3b$$u20$2$u5d$$u5d$$GT$$GT$6as_ref17h0744ecab546af373E","ax",@progbits
+	.globl	_ZN133_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsRef$LT$$u5b$$u5b$u8$u3b$$u20$2$u5d$$u5d$$GT$$GT$6as_ref17h0744ecab546af373E
+	.p2align	4, 0x90
+	.type	_ZN133_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsRef$LT$$u5b$$u5b$u8$u3b$$u20$2$u5d$$u5d$$GT$$GT$6as_ref17h0744ecab546af373E,@function
+_ZN133_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsRef$LT$$u5b$$u5b$u8$u3b$$u20$2$u5d$$u5d$$GT$$GT$6as_ref17h0744ecab546af373E:
+	.cfi_startproc
+	subq	$56, %rsp
+	.cfi_def_cfa_offset 64
+	movq	16(%rdi), %rax
+	movl	%eax, %ecx
+	andl	$1, %ecx
+	movq	%rcx, (%rsp)
+	testb	$1, %al
+	jne	.LBB29_5
+	movq	%rax, %rdx
+	shrq	%rdx
+	testq	%rax, %rax
+	je	.LBB29_2
+	movq	(%rdi), %rax
+	addq	$56, %rsp
+	.cfi_def_cfa_offset 8
+	retq
+.LBB29_2:
+	.cfi_def_cfa_offset 64
+	leaq	.L__unnamed_10(%rip), %rax
+	addq	$56, %rsp
+	.cfi_def_cfa_offset 8
+	retq
+.LBB29_5:
+	.cfi_def_cfa_offset 64
+	movq	$0, 8(%rsp)
+	leaq	.L__unnamed_11(%rip), %rsi
+	leaq	.L__unnamed_12(%rip), %rcx
+	movq	%rsp, %rdi
+	leaq	8(%rsp), %rdx
+	callq	_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E
+	ud2
+.Lfunc_end29:
+	.size	_ZN133_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsRef$LT$$u5b$$u5b$u8$u3b$$u20$2$u5d$$u5d$$GT$$GT$6as_ref17h0744ecab546af373E, .Lfunc_end29-_ZN133_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsRef$LT$$u5b$$u5b$u8$u3b$$u20$2$u5d$$u5d$$GT$$GT$6as_ref17h0744ecab546af373E
+	.cfi_endproc
+
+	.section	".text._ZN133_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsMut$LT$$u5b$$u5b$u8$u3b$$u20$2$u5d$$u5d$$GT$$GT$6as_mut17h0050005bc831c669E","ax",@progbits
+	.globl	_ZN133_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsMut$LT$$u5b$$u5b$u8$u3b$$u20$2$u5d$$u5d$$GT$$GT$6as_mut17h0050005bc831c669E
+	.p2align	4, 0x90
+	.type	_ZN133_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsMut$LT$$u5b$$u5b$u8$u3b$$u20$2$u5d$$u5d$$GT$$GT$6as_mut17h0050005bc831c669E,@function
+_ZN133_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsMut$LT$$u5b$$u5b$u8$u3b$$u20$2$u5d$$u5d$$GT$$GT$6as_mut17h0050005bc831c669E:
+	.cfi_startproc
+	subq	$56, %rsp
+	.cfi_def_cfa_offset 64
+	movq	16(%rdi), %rax
+	movl	%eax, %ecx
+	andl	$1, %ecx
+	movq	%rcx, (%rsp)
+	testb	$1, %al
+	jne	.LBB30_5
+	movq	%rax, %rdx
+	shrq	%rdx
+	testq	%rax, %rax
+	je	.LBB30_2
+	movq	(%rdi), %rax
+	addq	$56, %rsp
+	.cfi_def_cfa_offset 8
+	retq
+.LBB30_2:
+	.cfi_def_cfa_offset 64
+	leaq	.L__unnamed_10(%rip), %rax
+	addq	$56, %rsp
+	.cfi_def_cfa_offset 8
+	retq
+.LBB30_5:
+	.cfi_def_cfa_offset 64
+	movq	$0, 8(%rsp)
+	leaq	.L__unnamed_11(%rip), %rsi
+	leaq	.L__unnamed_13(%rip), %rcx
+	movq	%rsp, %rdi
+	leaq	8(%rsp), %rdx
+	callq	_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E
+	ud2
+.Lfunc_end30:
+	.size	_ZN133_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsMut$LT$$u5b$$u5b$u8$u3b$$u20$2$u5d$$u5d$$GT$$GT$6as_mut17h0050005bc831c669E, .Lfunc_end30-_ZN133_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsMut$LT$$u5b$$u5b$u8$u3b$$u20$2$u5d$$u5d$$GT$$GT$6as_mut17h0050005bc831c669E
+	.cfi_endproc
+
+	.section	".text._ZN74_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h84ba04202c855280E","ax",@progbits
+	.globl	_ZN74_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h84ba04202c855280E
+	.p2align	4, 0x90
+	.type	_ZN74_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h84ba04202c855280E,@function
+_ZN74_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h84ba04202c855280E:
+	.cfi_startproc
+	pushq	%r15
+	.cfi_def_cfa_offset 16
+	pushq	%r14
+	.cfi_def_cfa_offset 24
+	pushq	%r12
+	.cfi_def_cfa_offset 32
+	pushq	%rbx
+	.cfi_def_cfa_offset 40
+	pushq	%rax
+	.cfi_def_cfa_offset 48
+	.cfi_offset %rbx, -40
+	.cfi_offset %r12, -32
+	.cfi_offset %r14, -24
+	.cfi_offset %r15, -16
+	movq	%rsi, %r10
+	movq	%rdi, %rax
+	movq	(%rdi), %rcx
+	leaq	.LJTI31_0(%rip), %rdx
+	movslq	(%rdx,%rcx,4), %rcx
+	addq	%rdx, %rcx
+	jmpq	*%rcx
+.LBB31_1:
+	addq	$8, %rax
+	movq	%rax, (%rsp)
+	leaq	.L__unnamed_14(%rip), %rsi
+	leaq	.L__unnamed_2(%rip), %r8
+	movq	%rsp, %rcx
+	movl	$23, %edx
+	jmp	.LBB31_2
+.LBB31_3:
+	addq	$8, %rax
+	movq	%rax, (%rsp)
+	leaq	.L__unnamed_15(%rip), %rsi
+	leaq	.L__unnamed_2(%rip), %r8
+	movq	%rsp, %rcx
+	movl	$22, %edx
+	jmp	.LBB31_2
+.LBB31_4:
+	addq	$8, %rax
+	movq	%rax, (%rsp)
+	leaq	.L__unnamed_16(%rip), %rsi
+	leaq	.L__unnamed_2(%rip), %r8
+	movq	%rsp, %rcx
+	movl	$29, %edx
+.LBB31_2:
+	movq	%r10, %rdi
+	callq	*_ZN4core3fmt9Formatter25debug_tuple_field1_finish17h989fcf61d9a53692E@GOTPCREL(%rip)
+	jmp	.LBB31_10
+.LBB31_5:
+	leaq	.L__unnamed_17(%rip), %rsi
+	movl	$17, %edx
+	movq	%r10, %rdi
+	addq	$8, %rsp
+	.cfi_def_cfa_offset 40
+	popq	%rbx
+	.cfi_def_cfa_offset 32
+	popq	%r12
+	.cfi_def_cfa_offset 24
+	popq	%r14
+	.cfi_def_cfa_offset 16
+	popq	%r15
+	.cfi_def_cfa_offset 8
+	jmpq	*_ZN4core3fmt9Formatter9write_str17hbd49080fe771c6c2E@GOTPCREL(%rip)
+.LBB31_6:
+	.cfi_def_cfa_offset 48
+	leaq	24(%rax), %rcx
+	movq	%rcx, (%rsp)
+	leaq	8(%rax), %r9
+	addq	$16, %rax
+	subq	$8, %rsp
+	.cfi_adjust_cfa_offset 8
+	leaq	.L__unnamed_2(%rip), %r11
+	leaq	8(%rsp), %rbx
+	leaq	.L__unnamed_18(%rip), %r14
+	leaq	.L__unnamed_19(%rip), %r15
+	leaq	.L__unnamed_20(%rip), %r12
+	leaq	.L__unnamed_21(%rip), %rsi
+	leaq	.L__unnamed_22(%rip), %rcx
+	movl	$14, %edx
+	movl	$4, %r8d
+	movq	%r10, %rdi
+	pushq	%r11
+	.cfi_adjust_cfa_offset 8
+	pushq	%rbx
+	.cfi_adjust_cfa_offset 8
+	pushq	$3
+	.cfi_adjust_cfa_offset 8
+	pushq	%r14
+	.cfi_adjust_cfa_offset 8
+	pushq	%r15
+	.cfi_adjust_cfa_offset 8
+	pushq	%rax
+	.cfi_adjust_cfa_offset 8
+	pushq	$3
+	.cfi_adjust_cfa_offset 8
+	pushq	%r12
+	.cfi_adjust_cfa_offset 8
+	pushq	%r15
+	.cfi_adjust_cfa_offset 8
+	callq	*_ZN4core3fmt9Formatter26debug_struct_field3_finish17hb6f6e1d1fccb9bb5E@GOTPCREL(%rip)
+	addq	$80, %rsp
+	.cfi_adjust_cfa_offset -80
+	jmp	.LBB31_10
+.LBB31_7:
+	leaq	16(%rax), %rcx
+	movq	%rcx, (%rsp)
+	addq	$8, %rax
+	subq	$8, %rsp
+	.cfi_adjust_cfa_offset 8
+	leaq	.L__unnamed_2(%rip), %r11
+	leaq	8(%rsp), %rbx
+	leaq	.L__unnamed_23(%rip), %r14
+	leaq	.L__unnamed_19(%rip), %r15
+	leaq	.L__unnamed_24(%rip), %rsi
+	leaq	.L__unnamed_25(%rip), %rcx
+	movl	$22, %edx
+	movl	$1, %r8d
+	movq	%r10, %rdi
+	movq	%rax, %r9
+	pushq	%r11
+	.cfi_adjust_cfa_offset 8
+	pushq	%rbx
+	.cfi_adjust_cfa_offset 8
+	pushq	$1
+	.cfi_adjust_cfa_offset 8
+	jmp	.LBB31_9
+.LBB31_8:
+	.cfi_def_cfa_offset 48
+	leaq	16(%rax), %rcx
+	movq	%rcx, (%rsp)
+	addq	$8, %rax
+	subq	$8, %rsp
+	.cfi_adjust_cfa_offset 8
+	leaq	.L__unnamed_2(%rip), %r11
+	leaq	8(%rsp), %rbx
+	leaq	.L__unnamed_26(%rip), %r14
+	leaq	.L__unnamed_19(%rip), %r15
+	leaq	.L__unnamed_27(%rip), %rsi
+	leaq	.L__unnamed_28(%rip), %rcx
+	movl	$24, %edx
+	movl	$5, %r8d
+	movq	%r10, %rdi
+	movq	%rax, %r9
+	pushq	%r11
+	.cfi_adjust_cfa_offset 8
+	pushq	%rbx
+	.cfi_adjust_cfa_offset 8
+	pushq	$5
+	.cfi_adjust_cfa_offset 8
+.LBB31_9:
+	pushq	%r14
+	.cfi_adjust_cfa_offset 8
+	pushq	%r15
+	.cfi_adjust_cfa_offset 8
+	callq	*_ZN4core3fmt9Formatter26debug_struct_field2_finish17h79e5a622e536f867E@GOTPCREL(%rip)
+	addq	$48, %rsp
+	.cfi_adjust_cfa_offset -48
+.LBB31_10:
+	addq	$8, %rsp
+	.cfi_def_cfa_offset 40
+	popq	%rbx
+	.cfi_def_cfa_offset 32
+	popq	%r12
+	.cfi_def_cfa_offset 24
+	popq	%r14
+	.cfi_def_cfa_offset 16
+	popq	%r15
+	.cfi_def_cfa_offset 8
+	retq
+.Lfunc_end31:
+	.size	_ZN74_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h84ba04202c855280E, .Lfunc_end31-_ZN74_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h84ba04202c855280E
+	.cfi_endproc
+	.section	".rodata._ZN74_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h84ba04202c855280E","a",@progbits
+	.p2align	2, 0x0
+.LJTI31_0:
+	.long	.LBB31_1-.LJTI31_0
+	.long	.LBB31_3-.LJTI31_0
+	.long	.LBB31_4-.LJTI31_0
+	.long	.LBB31_5-.LJTI31_0
+	.long	.LBB31_6-.LJTI31_0
+	.long	.LBB31_7-.LJTI31_0
+	.long	.LBB31_8-.LJTI31_0
+
+	.section	".text._ZN76_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Display$GT$3fmt17h2f820e35657afb59E","ax",@progbits
+	.globl	_ZN76_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Display$GT$3fmt17h2f820e35657afb59E
+	.p2align	4, 0x90
+	.type	_ZN76_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Display$GT$3fmt17h2f820e35657afb59E,@function
+_ZN76_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Display$GT$3fmt17h2f820e35657afb59E:
+	.cfi_startproc
+	subq	$120, %rsp
+	.cfi_def_cfa_offset 128
+	movq	%rsi, %rax
+	movq	(%rdi), %rcx
+	leaq	.LJTI32_0(%rip), %rdx
+	movslq	(%rdx,%rcx,4), %rcx
+	addq	%rdx, %rcx
+	jmpq	*%rcx
+.LBB32_1:
+	addq	$8, %rdi
+	movq	%rdi, (%rsp)
+	movq	%rsp, %rcx
+	movq	%rcx, 64(%rsp)
+	leaq	_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E(%rip), %rcx
+	movq	%rcx, 72(%rsp)
+	leaq	.L__unnamed_29(%rip), %rcx
+	movq	%rcx, 8(%rsp)
+	movq	$2, 16(%rsp)
+	jmp	.LBB32_4
+.LBB32_2:
+	addq	$8, %rdi
+	movq	%rdi, (%rsp)
+	movq	%rsp, %rcx
+	movq	%rcx, 64(%rsp)
+	leaq	_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E(%rip), %rcx
+	movq	%rcx, 72(%rsp)
+	leaq	.L__unnamed_30(%rip), %rcx
+	jmp	.LBB32_3
+.LBB32_5:
+	addq	$8, %rdi
+	movq	%rdi, (%rsp)
+	movq	%rsp, %rcx
+	movq	%rcx, 64(%rsp)
+	leaq	_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E(%rip), %rcx
+	movq	%rcx, 72(%rsp)
+	leaq	.L__unnamed_31(%rip), %rcx
+.LBB32_3:
+	movq	%rcx, 8(%rsp)
+	movq	$1, 16(%rsp)
+.LBB32_4:
+	movq	$0, 40(%rsp)
+	leaq	64(%rsp), %rcx
+	movq	%rcx, 24(%rsp)
+	movq	$1, 32(%rsp)
+	jmp	.LBB32_11
+.LBB32_6:
+	leaq	.L__unnamed_32(%rip), %rcx
+	movq	%rcx, 8(%rsp)
+	movq	$1, 16(%rsp)
+	leaq	.L__unnamed_10(%rip), %rcx
+	movq	%rcx, 24(%rsp)
+	xorps	%xmm0, %xmm0
+	movups	%xmm0, 32(%rsp)
+	jmp	.LBB32_11
+.LBB32_7:
+	leaq	8(%rdi), %rcx
+	leaq	16(%rdi), %rdx
+	addq	$24, %rdi
+	movq	%rdx, 112(%rsp)
+	movq	%rdi, 56(%rsp)
+	movq	%rcx, (%rsp)
+	leaq	112(%rsp), %rcx
+	movq	%rcx, 8(%rsp)
+	leaq	_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E(%rip), %rcx
+	movq	%rcx, 16(%rsp)
+	leaq	56(%rsp), %rdx
+	movq	%rdx, 24(%rsp)
+	movq	%rcx, 32(%rsp)
+	movq	%rsp, %rdx
+	movq	%rdx, 40(%rsp)
+	movq	%rcx, 48(%rsp)
+	leaq	.L__unnamed_33(%rip), %rcx
+	movq	%rcx, 64(%rsp)
+	movq	$3, 72(%rsp)
+	movq	$0, 96(%rsp)
+	leaq	8(%rsp), %rcx
+	movq	%rcx, 80(%rsp)
+	movq	$3, 88(%rsp)
+	leaq	64(%rsp), %rsi
+	movq	%rax, %rdi
+	callq	*_ZN4core3fmt9Formatter9write_fmt17hf01228dccc6fed43E@GOTPCREL(%rip)
+	addq	$120, %rsp
+	.cfi_def_cfa_offset 8
+	retq
+.LBB32_8:
+	.cfi_def_cfa_offset 128
+	leaq	8(%rdi), %rcx
+	addq	$16, %rdi
+	movq	%rcx, 56(%rsp)
+	movq	%rdi, (%rsp)
+	leaq	56(%rsp), %rcx
+	movq	%rcx, 64(%rsp)
+	leaq	_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E(%rip), %rcx
+	movq	%rcx, 72(%rsp)
+	movq	%rsp, %rdx
+	movq	%rdx, 80(%rsp)
+	movq	%rcx, 88(%rsp)
+	leaq	.L__unnamed_34(%rip), %rcx
+	jmp	.LBB32_10
+.LBB32_9:
+	leaq	8(%rdi), %rcx
+	addq	$16, %rdi
+	movq	%rcx, 56(%rsp)
+	movq	%rdi, (%rsp)
+	leaq	56(%rsp), %rcx
+	movq	%rcx, 64(%rsp)
+	leaq	_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h289fd8b0ec2bccb9E(%rip), %rcx
+	movq	%rcx, 72(%rsp)
+	movq	%rsp, %rdx
+	movq	%rdx, 80(%rsp)
+	movq	%rcx, 88(%rsp)
+	leaq	.L__unnamed_35(%rip), %rcx
+.LBB32_10:
+	movq	%rcx, 8(%rsp)
+	movq	$3, 16(%rsp)
+	movq	$0, 40(%rsp)
+	leaq	64(%rsp), %rcx
+	movq	%rcx, 24(%rsp)
+	movq	$2, 32(%rsp)
+.LBB32_11:
+	leaq	8(%rsp), %rsi
+	movq	%rax, %rdi
+	callq	*_ZN4core3fmt9Formatter9write_fmt17hf01228dccc6fed43E@GOTPCREL(%rip)
+	addq	$120, %rsp
+	.cfi_def_cfa_offset 8
+	retq
+.Lfunc_end32:
+	.size	_ZN76_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Display$GT$3fmt17h2f820e35657afb59E, .Lfunc_end32-_ZN76_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Display$GT$3fmt17h2f820e35657afb59E
+	.cfi_endproc
+	.section	".rodata._ZN76_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Display$GT$3fmt17h2f820e35657afb59E","a",@progbits
+	.p2align	2, 0x0
+.LJTI32_0:
+	.long	.LBB32_1-.LJTI32_0
+	.long	.LBB32_2-.LJTI32_0
+	.long	.LBB32_5-.LJTI32_0
+	.long	.LBB32_6-.LJTI32_0
+	.long	.LBB32_7-.LJTI32_0
+	.long	.LBB32_8-.LJTI32_0
+	.long	.LBB32_9-.LJTI32_0
+
+	.section	".text._ZN98_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..convert..AsRef$LT$u16$GT$$GT$6as_ref17haea985d7dfdc7de7E","ax",@progbits
+	.globl	_ZN98_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..convert..AsRef$LT$u16$GT$$GT$6as_ref17haea985d7dfdc7de7E
+	.p2align	4, 0x90
+	.type	_ZN98_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..convert..AsRef$LT$u16$GT$$GT$6as_ref17haea985d7dfdc7de7E,@function
+_ZN98_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..convert..AsRef$LT$u16$GT$$GT$6as_ref17haea985d7dfdc7de7E:
+	.cfi_startproc
+	movq	%rdi, %rax
+	retq
+.Lfunc_end33:
+	.size	_ZN98_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..convert..AsRef$LT$u16$GT$$GT$6as_ref17haea985d7dfdc7de7E, .Lfunc_end33-_ZN98_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..convert..AsRef$LT$u16$GT$$GT$6as_ref17haea985d7dfdc7de7E
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly5field5f2e168Additive4zero17hd4693db82aebf02cE,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly5field5f2e168Additive4zero17hd4693db82aebf02cE
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly5field5f2e168Additive4zero17hd4693db82aebf02cE,@function
+_ZN22reed_solomon_novelpoly5field5f2e168Additive4zero17hd4693db82aebf02cE:
+	.cfi_startproc
+	xorl	%eax, %eax
+	retq
+.Lfunc_end34:
+	.size	_ZN22reed_solomon_novelpoly5field5f2e168Additive4zero17hd4693db82aebf02cE, .Lfunc_end34-_ZN22reed_solomon_novelpoly5field5f2e168Additive4zero17hd4693db82aebf02cE
+	.cfi_endproc
+
+	.section	".text._ZN87_$LT$reed_solomon_novelpoly..field..f2e16..Multiplier$u20$as$u20$core..fmt..Display$GT$3fmt17h84df00de1653589cE","ax",@progbits
+	.globl	_ZN87_$LT$reed_solomon_novelpoly..field..f2e16..Multiplier$u20$as$u20$core..fmt..Display$GT$3fmt17h84df00de1653589cE
+	.p2align	4, 0x90
+	.type	_ZN87_$LT$reed_solomon_novelpoly..field..f2e16..Multiplier$u20$as$u20$core..fmt..Display$GT$3fmt17h84df00de1653589cE,@function
+_ZN87_$LT$reed_solomon_novelpoly..field..f2e16..Multiplier$u20$as$u20$core..fmt..Display$GT$3fmt17h84df00de1653589cE:
+	.cfi_startproc
+	subq	$120, %rsp
+	.cfi_def_cfa_offset 128
+	movq	%rsi, %rax
+	movq	%rdi, (%rsp)
+	movq	_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17h3e388c420aea3b33E@GOTPCREL(%rip), %rcx
+	movq	%rcx, 8(%rsp)
+	movq	$2, 64(%rsp)
+	movq	$0, 80(%rsp)
+	movq	$4, 88(%rsp)
+	movq	$0, 96(%rsp)
+	movabsq	$34359738400, %rcx
+	movq	%rcx, 104(%rsp)
+	movb	$3, 112(%rsp)
+	leaq	.L__unnamed_36(%rip), %rcx
+	movq	%rcx, 16(%rsp)
+	movq	$1, 24(%rsp)
+	leaq	64(%rsp), %rcx
+	movq	%rcx, 48(%rsp)
+	movq	$1, 56(%rsp)
+	movq	%rsp, %rcx
+	movq	%rcx, 32(%rsp)
+	movq	$1, 40(%rsp)
+	leaq	16(%rsp), %rsi
+	movq	%rax, %rdi
+	callq	*_ZN4core3fmt9Formatter9write_fmt17hf01228dccc6fed43E@GOTPCREL(%rip)
+	addq	$120, %rsp
+	.cfi_def_cfa_offset 8
+	retq
+.Lfunc_end35:
+	.size	_ZN87_$LT$reed_solomon_novelpoly..field..f2e16..Multiplier$u20$as$u20$core..fmt..Display$GT$3fmt17h84df00de1653589cE, .Lfunc_end35-_ZN87_$LT$reed_solomon_novelpoly..field..f2e16..Multiplier$u20$as$u20$core..fmt..Display$GT$3fmt17h84df00de1653589cE
+	.cfi_endproc
+
+	.section	.rodata.cst16,"aM",@progbits,16
+	.p2align	4, 0x0
+.LCPI36_0:
+	.long	65535
+	.long	65535
+	.long	65535
+	.long	65535
+	.section	.text._ZN22reed_solomon_novelpoly5field5f2e1611walsh_plain17h7770fb0b24f1eac3E,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly5field5f2e1611walsh_plain17h7770fb0b24f1eac3E
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly5field5f2e1611walsh_plain17h7770fb0b24f1eac3E,@function
+_ZN22reed_solomon_novelpoly5field5f2e1611walsh_plain17h7770fb0b24f1eac3E:
+	.cfi_startproc
+	pushq	%rbp
+	.cfi_def_cfa_offset 16
+	pushq	%r15
+	.cfi_def_cfa_offset 24
+	pushq	%r14
+	.cfi_def_cfa_offset 32
+	pushq	%r13
+	.cfi_def_cfa_offset 40
+	pushq	%r12
+	.cfi_def_cfa_offset 48
+	pushq	%rbx
+	.cfi_def_cfa_offset 56
+	subq	$56, %rsp
+	.cfi_def_cfa_offset 112
+	.cfi_offset %rbx, -56
+	.cfi_offset %r12, -48
+	.cfi_offset %r13, -40
+	.cfi_offset %r14, -32
+	.cfi_offset %r15, -24
+	.cfi_offset %rbp, -16
+	movq	%rdx, (%rsp)
+	cmpq	$2, %rdx
+	jb	.LBB36_14
+	movl	$1, %r10d
+	pxor	%xmm0, %xmm0
+	movdqa	.LCPI36_0(%rip), %xmm1
+	jmp	.LBB36_2
+	.p2align	4, 0x90
+.LBB36_13:
+	movq	%rbx, %r10
+	cmpq	(%rsp), %rbx
+	jae	.LBB36_14
+.LBB36_2:
+	leaq	(%r10,%r10), %rbx
+	leaq	(,%r10,4), %rax
+	movq	%rax, 8(%rsp)
+	movq	%rbx, %rax
+	negq	%rax
+	movq	%rax, 32(%rsp)
+	leaq	-1(%r10), %rax
+	movq	%rax, 24(%rsp)
+	leaq	2(,%r10,2), %rax
+	movq	%rax, 16(%rsp)
+	movq	%r10, %rcx
+	negq	%rcx
+	leaq	(%rdi,%r10,2), %r13
+	movq	%rdi, %r8
+	xorl	%r12d, %r12d
+	xorl	%r15d, %r15d
+	movq	%r10, %r9
+	xorl	%r11d, %r11d
+	jmp	.LBB36_3
+	.p2align	4, 0x90
+.LBB36_12:
+	addq	%rbx, %r11
+	addq	%rbx, %r9
+	incq	%r15
+	movq	48(%rsp), %rcx
+	subq	%rbx, %rcx
+	movq	40(%rsp), %r12
+	subq	%rbx, %r12
+	addq	8(%rsp), %r8
+	cmpq	(%rsp), %r11
+	jae	.LBB36_13
+.LBB36_3:
+	cmpq	%r9, %rsi
+	movq	%r9, %rax
+	cmovaq	%rsi, %rax
+	movq	%rcx, 48(%rsp)
+	leaq	(%rax,%rcx), %r14
+	cmpq	%r11, %rsi
+	movq	%r11, %rdx
+	cmovaq	%rsi, %rdx
+	movq	%r12, 40(%rsp)
+	leaq	(%rdx,%r12), %rcx
+	cmpq	%rcx, %r14
+	cmovbq	%r14, %rcx
+	movq	%r8, %r12
+	movq	24(%rsp), %r8
+	cmpq	%r8, %rcx
+	cmovaeq	%r8, %rcx
+	movq	32(%rsp), %r14
+	imulq	%r15, %r14
+	addq	%r14, %rdx
+	subq	%r10, %r14
+	addq	%rax, %r14
+	cmpq	%rdx, %r14
+	movq	%rdx, %rbp
+	cmovbq	%r14, %rbp
+	cmpq	%r8, %rbp
+	cmovaeq	%r8, %rbp
+	cmpq	%rdx, %r14
+	cmovaeq	%rdx, %r14
+	cmpq	%r8, %r14
+	cmovaeq	%r8, %r14
+	movq	%r12, %r8
+	leaq	(%r11,%r10), %rax
+	cmpq	%rax, %r11
+	jae	.LBB36_12
+	incq	%rbp
+	movq	%r11, %rax
+	cmpq	$8, %rbp
+	jbe	.LBB36_9
+	movq	8(%rsp), %rax
+	imulq	%r15, %rax
+	leaq	(%rdi,%rax), %r12
+	movq	16(%rsp), %rdx
+	addq	%rdi, %rdx
+	addq	%rax, %rdx
+	leaq	(%rdx,%r14,2), %rdx
+	cmpq	%rdx, %r12
+	jae	.LBB36_7
+	movq	%rax, %rdx
+	orq	$2, %rdx
+	addq	%rdi, %rdx
+	leaq	(%rdx,%r14,2), %rdx
+	leaq	(%rdi,%rbx), %r14
+	addq	%rax, %r14
+	movq	%r11, %rax
+	cmpq	%rdx, %r14
+	jb	.LBB36_9
+.LBB36_7:
+	movl	%ebp, %edx
+	andl	$7, %edx
+	movl	$8, %eax
+	cmoveq	%rax, %rdx
+	subq	%rdx, %rbp
+	movq	%rbp, %rax
+	addq	%r11, %rax
+	subq	%rdx, %rcx
+	incq	%rcx
+	movq	%r8, %rbp
+	.p2align	4, 0x90
+.LBB36_8:
+	movdqu	(%rbp), %xmm4
+	movdqa	%xmm4, %xmm5
+	punpckhwd	%xmm0, %xmm5
+	punpcklwd	%xmm0, %xmm4
+	movdqu	(%rbp,%rbx), %xmm6
+	movdqa	%xmm6, %xmm7
+	punpckhwd	%xmm0, %xmm7
+	punpcklwd	%xmm0, %xmm6
+	movdqa	%xmm4, %xmm2
+	psubd	%xmm6, %xmm2
+	paddd	%xmm1, %xmm2
+	movdqa	%xmm5, %xmm3
+	psubd	%xmm7, %xmm3
+	paddd	%xmm1, %xmm3
+	paddd	%xmm4, %xmm6
+	paddd	%xmm5, %xmm7
+	movdqa	%xmm7, %xmm4
+	psrld	$16, %xmm4
+	movdqa	%xmm6, %xmm5
+	psrld	$16, %xmm5
+	paddd	%xmm6, %xmm5
+	paddd	%xmm7, %xmm4
+	pslld	$16, %xmm4
+	psrad	$16, %xmm4
+	pslld	$16, %xmm5
+	psrad	$16, %xmm5
+	packssdw	%xmm4, %xmm5
+	movdqu	%xmm5, (%rbp)
+	movdqa	%xmm3, %xmm4
+	psrld	$16, %xmm4
+	movdqa	%xmm2, %xmm5
+	psrld	$16, %xmm5
+	paddd	%xmm2, %xmm5
+	paddd	%xmm3, %xmm4
+	pslld	$16, %xmm4
+	psrad	$16, %xmm4
+	pslld	$16, %xmm5
+	psrad	$16, %xmm5
+	packssdw	%xmm4, %xmm5
+	movdqu	%xmm5, (%rbp,%rbx)
+	addq	$16, %rbp
+	addq	$-8, %rcx
+	jne	.LBB36_8
+	.p2align	4, 0x90
+.LBB36_9:
+	cmpq	%rsi, %rax
+	jae	.LBB36_15
+	leaq	(%r10,%rax), %rcx
+	cmpq	%rsi, %rcx
+	jae	.LBB36_16
+	movzwl	(%rdi,%rax,2), %ecx
+	movzwl	(%r13,%rax,2), %edx
+	movl	%ecx, %r14d
+	subl	%edx, %r14d
+	leal	65535(%r14), %ebp
+	addl	%ecx, %edx
+	movl	%edx, %ecx
+	shrl	$16, %ecx
+	addl	%edx, %ecx
+	movw	%cx, (%rdi,%rax,2)
+	shrl	$16, %ebp
+	leal	(%r14,%rbp), %ecx
+	addl	$65535, %ecx
+	movw	%cx, (%r13,%rax,2)
+	incq	%rax
+	cmpq	%rax, %r9
+	jne	.LBB36_9
+	jmp	.LBB36_12
+.LBB36_14:
+	addq	$56, %rsp
+	.cfi_def_cfa_offset 56
+	popq	%rbx
+	.cfi_def_cfa_offset 48
+	popq	%r12
+	.cfi_def_cfa_offset 40
+	popq	%r13
+	.cfi_def_cfa_offset 32
+	popq	%r14
+	.cfi_def_cfa_offset 24
+	popq	%r15
+	.cfi_def_cfa_offset 16
+	popq	%rbp
+	.cfi_def_cfa_offset 8
+	retq
+.LBB36_15:
+	.cfi_def_cfa_offset 112
+	leaq	.L__unnamed_37(%rip), %rdx
+	movq	%rax, %rdi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB36_16:
+	leaq	.L__unnamed_38(%rip), %rdx
+	movq	%rcx, %rdi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.Lfunc_end36:
+	.size	_ZN22reed_solomon_novelpoly5field5f2e1611walsh_plain17h7770fb0b24f1eac3E, .Lfunc_end36-_ZN22reed_solomon_novelpoly5field5f2e1611walsh_plain17h7770fb0b24f1eac3E
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly5field5f2e1617formal_derivative17hd0977a8b62f3cbd2E,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly5field5f2e1617formal_derivative17hd0977a8b62f3cbd2E
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly5field5f2e1617formal_derivative17hd0977a8b62f3cbd2E,@function
+_ZN22reed_solomon_novelpoly5field5f2e1617formal_derivative17hd0977a8b62f3cbd2E:
+	.cfi_startproc
+	pushq	%rbx
+	.cfi_def_cfa_offset 16
+	.cfi_offset %rbx, -16
+	cmpq	$2, %rdx
+	jb	.LBB37_4
+	movl	$1, %ecx
+	jmp	.LBB37_2
+	.p2align	4, 0x90
+.LBB37_3:
+	incq	%rcx
+	cmpq	%rdx, %rcx
+	je	.LBB37_4
+.LBB37_2:
+	leaq	-1(%rcx), %r8
+	xorq	%rcx, %r8
+	incq	%r8
+	shrq	%r8
+	movq	%rcx, %rax
+	subq	%r8, %rax
+	cmpq	%rcx, %rax
+	jae	.LBB37_3
+	movq	%r8, %r9
+	negq	%r9
+	movq	%rdi, %r10
+	subq	%r8, %r10
+	subq	%r8, %r10
+	xorl	%r11d, %r11d
+	movq	%rcx, %rax
+	jmp	.LBB37_17
+	.p2align	4, 0x90
+.LBB37_21:
+	movzwl	(%rdi,%rax,2), %ebx
+.LBB37_22:
+	xorw	%bx, (%r10,%rax,2)
+	incq	%rax
+	decq	%r11
+	cmpq	%r11, %r9
+	je	.LBB37_3
+.LBB37_17:
+	leaq	(%r9,%rax), %rbx
+	cmpq	%rsi, %rbx
+	jae	.LBB37_20
+	cmpq	%rsi, %rax
+	jb	.LBB37_21
+	xorl	%ebx, %ebx
+	jmp	.LBB37_22
+.LBB37_4:
+	cmpq	$65536, %rsi
+	movl	$65536, %eax
+	cmovbq	%rsi, %rax
+	cmpq	%rdx, %rax
+	jbe	.LBB37_14
+	testq	%rdx, %rdx
+	je	.LBB37_23
+	movq	%rdx, %rcx
+	jmp	.LBB37_7
+	.p2align	4, 0x90
+.LBB37_23:
+	jmp	.LBB37_23
+	.p2align	4, 0x90
+.LBB37_13:
+	addq	%rcx, %rcx
+	cmpq	%rax, %rcx
+	jae	.LBB37_14
+.LBB37_7:
+	movq	%rcx, %r8
+	xorl	%r9d, %r9d
+	jmp	.LBB37_8
+	.p2align	4, 0x90
+.LBB37_11:
+	movzwl	(%rdi,%r8,2), %r10d
+.LBB37_12:
+	xorw	%r10w, (%rdi,%r9,2)
+	incq	%r9
+	incq	%r8
+	cmpq	%r9, %rdx
+	je	.LBB37_13
+.LBB37_8:
+	cmpq	%r9, %rsi
+	je	.LBB37_15
+	cmpq	%rsi, %r8
+	jb	.LBB37_11
+	xorl	%r10d, %r10d
+	jmp	.LBB37_12
+.LBB37_14:
+	popq	%rbx
+	.cfi_def_cfa_offset 8
+	retq
+.LBB37_20:
+	.cfi_def_cfa_offset 16
+	subq	%r8, %rax
+	leaq	.L__unnamed_39(%rip), %rdx
+	movq	%rax, %rdi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB37_15:
+	leaq	.L__unnamed_40(%rip), %rdx
+	movq	%rsi, %rdi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.Lfunc_end37:
+	.size	_ZN22reed_solomon_novelpoly5field5f2e1617formal_derivative17hd0977a8b62f3cbd2E, .Lfunc_end37-_ZN22reed_solomon_novelpoly5field5f2e1617formal_derivative17hd0977a8b62f3cbd2E
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly5field5f2e1625tweaked_formal_derivative17h5b1b54e1a258c2ceE,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly5field5f2e1625tweaked_formal_derivative17h5b1b54e1a258c2ceE
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly5field5f2e1625tweaked_formal_derivative17h5b1b54e1a258c2ceE,@function
+_ZN22reed_solomon_novelpoly5field5f2e1625tweaked_formal_derivative17h5b1b54e1a258c2ceE:
+	.cfi_startproc
+	jmpq	*_ZN22reed_solomon_novelpoly5field5f2e1617formal_derivative17hd0977a8b62f3cbd2E@GOTPCREL(%rip)
+.Lfunc_end38:
+	.size	_ZN22reed_solomon_novelpoly5field5f2e1625tweaked_formal_derivative17h5b1b54e1a258c2ceE, .Lfunc_end38-_ZN22reed_solomon_novelpoly5field5f2e1625tweaked_formal_derivative17h5b1b54e1a258c2ceE
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly5field5f2e1612inverse_afft17h9dc39d0d070d1672E,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly5field5f2e1612inverse_afft17h9dc39d0d070d1672E
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly5field5f2e1612inverse_afft17h9dc39d0d070d1672E,@function
+_ZN22reed_solomon_novelpoly5field5f2e1612inverse_afft17h9dc39d0d070d1672E:
+	.cfi_startproc
+	movq	%rcx, %r8
+	movq	%rdx, %rcx
+	movq	%rsi, %rdx
+	movq	%rdi, %rsi
+	movq	_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E@GOTPCREL(%rip), %rdi
+	jmpq	*_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT12inverse_afft17h4d44ad96eac2020aE@GOTPCREL(%rip)
+.Lfunc_end39:
+	.size	_ZN22reed_solomon_novelpoly5field5f2e1612inverse_afft17h9dc39d0d070d1672E, .Lfunc_end39-_ZN22reed_solomon_novelpoly5field5f2e1612inverse_afft17h9dc39d0d070d1672E
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly5field5f2e164afft17h7456bac76cb52e12E,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly5field5f2e164afft17h7456bac76cb52e12E
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly5field5f2e164afft17h7456bac76cb52e12E,@function
+_ZN22reed_solomon_novelpoly5field5f2e164afft17h7456bac76cb52e12E:
+	.cfi_startproc
+	movq	%rcx, %r8
+	movq	%rdx, %rcx
+	movq	%rsi, %rdx
+	movq	%rdi, %rsi
+	movq	_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E@GOTPCREL(%rip), %rdi
+	jmpq	*_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT4afft17h48fb535882d96dacE@GOTPCREL(%rip)
+.Lfunc_end40:
+	.size	_ZN22reed_solomon_novelpoly5field5f2e164afft17h7456bac76cb52e12E, .Lfunc_end40-_ZN22reed_solomon_novelpoly5field5f2e164afft17h7456bac76cb52e12E
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT12inverse_afft17h4d44ad96eac2020aE,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT12inverse_afft17h4d44ad96eac2020aE
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT12inverse_afft17h4d44ad96eac2020aE,@function
+_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT12inverse_afft17h4d44ad96eac2020aE:
+	.cfi_startproc
+	pushq	%rbp
+	.cfi_def_cfa_offset 16
+	pushq	%r15
+	.cfi_def_cfa_offset 24
+	pushq	%r14
+	.cfi_def_cfa_offset 32
+	pushq	%r13
+	.cfi_def_cfa_offset 40
+	pushq	%r12
+	.cfi_def_cfa_offset 48
+	pushq	%rbx
+	.cfi_def_cfa_offset 56
+	subq	$104, %rsp
+	.cfi_def_cfa_offset 160
+	.cfi_offset %rbx, -56
+	.cfi_offset %r12, -48
+	.cfi_offset %r13, -40
+	.cfi_offset %r14, -32
+	.cfi_offset %r15, -24
+	.cfi_offset %rbp, -16
+	movq	%rdi, 64(%rsp)
+	cmpq	$2, %rcx
+	jb	.LBB41_18
+	decq	%r8
+	movl	$1, %ebx
+	movq	%rcx, 56(%rsp)
+	movq	%r8, 48(%rsp)
+.LBB41_2:
+	leaq	(%rbx,%rbx), %r14
+	leaq	(,%rbx,4), %rax
+	movq	%rax, 16(%rsp)
+	leaq	2(,%rbx,2), %rax
+	movq	%rax, 40(%rsp)
+	movq	%r14, %rax
+	negq	%rax
+	movq	%rax, 80(%rsp)
+	leaq	-1(%rbx), %rax
+	movq	%rax, 72(%rsp)
+	movq	%rbx, %rdi
+	negq	%rdi
+	leaq	(%rsi,%rbx,2), %rbp
+	movq	%rsi, 8(%rsp)
+	xorl	%r9d, %r9d
+	xorl	%r10d, %r10d
+	xorl	%r13d, %r13d
+	movq	%rbx, %r11
+	jmp	.LBB41_3
+	.p2align	4, 0x90
+.LBB41_28:
+	addq	%r14, %r11
+	incq	%r13
+	movq	96(%rsp), %rdi
+	subq	%r14, %rdi
+	movq	32(%rsp), %r10
+	addq	%r14, %r10
+	movq	88(%rsp), %r9
+	subq	%r14, %r9
+	movq	8(%rsp), %rax
+	addq	16(%rsp), %rax
+	movq	%rax, 8(%rsp)
+	cmpq	%rcx, %r11
+	jae	.LBB41_17
+.LBB41_3:
+	cmpq	%r11, %rdx
+	movq	%r11, %rax
+	cmovaq	%rdx, %rax
+	movq	%rdi, 96(%rsp)
+	addq	%rax, %rdi
+	cmpq	%r10, %rdx
+	movq	%r10, %r15
+	movq	%r10, 32(%rsp)
+	cmovaq	%rdx, %r10
+	movq	%r9, 88(%rsp)
+	addq	%r9, %r10
+	cmpq	%r10, %rdi
+	cmovbq	%rdi, %r10
+	movq	72(%rsp), %r12
+	cmpq	%r12, %r10
+	cmovaeq	%r12, %r10
+	movq	80(%rsp), %r9
+	imulq	%r13, %r9
+	movq	%r13, %rdi
+	movq	%r9, %r13
+	subq	%rbx, %r13
+	addq	%rax, %r13
+	movq	%r14, %r15
+	movq	%rdi, 24(%rsp)
+	imulq	%rdi, %r15
+	cmpq	%r15, %rdx
+	movq	%r15, %rdi
+	cmovaq	%rdx, %rdi
+	addq	%r9, %rdi
+	cmpq	%rdi, %r13
+	cmovbq	%r13, %rdi
+	cmpq	%r12, %rdi
+	cmovaeq	%r12, %rdi
+	cmpq	%r15, %rdx
+	cmovaq	%rdx, %r15
+	addq	%r9, %r15
+	cmpq	%r15, %r13
+	cmovbq	%r13, %r15
+	cmpq	%r12, %r15
+	cmovaeq	%r12, %r15
+	movq	%r11, %rax
+	subq	%rbx, %rax
+	cmpq	%r11, %rax
+	jae	.LBB41_9
+	incq	%rdi
+	movq	%rax, %r9
+	cmpq	$8, %rdi
+	jbe	.LBB41_5
+	movq	16(%rsp), %r12
+	imulq	24(%rsp), %r12
+	leaq	(%rsi,%r14), %r9
+	addq	%r12, %r9
+	movq	%r12, %r13
+	orq	$2, %r13
+	addq	%rsi, %r13
+	leaq	(%r13,%r15,2), %r13
+	cmpq	%r13, %r9
+	jae	.LBB41_21
+	movq	40(%rsp), %r9
+	addq	%rsi, %r9
+	addq	%r12, %r9
+	leaq	(%r9,%r15,2), %r15
+	addq	%rsi, %r12
+	movq	%rax, %r9
+	cmpq	%r15, %r12
+	jb	.LBB41_5
+.LBB41_21:
+	movl	%edi, %r15d
+	andl	$7, %r15d
+	movl	$8, %r9d
+	cmoveq	%r9, %r15
+	subq	%r15, %rdi
+	movq	%rdi, %r9
+	addq	%rax, %r9
+	subq	%r15, %r10
+	incq	%r10
+	movq	8(%rsp), %rdi
+	.p2align	4, 0x90
+.LBB41_22:
+	movups	(%rdi), %xmm0
+	movups	(%rdi,%r14), %xmm1
+	xorps	%xmm0, %xmm1
+	movups	%xmm1, (%rdi,%r14)
+	addq	$16, %rdi
+	addq	$-8, %r10
+	jne	.LBB41_22
+.LBB41_5:
+	movq	32(%rsp), %rdi
+	addq	%rbx, %rdi
+	movq	48(%rsp), %r8
+	movq	56(%rsp), %rcx
+	.p2align	4, 0x90
+.LBB41_6:
+	leaq	(%rbx,%r9), %r10
+	cmpq	%rdx, %r10
+	jae	.LBB41_32
+	cmpq	%rdx, %r9
+	jae	.LBB41_33
+	movzwl	(%rsi,%r9,2), %r10d
+	xorw	%r10w, (%rbp,%r9,2)
+	leaq	1(%r9), %r10
+	movq	%r10, %r9
+	cmpq	%r10, %rdi
+	jne	.LBB41_6
+.LBB41_9:
+	leaq	(%r8,%r11), %r9
+	cmpq	$65535, %r9
+	jae	.LBB41_23
+	movq	64(%rsp), %rdi
+	movzwl	393216(%rdi,%r9,2), %r10d
+	cmpq	$65535, %r10
+	movq	24(%rsp), %r13
+	movq	_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E@GOTPCREL(%rip), %r12
+	je	.LBB41_28
+	cmpq	%r11, %rax
+	jae	.LBB41_28
+	xorl	%edi, %edi
+	jmp	.LBB41_13
+	.p2align	4, 0x90
+.LBB41_16:
+	xorl	%r9d, %r9d
+.LBB41_27:
+	xorw	%r9w, (%rsi,%rax,2)
+	incq	%rdi
+	incq	%rax
+	cmpq	%rdi, %rbx
+	je	.LBB41_28
+.LBB41_13:
+	cmpq	%rdx, %rax
+	jae	.LBB41_24
+	leaq	(%rbx,%rax), %r9
+	cmpq	%rdx, %r9
+	jae	.LBB41_29
+	movzwl	(%rbp,%rax,2), %r9d
+	testq	%r9, %r9
+	je	.LBB41_16
+	movzwl	(%r12,%r9,2), %r9d
+	addq	%r10, %r9
+	movzwl	%r9w, %r15d
+	shrl	$16, %r9d
+	addq	%r15, %r9
+	cmpl	$65535, %r9d
+	ja	.LBB41_34
+	movzwl	131072(%r12,%r9,2), %r9d
+	jmp	.LBB41_27
+	.p2align	4, 0x90
+.LBB41_17:
+	movq	%r14, %rbx
+	cmpq	%rcx, %r14
+	jb	.LBB41_2
+.LBB41_18:
+	addq	$104, %rsp
+	.cfi_def_cfa_offset 56
+	popq	%rbx
+	.cfi_def_cfa_offset 48
+	popq	%r12
+	.cfi_def_cfa_offset 40
+	popq	%r13
+	.cfi_def_cfa_offset 32
+	popq	%r14
+	.cfi_def_cfa_offset 24
+	popq	%r15
+	.cfi_def_cfa_offset 16
+	popq	%rbp
+	.cfi_def_cfa_offset 8
+	retq
+.LBB41_32:
+	.cfi_def_cfa_offset 160
+	leaq	.L__unnamed_41(%rip), %rax
+	movq	%r10, %rdi
+	movq	%rdx, %rsi
+	movq	%rax, %rdx
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB41_33:
+	leaq	.L__unnamed_42(%rip), %rax
+	jmp	.LBB41_30
+.LBB41_24:
+	leaq	.L__unnamed_43(%rip), %rcx
+	movq	%rax, %rdi
+	movq	%rdx, %rsi
+	movq	%rcx, %rdx
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB41_29:
+	leaq	.L__unnamed_44(%rip), %rax
+.LBB41_30:
+	movq	%r9, %rdi
+	movq	%rdx, %rsi
+	movq	%rax, %rdx
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB41_34:
+	leaq	.L__unnamed_45(%rip), %rdx
+	movl	$65536, %edi
+	movl	$65536, %esi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB41_23:
+	leaq	.L__unnamed_46(%rip), %rdx
+	movl	$65535, %esi
+	movq	%r9, %rdi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.Lfunc_end41:
+	.size	_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT12inverse_afft17h4d44ad96eac2020aE, .Lfunc_end41-_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT12inverse_afft17h4d44ad96eac2020aE
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT4afft17h48fb535882d96dacE,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT4afft17h48fb535882d96dacE
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT4afft17h48fb535882d96dacE,@function
+_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT4afft17h48fb535882d96dacE:
+	.cfi_startproc
+	pushq	%rbp
+	.cfi_def_cfa_offset 16
+	pushq	%r15
+	.cfi_def_cfa_offset 24
+	pushq	%r14
+	.cfi_def_cfa_offset 32
+	pushq	%r13
+	.cfi_def_cfa_offset 40
+	pushq	%r12
+	.cfi_def_cfa_offset 48
+	pushq	%rbx
+	.cfi_def_cfa_offset 56
+	subq	$120, %rsp
+	.cfi_def_cfa_offset 176
+	.cfi_offset %rbx, -56
+	.cfi_offset %r12, -48
+	.cfi_offset %r13, -40
+	.cfi_offset %r14, -32
+	.cfi_offset %r15, -24
+	.cfi_offset %rbp, -16
+	movq	%r8, 32(%rsp)
+	movq	%rdi, 96(%rsp)
+	cmpq	$2, %rcx
+	jae	.LBB42_2
+.LBB42_1:
+	addq	$120, %rsp
+	.cfi_def_cfa_offset 56
+	popq	%rbx
+	.cfi_def_cfa_offset 48
+	popq	%r12
+	.cfi_def_cfa_offset 40
+	popq	%r13
+	.cfi_def_cfa_offset 32
+	popq	%r14
+	.cfi_def_cfa_offset 24
+	popq	%r15
+	.cfi_def_cfa_offset 16
+	popq	%rbp
+	.cfi_def_cfa_offset 8
+	retq
+.LBB42_2:
+	.cfi_def_cfa_offset 176
+	decq	32(%rsp)
+	movq	_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E@GOTPCREL(%rip), %r11
+	movq	%rcx, %r14
+	movq	%rcx, 72(%rsp)
+	jmp	.LBB42_4
+	.p2align	4, 0x90
+.LBB42_3:
+	cmpq	$4, 8(%rsp)
+	jb	.LBB42_1
+.LBB42_4:
+	movq	%r14, 8(%rsp)
+	shrq	%r14
+	cmpq	%rcx, %r14
+	jae	.LBB42_3
+	movq	8(%rsp), %r15
+	andq	$-2, %r15
+	leaq	(,%r14,4), %rax
+	movq	%rax, 48(%rsp)
+	leaq	2(%r15), %rax
+	movq	%rax, 64(%rsp)
+	leaq	(%r14,%r14), %rax
+	negq	%rax
+	movq	%rax, 88(%rsp)
+	leaq	-1(%r14), %rax
+	movq	%rax, 80(%rsp)
+	leaq	(%rsi,%r15), %r13
+	movq	%r14, %rdi
+	negq	%rdi
+	movq	%rsi, 16(%rsp)
+	xorl	%r9d, %r9d
+	xorl	%r10d, %r10d
+	xorl	%ebx, %ebx
+	movq	%r14, %r12
+	movq	%r15, 40(%rsp)
+	jmp	.LBB42_7
+	.p2align	4, 0x90
+.LBB42_6:
+	movq	40(%rsp), %r15
+	addq	%r15, %r12
+	movq	56(%rsp), %rbx
+	incq	%rbx
+	movq	112(%rsp), %rdi
+	subq	%r15, %rdi
+	addq	%r15, %r10
+	movq	104(%rsp), %r9
+	subq	%r15, %r9
+	movq	16(%rsp), %rax
+	addq	48(%rsp), %rax
+	movq	%rax, 16(%rsp)
+	movq	72(%rsp), %rcx
+	cmpq	%rcx, %r12
+	jae	.LBB42_3
+.LBB42_7:
+	cmpq	%r12, %rdx
+	movq	%r12, %rax
+	cmovaq	%rdx, %rax
+	movq	%rdi, 112(%rsp)
+	leaq	(%rax,%rdi), %rcx
+	cmpq	%r10, %rdx
+	movq	%r10, %r8
+	cmovaq	%rdx, %r8
+	movq	%r9, 104(%rsp)
+	addq	%r9, %r8
+	cmpq	%r8, %rcx
+	cmovbq	%rcx, %r8
+	movq	80(%rsp), %rdi
+	cmpq	%rdi, %r8
+	cmovaeq	%rdi, %r8
+	movq	88(%rsp), %rcx
+	imulq	%rbx, %rcx
+	movq	%rcx, %r9
+	subq	%r14, %r9
+	addq	%rax, %r9
+	movq	%rbx, 56(%rsp)
+	imulq	%rbx, %r15
+	cmpq	%r15, %rdx
+	movq	%r15, %rbp
+	cmovaq	%rdx, %rbp
+	addq	%rcx, %rbp
+	cmpq	%rbp, %r9
+	cmovbq	%r9, %rbp
+	cmpq	%rdi, %rbp
+	cmovaeq	%rdi, %rbp
+	cmpq	%r15, %rdx
+	cmovaq	%rdx, %r15
+	addq	%rcx, %r15
+	cmpq	%r15, %r9
+	cmovbq	%r9, %r15
+	cmpq	%rdi, %r15
+	cmovaeq	%rdi, %r15
+	movq	32(%rsp), %rax
+	leaq	(%rax,%r12), %r9
+	cmpq	$65534, %r9
+	ja	.LBB42_35
+	movq	%r10, 24(%rsp)
+	movq	96(%rsp), %rax
+	movzwl	393216(%rax,%r9,2), %eax
+	movq	%r12, %r9
+	subq	%r14, %r9
+	cmpq	$65535, %rax
+	je	.LBB42_18
+	cmpq	%r12, %r9
+	jae	.LBB42_18
+	xorl	%ecx, %ecx
+	movq	%r9, %r10
+	jmp	.LBB42_13
+	.p2align	4, 0x90
+.LBB42_11:
+	xorl	%ebx, %ebx
+.LBB42_12:
+	xorw	%bx, (%rsi,%r10,2)
+	incq	%rcx
+	incq	%r10
+	cmpq	%rcx, %r14
+	je	.LBB42_18
+.LBB42_13:
+	cmpq	%rdx, %r10
+	jae	.LBB42_30
+	leaq	(%r14,%r10), %rbx
+	cmpq	%rdx, %rbx
+	jae	.LBB42_31
+	movzwl	(%r13,%r10,2), %ebx
+	testq	%rbx, %rbx
+	je	.LBB42_11
+	movzwl	(%r11,%rbx,2), %ebx
+	addq	%rax, %rbx
+	movzwl	%bx, %edi
+	shrl	$16, %ebx
+	addq	%rdi, %rbx
+	cmpl	$65535, %ebx
+	ja	.LBB42_34
+	movzwl	131072(%r11,%rbx,2), %ebx
+	jmp	.LBB42_12
+	.p2align	4, 0x90
+.LBB42_18:
+	cmpq	%r12, %r9
+	movq	24(%rsp), %r10
+	jae	.LBB42_6
+	incq	%rbp
+	cmpq	$8, %rbp
+	jbe	.LBB42_26
+	movq	48(%rsp), %rax
+	imulq	56(%rsp), %rax
+	leaq	(%rax,%r13), %rcx
+	movq	%rax, %r10
+	orq	$2, %r10
+	addq	%rsi, %r10
+	leaq	(%r10,%r15,2), %r10
+	cmpq	%r10, %rcx
+	jae	.LBB42_23
+	movq	64(%rsp), %rcx
+	addq	%rsi, %rcx
+	addq	%rax, %rcx
+	leaq	(%rcx,%r15,2), %rcx
+	addq	%rsi, %rax
+	cmpq	%rcx, %rax
+	jb	.LBB42_25
+.LBB42_23:
+	movl	%ebp, %eax
+	andl	$7, %eax
+	movl	$8, %ecx
+	cmoveq	%rcx, %rax
+	subq	%rax, %rbp
+	addq	%rbp, %r9
+	notq	%r8
+	addq	%rax, %r8
+	movq	16(%rsp), %rax
+	movq	40(%rsp), %rcx
+	.p2align	4, 0x90
+.LBB42_24:
+	movups	(%rax), %xmm0
+	movups	(%rax,%rcx), %xmm1
+	xorps	%xmm0, %xmm1
+	movups	%xmm1, (%rax,%rcx)
+	addq	$16, %rax
+	addq	$8, %r8
+	jne	.LBB42_24
+.LBB42_25:
+	movq	24(%rsp), %r10
+.LBB42_26:
+	leaq	(%r14,%r10), %rax
+	.p2align	4, 0x90
+.LBB42_27:
+	leaq	(%r14,%r9), %rcx
+	cmpq	%rdx, %rcx
+	jae	.LBB42_32
+	cmpq	%rdx, %r9
+	jae	.LBB42_33
+	movzwl	(%rsi,%r9,2), %ecx
+	xorw	%cx, (%r13,%r9,2)
+	leaq	1(%r9), %rcx
+	movq	%rcx, %r9
+	cmpq	%rcx, %rax
+	jne	.LBB42_27
+	jmp	.LBB42_6
+.LBB42_30:
+	leaq	.L__unnamed_47(%rip), %rax
+	movq	%r10, %rdi
+	movq	%rdx, %rsi
+	movq	%rax, %rdx
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB42_31:
+	movq	8(%rsp), %rdi
+	shrq	%rdi
+	addq	%r10, %rdi
+	leaq	.L__unnamed_48(%rip), %rcx
+	movq	%rdx, %rsi
+	movq	%rcx, %rdx
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB42_32:
+	movq	8(%rsp), %rdi
+	shrq	%rdi
+	addq	%r9, %rdi
+	leaq	.L__unnamed_49(%rip), %rcx
+	movq	%rdx, %rsi
+	movq	%rcx, %rdx
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB42_33:
+	leaq	.L__unnamed_50(%rip), %rax
+	movq	%r9, %rdi
+	movq	%rdx, %rsi
+	movq	%rax, %rdx
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB42_34:
+	leaq	.L__unnamed_45(%rip), %rdx
+	movl	$65536, %edi
+	movl	$65536, %esi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB42_35:
+	leaq	.L__unnamed_51(%rip), %rdx
+	movl	$65535, %esi
+	movq	%r9, %rdi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.Lfunc_end42:
+	.size	_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT4afft17h48fb535882d96dacE, .Lfunc_end42-_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT4afft17h48fb535882d96dacE
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly5field5f2e1616encode_low_plain17h428b65c9fd426544E,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly5field5f2e1616encode_low_plain17h428b65c9fd426544E
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly5field5f2e1616encode_low_plain17h428b65c9fd426544E,@function
+_ZN22reed_solomon_novelpoly5field5f2e1616encode_low_plain17h428b65c9fd426544E:
+	.cfi_startproc
+	pushq	%rbp
+	.cfi_def_cfa_offset 16
+	pushq	%r15
+	.cfi_def_cfa_offset 24
+	pushq	%r14
+	.cfi_def_cfa_offset 32
+	pushq	%r13
+	.cfi_def_cfa_offset 40
+	pushq	%r12
+	.cfi_def_cfa_offset 48
+	pushq	%rbx
+	.cfi_def_cfa_offset 56
+	subq	$88, %rsp
+	.cfi_def_cfa_offset 144
+	.cfi_offset %rbx, -56
+	.cfi_offset %r12, -48
+	.cfi_offset %r13, -40
+	.cfi_offset %r14, -32
+	.cfi_offset %r15, -24
+	.cfi_offset %rbp, -16
+	movq	%r9, 16(%rsp)
+	leaq	(%rdx,%rdx), %r13
+	cmpq	%r9, %r13
+	ja	.LBB43_26
+	movq	%r9, %r14
+	movq	%r8, 8(%rsp)
+	cmpq	%r8, %r9
+	jne	.LBB43_2
+	movq	%rsi, 8(%rsp)
+	cmpq	%rsi, %r14
+	jne	.LBB43_5
+	movq	%rcx, %r12
+	leaq	-1(%r14), %rax
+	testq	%rax, %r14
+	sete	%al
+	testq	%r14, %r14
+	setne	%cl
+	testb	%al, %cl
+	je	.LBB43_7
+	movq	%rdx, %r15
+	leaq	-1(%rdx), %rax
+	testq	%rax, %rdx
+	sete	%al
+	testq	%rdx, %rdx
+	setne	%cl
+	testb	%al, %cl
+	je	.LBB43_10
+	movq	%rdi, %rbp
+	movq	%r14, %rax
+	orq	%r15, %rax
+	shrq	$32, %rax
+	je	.LBB43_12
+	movq	%r14, %rax
+	xorl	%edx, %edx
+	divq	%r15
+	jmp	.LBB43_14
+.LBB43_12:
+	movl	%r14d, %eax
+	xorl	%edx, %edx
+	divl	%r15d
+.LBB43_14:
+	movq	%r14, %rax
+	subq	%rdx, %rax
+	movq	%rax, 8(%rsp)
+	testq	%rdx, %rdx
+	jne	.LBB43_15
+	leaq	(%r14,%r14), %rdx
+	movq	%r12, %rdi
+	movq	%rbp, %rsi
+	callq	*memcpy@GOTPCREL(%rip)
+	cmpq	%r15, %r14
+	jb	.LBB43_27
+	movq	_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E@GOTPCREL(%rip), %rdi
+	xorl	%ebx, %ebx
+	movq	%r12, %rsi
+	movq	%r15, %rdx
+	movq	%r15, %rcx
+	xorl	%r8d, %r8d
+	callq	*_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT12inverse_afft17h4d44ad96eac2020aE@GOTPCREL(%rip)
+	subq	%r15, %r14
+	cmovaeq	%r14, %rbx
+	movq	%rbx, %rax
+	orq	%r15, %rax
+	shrq	$32, %rax
+	movq	%r14, 24(%rsp)
+	movq	%rbp, 32(%rsp)
+	movq	%r12, %r14
+	je	.LBB43_18
+	movq	%rbx, %rax
+	xorl	%edx, %edx
+	divq	%r15
+	jmp	.LBB43_20
+.LBB43_18:
+	movl	%ebx, %eax
+	xorl	%edx, %edx
+	divl	%r15d
+.LBB43_20:
+	xorl	%r12d, %r12d
+	testq	%rdx, %rdx
+	setne	%r12b
+	addq	%rax, %r12
+	je	.LBB43_25
+	leaq	(%r14,%r13), %rbp
+	xorl	%edi, %edi
+	.p2align	4, 0x90
+.LBB43_22:
+	movq	%r15, %rbx
+	addq	%rdi, %rbx
+	jb	.LBB43_28
+	cmpq	24(%rsp), %rbx
+	ja	.LBB43_29
+	decq	%r12
+	movq	%rbp, %rdi
+	movq	%r14, %rsi
+	movq	%r13, %rdx
+	callq	*memcpy@GOTPCREL(%rip)
+	movq	_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E@GOTPCREL(%rip), %rdi
+	movq	%rbp, %rsi
+	movq	%r15, %rdx
+	movq	%r15, %rcx
+	movq	%rbx, %r8
+	callq	*_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT4afft17h48fb535882d96dacE@GOTPCREL(%rip)
+	addq	%r13, %rbp
+	movq	%rbx, %rdi
+	testq	%r12, %r12
+	jne	.LBB43_22
+.LBB43_25:
+	movq	%r14, %rdi
+	movq	32(%rsp), %rsi
+	movq	%r13, %rdx
+	addq	$88, %rsp
+	.cfi_def_cfa_offset 56
+	popq	%rbx
+	.cfi_def_cfa_offset 48
+	popq	%r12
+	.cfi_def_cfa_offset 40
+	popq	%r13
+	.cfi_def_cfa_offset 32
+	popq	%r14
+	.cfi_def_cfa_offset 24
+	popq	%r15
+	.cfi_def_cfa_offset 16
+	popq	%rbp
+	.cfi_def_cfa_offset 8
+	jmpq	*memcpy@GOTPCREL(%rip)
+.LBB43_28:
+	.cfi_def_cfa_offset 144
+	addq	%rdi, %r15
+	leaq	.L__unnamed_52(%rip), %rdx
+	movq	%r15, %rsi
+	callq	*_ZN4core5slice5index22slice_index_order_fail17h980cdeba17e6d1eaE@GOTPCREL(%rip)
+	ud2
+.LBB43_29:
+	addq	%rdi, %r15
+	leaq	.L__unnamed_52(%rip), %rdx
+	movq	%r15, %rdi
+	movq	24(%rsp), %rsi
+	callq	*_ZN4core5slice5index24slice_end_index_len_fail17h37d7f9da4c251f06E@GOTPCREL(%rip)
+	ud2
+.LBB43_26:
+	leaq	.L__unnamed_53(%rip), %rdi
+	leaq	.L__unnamed_54(%rip), %rdx
+	movl	$28, %esi
+	callq	*_ZN4core9panicking5panic17hcad0f3a89a1b36aaE@GOTPCREL(%rip)
+	ud2
+.LBB43_2:
+	movq	$0, 40(%rsp)
+	leaq	.L__unnamed_55(%rip), %rcx
+	jmp	.LBB43_3
+.LBB43_5:
+	movq	$0, 40(%rsp)
+	leaq	.L__unnamed_56(%rip), %rcx
+	jmp	.LBB43_3
+.LBB43_7:
+	leaq	.L__unnamed_57(%rip), %rdi
+	leaq	.L__unnamed_58(%rip), %rdx
+	movl	$34, %esi
+	callq	*_ZN4core9panicking5panic17hcad0f3a89a1b36aaE@GOTPCREL(%rip)
+	ud2
+.LBB43_10:
+	leaq	.L__unnamed_59(%rip), %rdi
+	leaq	.L__unnamed_60(%rip), %rdx
+	movl	$34, %esi
+	callq	*_ZN4core9panicking5panic17hcad0f3a89a1b36aaE@GOTPCREL(%rip)
+	ud2
+.LBB43_15:
+	movq	$0, 40(%rsp)
+	leaq	.L__unnamed_61(%rip), %rcx
+.LBB43_3:
+	leaq	8(%rsp), %rdi
+	leaq	16(%rsp), %rsi
+	leaq	40(%rsp), %rdx
+	callq	_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E
+	ud2
+.LBB43_27:
+	leaq	.L__unnamed_62(%rip), %rdi
+	leaq	.L__unnamed_63(%rip), %rdx
+	movl	$35, %esi
+	callq	*_ZN4core9panicking5panic17hcad0f3a89a1b36aaE@GOTPCREL(%rip)
+	ud2
+.Lfunc_end43:
+	.size	_ZN22reed_solomon_novelpoly5field5f2e1616encode_low_plain17h428b65c9fd426544E, .Lfunc_end43-_ZN22reed_solomon_novelpoly5field5f2e1616encode_low_plain17h428b65c9fd426544E
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly5field5f2e1617encode_high_plain17h03eb5b4f2b5edd50E,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly5field5f2e1617encode_high_plain17h03eb5b4f2b5edd50E
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly5field5f2e1617encode_high_plain17h03eb5b4f2b5edd50E,@function
+_ZN22reed_solomon_novelpoly5field5f2e1617encode_high_plain17h03eb5b4f2b5edd50E:
+	.cfi_startproc
+	pushq	%rbp
+	.cfi_def_cfa_offset 16
+	pushq	%r15
+	.cfi_def_cfa_offset 24
+	pushq	%r14
+	.cfi_def_cfa_offset 32
+	pushq	%r13
+	.cfi_def_cfa_offset 40
+	pushq	%r12
+	.cfi_def_cfa_offset 48
+	pushq	%rbx
+	.cfi_def_cfa_offset 56
+	subq	$40, %rsp
+	.cfi_def_cfa_offset 96
+	.cfi_offset %rbx, -56
+	.cfi_offset %r12, -48
+	.cfi_offset %r13, -40
+	.cfi_offset %r14, -32
+	.cfi_offset %r15, -24
+	.cfi_offset %rbp, -16
+	movq	%r9, %rbx
+	movq	%r8, %r12
+	movq	%rcx, %rbp
+	movq	%rdi, 24(%rsp)
+	movq	104(%rsp), %r13
+	movq	96(%rsp), %rax
+	movq	%rax, 8(%rsp)
+	movq	%r13, %r14
+	movq	%rdx, %rdi
+	subq	%rdx, %r13
+	je	.LBB44_5
+	movq	%rdi, %rax
+	notq	%rax
+	addq	%r14, %rax
+	cmpq	%rax, %r12
+	cmovbq	%r12, %rax
+	incq	%rax
+	cmpq	$8, %rax
+	ja	.LBB44_3
+	xorl	%eax, %eax
+	jmp	.LBB44_28
+.LBB44_3:
+	movl	%eax, %ecx
+	andl	$7, %ecx
+	movl	$8, %edx
+	cmovneq	%rcx, %rdx
+	subq	%rdx, %rax
+	xorl	%ecx, %ecx
+	xorps	%xmm0, %xmm0
+	.p2align	4, 0x90
+.LBB44_4:
+	movups	%xmm0, (%rbp,%rcx,2)
+	addq	$8, %rcx
+	cmpq	%rcx, %rax
+	jne	.LBB44_4
+	.p2align	4, 0x90
+.LBB44_28:
+	cmpq	%rax, %r12
+	je	.LBB44_29
+	movw	$0, (%rbp,%rax,2)
+	incq	%rax
+	cmpq	%rax, %r13
+	jne	.LBB44_28
+.LBB44_5:
+	cmpq	%r14, %r13
+	jae	.LBB44_21
+	cmpq	8(%rsp), %r13
+	ja	.LBB44_22
+	cmpq	%rsi, %r13
+	ja	.LBB44_23
+	leaq	(,%r13,2), %rdx
+	testq	%r13, %r13
+	movq	%rdx, 16(%rsp)
+	je	.LBB44_9
+	notq	%rdi
+	addq	%r14, %rdi
+	cmpq	%rdi, %r12
+	cmovbq	%r12, %rdi
+	incq	%rdi
+	movl	%edi, %eax
+	andl	$7, %eax
+	movl	$8, %ecx
+	cmovneq	%rax, %rcx
+	movq	%rdi, %r15
+	subq	%rcx, %rdi
+	movq	%rdi, 32(%rsp)
+	movq	%r13, %rax
+	.p2align	4, 0x90
+.LBB44_12:
+	subq	%r13, %rax
+	jne	.LBB44_24
+	movq	24(%rsp), %rcx
+	leaq	(%rcx,%rax,2), %rsi
+	movq	%rbx, %rdi
+	callq	*memcpy@GOTPCREL(%rip)
+	movq	_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E@GOTPCREL(%rip), %rdi
+	movq	%rbx, %rsi
+	movq	8(%rsp), %rdx
+	movq	%r13, %rcx
+	movq	%r13, %r8
+	callq	*_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT12inverse_afft17h4d44ad96eac2020aE@GOTPCREL(%rip)
+	xorl	%eax, %eax
+	cmpq	$9, %r15
+	jb	.LBB44_17
+	movq	32(%rsp), %rcx
+	.p2align	4, 0x90
+.LBB44_15:
+	movups	(%rbx,%rax,2), %xmm0
+	movups	(%rbp,%rax,2), %xmm1
+	xorps	%xmm0, %xmm1
+	movups	%xmm1, (%rbp,%rax,2)
+	addq	$8, %rax
+	cmpq	%rax, %rcx
+	jne	.LBB44_15
+	movq	%rcx, %rax
+.LBB44_17:
+	movq	16(%rsp), %rdx
+	.p2align	4, 0x90
+.LBB44_18:
+	cmpq	%rax, %r12
+	je	.LBB44_25
+	movzwl	(%rbx,%rax,2), %ecx
+	xorw	%cx, (%rbp,%rax,2)
+	leaq	1(%rax), %rcx
+	movq	%rcx, %rax
+	cmpq	%rcx, %r13
+	jne	.LBB44_18
+	movq	%rdx, %rax
+	cmpq	%r14, %rdx
+	jb	.LBB44_12
+.LBB44_21:
+	movq	_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E@GOTPCREL(%rip), %rdi
+	movq	%rbp, %rsi
+	movq	%r12, %rdx
+	movq	%r13, %rcx
+	xorl	%r8d, %r8d
+	addq	$40, %rsp
+	.cfi_def_cfa_offset 56
+	popq	%rbx
+	.cfi_def_cfa_offset 48
+	popq	%r12
+	.cfi_def_cfa_offset 40
+	popq	%r13
+	.cfi_def_cfa_offset 32
+	popq	%r14
+	.cfi_def_cfa_offset 24
+	popq	%r15
+	.cfi_def_cfa_offset 16
+	popq	%rbp
+	.cfi_def_cfa_offset 8
+	jmpq	*_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT4afft17h48fb535882d96dacE@GOTPCREL(%rip)
+.LBB44_9:
+	.cfi_def_cfa_offset 96
+	movq	memcpy@GOTPCREL(%rip), %rbp
+	movq	_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E@GOTPCREL(%rip), %r13
+	movq	8(%rsp), %r14
+	movq	24(%rsp), %r15
+	movq	_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT12inverse_afft17h4d44ad96eac2020aE@GOTPCREL(%rip), %r12
+	.p2align	4, 0x90
+.LBB44_10:
+	movq	%rbx, %rdi
+	movq	%r15, %rsi
+	movq	16(%rsp), %rdx
+	callq	*%rbp
+	movq	%r13, %rdi
+	movq	%rbx, %rsi
+	movq	%r14, %rdx
+	xorl	%ecx, %ecx
+	xorl	%r8d, %r8d
+	callq	*%r12
+	jmp	.LBB44_10
+.LBB44_25:
+	leaq	.L__unnamed_64(%rip), %rdx
+	movq	%r12, %rdi
+	movq	%r12, %rsi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB44_29:
+	leaq	.L__unnamed_65(%rip), %rdx
+	movq	%r12, %rdi
+	movq	%r12, %rsi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB44_24:
+	movq	%r13, %rsi
+	subq	%rax, %rsi
+	leaq	.L__unnamed_66(%rip), %rdx
+	movq	%r13, %rdi
+	callq	*_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17len_mismatch_fail17hfd4b87aade02c693E@GOTPCREL(%rip)
+	ud2
+.LBB44_22:
+	leaq	.L__unnamed_67(%rip), %rdx
+	movq	%r13, %rdi
+	movq	8(%rsp), %rsi
+	callq	*_ZN4core5slice5index24slice_end_index_len_fail17h37d7f9da4c251f06E@GOTPCREL(%rip)
+	ud2
+.LBB44_23:
+	leaq	.L__unnamed_68(%rip), %rdx
+	movq	%r13, %rdi
+	callq	*_ZN4core5slice5index24slice_end_index_len_fail17h37d7f9da4c251f06E@GOTPCREL(%rip)
+	ud2
+.Lfunc_end44:
+	.size	_ZN22reed_solomon_novelpoly5field5f2e1617encode_high_plain17h03eb5b4f2b5edd50E, .Lfunc_end44-_ZN22reed_solomon_novelpoly5field5f2e1617encode_high_plain17h03eb5b4f2b5edd50E
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly5field5f2e1610encode_sub17h7956879666f65b82E,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly5field5f2e1610encode_sub17h7956879666f65b82E
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly5field5f2e1610encode_sub17h7956879666f65b82E,@function
+_ZN22reed_solomon_novelpoly5field5f2e1610encode_sub17h7956879666f65b82E:
+	.cfi_startproc
+	pushq	%rbx
+	.cfi_def_cfa_offset 16
+	.cfi_offset %rbx, -16
+	movq	%rdi, %rbx
+	callq	*_ZN22reed_solomon_novelpoly5field5f2e1616encode_sub_plain17h9331897333b8bb31E@GOTPCREL(%rip)
+	movq	%rbx, %rax
+	popq	%rbx
+	.cfi_def_cfa_offset 8
+	retq
+.Lfunc_end45:
+	.size	_ZN22reed_solomon_novelpoly5field5f2e1610encode_sub17h7956879666f65b82E, .Lfunc_end45-_ZN22reed_solomon_novelpoly5field5f2e1610encode_sub17h7956879666f65b82E
+	.cfi_endproc
+
+	.section	.text._ZN22reed_solomon_novelpoly5field5f2e1616encode_sub_plain17h9331897333b8bb31E,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly5field5f2e1616encode_sub_plain17h9331897333b8bb31E
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly5field5f2e1616encode_sub_plain17h9331897333b8bb31E,@function
+_ZN22reed_solomon_novelpoly5field5f2e1616encode_sub_plain17h9331897333b8bb31E:
+.Lfunc_begin2:
+	.cfi_startproc
+	.cfi_personality 155, DW.ref.rust_eh_personality
+	.cfi_lsda 27, .Lexception2
+	pushq	%rbp
+	.cfi_def_cfa_offset 16
+	pushq	%r15
+	.cfi_def_cfa_offset 24
+	pushq	%r14
+	.cfi_def_cfa_offset 32
+	pushq	%r13
+	.cfi_def_cfa_offset 40
+	pushq	%r12
+	.cfi_def_cfa_offset 48
+	pushq	%rbx
+	.cfi_def_cfa_offset 56
+	subq	$72, %rsp
+	.cfi_def_cfa_offset 128
+	.cfi_offset %rbx, -56
+	.cfi_offset %r12, -48
+	.cfi_offset %r13, -40
+	.cfi_offset %r14, -32
+	.cfi_offset %r15, -24
+	.cfi_offset %rbp, -16
+	movq	%rcx, %rbx
+	movq	%rcx, (%rsp)
+	leaq	-1(%rcx), %rax
+	testq	%rax, %rcx
+	sete	%al
+	testq	%rcx, %rcx
+	setne	%cl
+	testb	%al, %cl
+	je	.LBB46_1
+	movq	%r8, %r15
+	leaq	-1(%r8), %rax
+	testq	%rax, %r8
+	sete	%al
+	testq	%r8, %r8
+	setne	%cl
+	testb	%al, %cl
+	je	.LBB46_4
+	movq	%rdx, %r13
+	leaq	(%r15,%r15), %rax
+	cmpq	%rdx, %rax
+	jb	.LBB46_41
+	movq	%rbx, %rax
+	shrq	%rax
+	cmpq	%r15, %rax
+	jb	.LBB46_42
+	movq	%rsi, %rbp
+	leaq	-1(%r13), %rax
+	testq	%rax, %r13
+	sete	%cl
+	testq	%r13, %r13
+	setne	%dl
+	movq	%r13, %rax
+	testb	%cl, %dl
+	jne	.LBB46_10
+	bsrq	%r13, %rcx
+	cmoveq	%r13, %rcx
+	movl	$1, %eax
+	shlq	%cl, %rax
+	cmpq	%r13, %rax
+	jae	.LBB46_10
+	movl	$2, %eax
+	shlq	%cl, %rax
+	cmpq	$63, %rcx
+	je	.LBB46_43
+.LBB46_10:
+	leaq	-1(%rax), %rcx
+	testq	%rcx, %rax
+	jne	.LBB46_43
+	cmpq	%r13, %rax
+	jb	.LBB46_44
+	movq	%rbx, %rax
+	shrq	$62, %rax
+	jne	.LBB46_45
+	movq	%rdi, 8(%rsp)
+	movq	%rbx, %r14
+	addq	%rbx, %r14
+	je	.LBB46_14
+	movq	__rust_no_alloc_shim_is_unstable@GOTPCREL(%rip), %rax
+	movzbl	(%rax), %eax
+	movl	$2, %esi
+	movq	%r14, %rdi
+	callq	*__rust_alloc@GOTPCREL(%rip)
+	movq	%rax, %r12
+	testq	%rax, %rax
+	je	.LBB46_46
+	movq	%r12, %rax
+	cmpq	$2, %rbx
+	jb	.LBB46_18
+.LBB46_17:
+	leaq	-2(%r14), %rdx
+	movq	%r12, %rdi
+	xorl	%esi, %esi
+	callq	*memset@GOTPCREL(%rip)
+	leaq	(%r12,%r14), %rax
+	addq	$-2, %rax
+.LBB46_18:
+	movw	$0, (%rax)
+	cmpq	$2, %r13
+	jb	.LBB46_39
+	movq	%r13, %rax
+	shrq	%rax
+	movl	$1, %ecx
+	xorl	%edx, %edx
+	.p2align	4, 0x90
+.LBB46_20:
+	leaq	-1(%rcx), %rsi
+	cmpq	%r13, %rsi
+	jae	.LBB46_21
+	movzbl	(%rbp,%rdx,2), %esi
+	cmpq	%r13, %rcx
+	jb	.LBB46_35
+.LBB46_34:
+	xorl	%edi, %edi
+	jmp	.LBB46_36
+	.p2align	4, 0x90
+.LBB46_21:
+	xorl	%esi, %esi
+	cmpq	%r13, %rcx
+	jae	.LBB46_34
+.LBB46_35:
+	movzbl	1(%rbp,%rdx,2), %edi
+.LBB46_36:
+	cmpq	%rdx, %rbx
+	je	.LBB46_37
+	movzbl	%dil, %edi
+	shll	$8, %edi
+	movzbl	%sil, %esi
+	orl	%edi, %esi
+	rolw	$8, %si
+	movw	%si, (%r12,%rdx,2)
+	incq	%rdx
+	addq	$2, %rcx
+	cmpq	%rdx, %rax
+	jne	.LBB46_20
+.LBB46_39:
+	movq	%rbx, 16(%rsp)
+	cmpq	%rbx, (%rsp)
+	jne	.LBB46_40
+	testq	%r14, %r14
+	je	.LBB46_25
+	movq	__rust_no_alloc_shim_is_unstable@GOTPCREL(%rip), %rax
+	movzbl	(%rax), %eax
+	movl	$2, %esi
+	movq	%r14, %rdi
+	callq	*__rust_alloc@GOTPCREL(%rip)
+	movq	%rax, %r13
+	testq	%rax, %rax
+	jne	.LBB46_26
+.Ltmp10:
+	movl	$2, %edi
+	movq	%r14, %rsi
+	callq	*_ZN5alloc5alloc18handle_alloc_error17h6c194ef306599f55E@GOTPCREL(%rip)
+.Ltmp11:
+	jmp	.LBB46_30
+.LBB46_14:
+	movl	$2, %r12d
+	movq	%r12, %rax
+	cmpq	$2, %rbx
+	jae	.LBB46_17
+	jmp	.LBB46_18
+.LBB46_25:
+	movl	$2, %r13d
+.LBB46_26:
+	movq	%r13, %rdi
+	movq	%r12, %rsi
+	movq	%r14, %rdx
+	callq	*memcpy@GOTPCREL(%rip)
+.Ltmp13:
+	movq	%r12, %rdi
+	movq	%rbx, %rsi
+	movq	%r15, %rdx
+	movq	%r13, %rcx
+	movq	%rbx, %r8
+	movq	%rbx, %r9
+	callq	*_ZN22reed_solomon_novelpoly5field5f2e1616encode_low_plain17h428b65c9fd426544E@GOTPCREL(%rip)
+.Ltmp14:
+	movq	8(%rsp), %r15
+	movq	%r13, 8(%r15)
+	movq	%rbx, 16(%r15)
+	movq	%rbx, 24(%r15)
+	movq	$7, (%r15)
+	movl	$2, %edx
+	movq	%r12, %rdi
+	movq	%r14, %rsi
+	callq	*__rust_dealloc@GOTPCREL(%rip)
+	movq	%r15, %rax
+	addq	$72, %rsp
+	.cfi_def_cfa_offset 56
+	popq	%rbx
+	.cfi_def_cfa_offset 48
+	popq	%r12
+	.cfi_def_cfa_offset 40
+	popq	%r13
+	.cfi_def_cfa_offset 32
+	popq	%r14
+	.cfi_def_cfa_offset 24
+	popq	%r15
+	.cfi_def_cfa_offset 16
+	popq	%rbp
+	.cfi_def_cfa_offset 8
+	retq
+.LBB46_37:
+	.cfi_def_cfa_offset 128
+.Ltmp6:
+	leaq	.L__unnamed_69(%rip), %rdx
+	movq	%rbx, %rdi
+	movq	%rbx, %rsi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+.Ltmp7:
+	jmp	.LBB46_30
+.LBB46_43:
+	leaq	.L__unnamed_70(%rip), %rdi
+	leaq	.L__unnamed_71(%rip), %rdx
+	movl	$42, %esi
+	callq	*_ZN4core9panicking5panic17hcad0f3a89a1b36aaE@GOTPCREL(%rip)
+	ud2
+.LBB46_1:
+	leaq	.L__unnamed_72(%rip), %rax
+	movq	%rax, 24(%rsp)
+	movq	$1, 32(%rsp)
+	leaq	.L__unnamed_10(%rip), %rax
+	movq	%rax, 40(%rsp)
+	xorps	%xmm0, %xmm0
+	movups	%xmm0, 48(%rsp)
+	leaq	.L__unnamed_73(%rip), %rsi
+	leaq	24(%rsp), %rdi
+	callq	*_ZN4core9panicking9panic_fmt17h979245e2fdb2fabdE@GOTPCREL(%rip)
+	ud2
+.LBB46_4:
+	leaq	.L__unnamed_74(%rip), %rax
+	movq	%rax, 24(%rsp)
+	movq	$1, 32(%rsp)
+	leaq	.L__unnamed_10(%rip), %rax
+	movq	%rax, 40(%rsp)
+	xorps	%xmm0, %xmm0
+	movups	%xmm0, 48(%rsp)
+	leaq	.L__unnamed_75(%rip), %rsi
+	leaq	24(%rsp), %rdi
+	callq	*_ZN4core9panicking9panic_fmt17h979245e2fdb2fabdE@GOTPCREL(%rip)
+	ud2
+.LBB46_41:
+	leaq	.L__unnamed_76(%rip), %rdi
+	leaq	.L__unnamed_77(%rip), %rdx
+	movl	$39, %esi
+	callq	*_ZN4core9panicking5panic17hcad0f3a89a1b36aaE@GOTPCREL(%rip)
+	ud2
+.LBB46_42:
+	leaq	.L__unnamed_78(%rip), %rdi
+	leaq	.L__unnamed_79(%rip), %rdx
+	movl	$28, %esi
+	callq	*_ZN4core9panicking5panic17hcad0f3a89a1b36aaE@GOTPCREL(%rip)
+	ud2
+.LBB46_44:
+	leaq	.L__unnamed_80(%rip), %rdi
+	leaq	.L__unnamed_81(%rip), %rdx
+	movl	$40, %esi
+	callq	*_ZN4core9panicking5panic17hcad0f3a89a1b36aaE@GOTPCREL(%rip)
+	ud2
+.LBB46_45:
+	callq	*_ZN5alloc7raw_vec17capacity_overflow17h7596d82a86d51ab8E@GOTPCREL(%rip)
+	ud2
+.LBB46_40:
+	movq	$0, 24(%rsp)
+.Ltmp8:
+	leaq	.L__unnamed_82(%rip), %rcx
+	leaq	16(%rsp), %rdi
+	movq	%rsp, %rsi
+	leaq	24(%rsp), %rdx
+	callq	_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E
+.Ltmp9:
+.LBB46_30:
+	ud2
+.LBB46_46:
+	movl	$2, %edi
+	movq	%r14, %rsi
+	callq	*_ZN5alloc5alloc18handle_alloc_error17h6c194ef306599f55E@GOTPCREL(%rip)
+	ud2
+.LBB46_31:
+.Ltmp15:
+	movq	%rax, %r14
+	movq	%r13, %rdi
+	movq	%rbx, %rsi
+	callq	_ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E
+	jmp	.LBB46_23
+.LBB46_22:
+.Ltmp12:
+	movq	%rax, %r14
+.LBB46_23:
+	movq	%r12, %rdi
+	movq	%rbx, %rsi
+	callq	_ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E
+	movq	%r14, %rdi
+	callq	_Unwind_Resume@PLT
+	ud2
+.Lfunc_end46:
+	.size	_ZN22reed_solomon_novelpoly5field5f2e1616encode_sub_plain17h9331897333b8bb31E, .Lfunc_end46-_ZN22reed_solomon_novelpoly5field5f2e1616encode_sub_plain17h9331897333b8bb31E
+	.cfi_endproc
+	.section	.gcc_except_table._ZN22reed_solomon_novelpoly5field5f2e1616encode_sub_plain17h9331897333b8bb31E,"a",@progbits
+	.p2align	2, 0x0
+GCC_except_table46:
+.Lexception2:
+	.byte	255
+	.byte	255
+	.byte	1
+	.uleb128 .Lcst_end2-.Lcst_begin2
+.Lcst_begin2:
+	.uleb128 .Lfunc_begin2-.Lfunc_begin2
+	.uleb128 .Ltmp10-.Lfunc_begin2
+	.byte	0
+	.byte	0
+	.uleb128 .Ltmp10-.Lfunc_begin2
+	.uleb128 .Ltmp11-.Ltmp10
+	.uleb128 .Ltmp12-.Lfunc_begin2
+	.byte	0
+	.uleb128 .Ltmp11-.Lfunc_begin2
+	.uleb128 .Ltmp13-.Ltmp11
+	.byte	0
+	.byte	0
+	.uleb128 .Ltmp13-.Lfunc_begin2
+	.uleb128 .Ltmp14-.Ltmp13
+	.uleb128 .Ltmp15-.Lfunc_begin2
+	.byte	0
+	.uleb128 .Ltmp6-.Lfunc_begin2
+	.uleb128 .Ltmp7-.Ltmp6
+	.uleb128 .Ltmp12-.Lfunc_begin2
+	.byte	0
+	.uleb128 .Ltmp7-.Lfunc_begin2
+	.uleb128 .Ltmp8-.Ltmp7
+	.byte	0
+	.byte	0
+	.uleb128 .Ltmp8-.Lfunc_begin2
+	.uleb128 .Ltmp9-.Ltmp8
+	.uleb128 .Ltmp12-.Lfunc_begin2
+	.byte	0
+	.uleb128 .Ltmp9-.Lfunc_begin2
+	.uleb128 .Lfunc_end46-.Ltmp9
+	.byte	0
+	.byte	0
+.Lcst_end2:
+	.p2align	2, 0x0
+
+	.section	.text._ZN22reed_solomon_novelpoly5field5f2e1615reconstruct_sub17h6cfdcf216ebb8331E,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly5field5f2e1615reconstruct_sub17h6cfdcf216ebb8331E
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly5field5f2e1615reconstruct_sub17h6cfdcf216ebb8331E,@function
+_ZN22reed_solomon_novelpoly5field5f2e1615reconstruct_sub17h6cfdcf216ebb8331E:
+.Lfunc_begin3:
+	.cfi_startproc
+	.cfi_personality 155, DW.ref.rust_eh_personality
+	.cfi_lsda 27, .Lexception3
+	pushq	%rbp
+	.cfi_def_cfa_offset 16
+	pushq	%r15
+	.cfi_def_cfa_offset 24
+	pushq	%r14
+	.cfi_def_cfa_offset 32
+	pushq	%r13
+	.cfi_def_cfa_offset 40
+	pushq	%r12
+	.cfi_def_cfa_offset 48
+	pushq	%rbx
+	.cfi_def_cfa_offset 56
+	subq	$104, %rsp
+	.cfi_def_cfa_offset 160
+	.cfi_offset %rbx, -56
+	.cfi_offset %r12, -48
+	.cfi_offset %r13, -40
+	.cfi_offset %r14, -32
+	.cfi_offset %r15, -24
+	.cfi_offset %rbp, -16
+	movq	%rcx, %r13
+	movq	%r9, 72(%rsp)
+	leaq	-1(%r9), %rax
+	testq	%rax, %r9
+	sete	%al
+	testq	%r9, %r9
+	setne	%cl
+	testb	%al, %cl
+	je	.LBB47_87
+	movq	160(%rsp), %r14
+	leaq	-1(%r14), %rax
+	testq	%rax, %r14
+	sete	%al
+	testq	%r14, %r14
+	setne	%cl
+	testb	%al, %cl
+	je	.LBB47_88
+	movq	%r9, %r12
+	movq	%rdx, 16(%rsp)
+	cmpq	%rdx, %r9
+	jne	.LBB47_89
+	movq	%r12, %rax
+	shrq	%rax
+	cmpq	%r14, %rax
+	jb	.LBB47_90
+	movq	%r14, %rax
+	shrq	$62, %rax
+	jne	.LBB47_91
+	movq	%r8, %rbp
+	movq	%rsi, %rbx
+	movq	%rdi, 88(%rsp)
+	movq	%r14, %rdi
+	addq	%r14, %rdi
+	movq	%rdi, (%rsp)
+	je	.LBB47_13
+	movq	__rust_no_alloc_shim_is_unstable@GOTPCREL(%rip), %rax
+	movzbl	(%rax), %eax
+	movl	$2, %esi
+	callq	*__rust_alloc@GOTPCREL(%rip)
+	movq	%rax, %r15
+	testq	%rax, %rax
+	je	.LBB47_96
+	movq	%r15, %rax
+	cmpq	$2, %r14
+	jb	.LBB47_9
+.LBB47_8:
+	movq	(%rsp), %r14
+	leaq	-2(%r14), %rdx
+	movq	%r15, %rdi
+	xorl	%esi, %esi
+	callq	*memset@GOTPCREL(%rip)
+	leaq	(%r15,%r14), %rax
+	addq	$-2, %rax
+	movq	160(%rsp), %r14
+.LBB47_9:
+	movw	$0, (%rax)
+	testq	%r12, %r12
+	movq	%r12, 8(%rsp)
+	je	.LBB47_14
+	leaq	(%r12,%r12), %rdi
+	movq	__rust_no_alloc_shim_is_unstable@GOTPCREL(%rip), %rax
+	movzbl	(%rax), %eax
+	movl	$2, %esi
+	movq	%rdi, 80(%rsp)
+	callq	*__rust_alloc@GOTPCREL(%rip)
+	testq	%rax, %rax
+	je	.LBB47_97
+	movq	%r12, %rcx
+	movq	%rax, %r12
+	cmpq	$1, %rcx
+	jne	.LBB47_15
+	xorl	%eax, %eax
+	testb	$1, 8(%rsp)
+	jne	.LBB47_26
+	jmp	.LBB47_31
+.LBB47_13:
+	movl	$2, %r15d
+	movq	%r15, %rax
+	cmpq	$2, %r14
+	jae	.LBB47_8
+	jmp	.LBB47_9
+.LBB47_14:
+	movl	$2, %r12d
+	jmp	.LBB47_31
+.LBB47_15:
+	andq	$-2, %rcx
+	xorl	%edx, %edx
+	jmp	.LBB47_17
+	.p2align	4, 0x90
+.LBB47_16:
+	movw	%si, 2(%r12,%rax,2)
+	incq	%rdx
+	cmpq	%rcx, %rdx
+	je	.LBB47_25
+.LBB47_17:
+	movq	%rdx, %rax
+	movzwl	(%rbx,%rdx,4), %edx
+	testw	%dx, %dx
+	je	.LBB47_18
+	movzwl	2(%rbx,%rax,4), %edx
+	cmpq	%r14, %rax
+	jb	.LBB47_22
+.LBB47_19:
+	movw	%dx, (%r12,%rax,2)
+	movzwl	4(%rbx,%rax,4), %esi
+	testw	%si, %si
+	je	.LBB47_20
+.LBB47_23:
+	movzwl	6(%rbx,%rax,4), %esi
+	leaq	1(%rax), %rdx
+	cmpq	%r14, %rdx
+	jae	.LBB47_16
+	jmp	.LBB47_24
+	.p2align	4, 0x90
+.LBB47_18:
+	cmpq	%r14, %rax
+	jae	.LBB47_19
+.LBB47_22:
+	movw	%dx, (%r15,%rax,2)
+	movw	%dx, (%r12,%rax,2)
+	movzwl	4(%rbx,%rax,4), %esi
+	testw	%si, %si
+	jne	.LBB47_23
+.LBB47_20:
+	leaq	1(%rax), %rdx
+	cmpq	%r14, %rdx
+	jae	.LBB47_16
+.LBB47_24:
+	movw	%si, 2(%r15,%rax,2)
+	jmp	.LBB47_16
+.LBB47_25:
+	addq	$2, %rax
+	testb	$1, 8(%rsp)
+	je	.LBB47_31
+.LBB47_26:
+	movzwl	(%rbx,%rax,4), %ecx
+	testw	%cx, %cx
+	je	.LBB47_28
+	movzwl	2(%rbx,%rax,4), %ecx
+.LBB47_28:
+	cmpq	%r14, %rax
+	jae	.LBB47_30
+	movw	%cx, (%r15,%rax,2)
+.LBB47_30:
+	movw	%cx, (%r12,%rax,2)
+.LBB47_31:
+	movq	8(%rsp), %rax
+	movq	%rax, 16(%rsp)
+	cmpq	%rax, 72(%rsp)
+	jne	.LBB47_92
+	movq	%rax, 96(%rsp)
+	cmpq	%r14, %rax
+	jb	.LBB47_93
+	movq	%rbp, 16(%rsp)
+	cmpq	%rbp, %rax
+	jne	.LBB47_94
+	testq	%rbp, %rbp
+	je	.LBB47_44
+	xorl	%edi, %edi
+	leaq	.L__unnamed_83(%rip), %rax
+	movq	_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E@GOTPCREL(%rip), %rcx
+	leaq	.L__unnamed_45(%rip), %rdx
+	jmp	.LBB47_38
+	.p2align	4, 0x90
+.LBB47_36:
+	xorl	%esi, %esi
+	movw	%si, (%r12,%rdi,2)
+	incq	%rdi
+	cmpq	%rdi, %rbp
+	je	.LBB47_44
+.LBB47_38:
+	cmpb	$0, (%r13,%rdi)
+	jne	.LBB47_36
+	cmpq	$65535, %rdi
+	ja	.LBB47_85
+	movzwl	(%r12,%rdi,2), %esi
+	testq	%rsi, %rsi
+	je	.LBB47_36
+	movq	168(%rsp), %r8
+	movzwl	(%r8,%rdi,2), %r8d
+	movzwl	(%rcx,%rsi,2), %esi
+	addq	%r8, %rsi
+	movzwl	%si, %r8d
+	shrl	$16, %esi
+	addq	%r8, %rsi
+	cmpl	$65535, %esi
+	ja	.LBB47_83
+	movzwl	131072(%rcx,%rsi,2), %esi
+	movw	%si, (%r12,%rdi,2)
+	incq	%rdi
+	cmpq	%rdi, %rbp
+	jne	.LBB47_38
+.LBB47_44:
+.Ltmp21:
+	movq	_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E@GOTPCREL(%rip), %rdi
+	movq	%r12, %rsi
+	movq	%rbp, %rdx
+	movq	%rbp, %rcx
+	xorl	%r8d, %r8d
+	callq	*_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT12inverse_afft17h4d44ad96eac2020aE@GOTPCREL(%rip)
+.Ltmp22:
+.Ltmp23:
+	movq	%r12, %rdi
+	movq	%rbp, %rsi
+	movq	%rbp, %rdx
+	callq	*_ZN22reed_solomon_novelpoly5field5f2e1617formal_derivative17hd0977a8b62f3cbd2E@GOTPCREL(%rip)
+.Ltmp24:
+.Ltmp25:
+	movq	_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E@GOTPCREL(%rip), %rbx
+	movq	%rbx, %rdi
+	movq	%r12, %rsi
+	movq	%rbp, %rdx
+	movq	%rbp, %rcx
+	xorl	%r8d, %r8d
+	callq	*_ZN22reed_solomon_novelpoly5field5f2e1611AdditiveFFT4afft17h48fb535882d96dacE@GOTPCREL(%rip)
+.Ltmp26:
+	testq	%r14, %r14
+	je	.LBB47_72
+	xorl	%edi, %edi
+	leaq	.L__unnamed_84(%rip), %rax
+	leaq	.L__unnamed_45(%rip), %rdx
+	jmp	.LBB47_51
+	.p2align	4, 0x90
+.LBB47_49:
+	xorl	%ecx, %ecx
+	movw	%cx, (%r12,%rdi,2)
+	incq	%rdi
+	cmpq	%rdi, %r14
+	je	.LBB47_57
+.LBB47_51:
+	cmpb	$0, (%r13,%rdi)
+	je	.LBB47_49
+	cmpq	$65536, %rdi
+	jae	.LBB47_85
+	movzwl	(%r12,%rdi,2), %ecx
+	testq	%rcx, %rcx
+	je	.LBB47_49
+	movq	168(%rsp), %rsi
+	movzwl	(%rsi,%rdi,2), %esi
+	movzwl	(%rbx,%rcx,2), %ecx
+	addq	%rsi, %rcx
+	movzwl	%cx, %esi
+	shrl	$16, %ecx
+	addq	%rsi, %rcx
+	cmpl	$65535, %ecx
+	ja	.LBB47_83
+	movzwl	131072(%rbx,%rcx,2), %ecx
+	movw	%cx, (%r12,%rdi,2)
+	incq	%rdi
+	cmpq	%rdi, %r14
+	jne	.LBB47_51
+.LBB47_57:
+	testq	%r14, %r14
+	je	.LBB47_72
+	cmpq	$1, %r14
+	jne	.LBB47_77
+	xorl	%ecx, %ecx
+.LBB47_60:
+	testb	$1, %r14b
+	je	.LBB47_63
+	cmpb	$0, (%r13,%rcx)
+	je	.LBB47_63
+	movzwl	(%r12,%rcx,2), %eax
+	movw	%ax, (%r15,%rcx,2)
+.LBB47_63:
+	testq	%r14, %r14
+	je	.LBB47_72
+	movq	(%rsp), %rbp
+	testq	%rbp, %rbp
+	js	.LBB47_98
+	movq	__rust_no_alloc_shim_is_unstable@GOTPCREL(%rip), %rax
+	movzbl	(%rax), %eax
+	movl	$1, %esi
+	movq	%rbp, %rdi
+	callq	*__rust_alloc@GOTPCREL(%rip)
+	testq	%rax, %rax
+	je	.LBB47_99
+	movq	%rax, 24(%rsp)
+	movq	%rbp, 32(%rsp)
+	movq	$0, 40(%rsp)
+	xorl	%r13d, %r13d
+	xorl	%esi, %esi
+	jmp	.LBB47_68
+	.p2align	4, 0x90
+.LBB47_67:
+	rolw	$8, %bx
+	movw	%bx, (%rax,%rsi)
+	addq	$2, %rsi
+	movq	%rsi, 40(%rsp)
+	incq	%r13
+	addq	$-2, %rbp
+	cmpq	%r13, %r14
+	je	.LBB47_73
+.LBB47_68:
+	testq	%rbp, %rbp
+	je	.LBB47_73
+	movzwl	(%r15,%r13,2), %ebx
+	movq	32(%rsp), %rcx
+	subq	%rsi, %rcx
+	cmpq	$1, %rcx
+	ja	.LBB47_67
+.Ltmp29:
+	movl	$2, %edx
+	leaq	24(%rsp), %rdi
+	callq	_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h9df8d8a6ecfddd52E
+.Ltmp30:
+	movq	24(%rsp), %rax
+	movq	40(%rsp), %rsi
+	jmp	.LBB47_67
+.LBB47_72:
+	movq	$1, 24(%rsp)
+	movq	(%rsp), %rax
+	movq	%rax, 32(%rsp)
+	movq	$0, 40(%rsp)
+	jmp	.LBB47_74
+.LBB47_73:
+	movl	$2, %edx
+	movq	%r15, %rdi
+	movq	(%rsp), %rsi
+	callq	*__rust_dealloc@GOTPCREL(%rip)
+.LBB47_74:
+	movq	40(%rsp), %rax
+	movq	88(%rsp), %rbx
+	movq	%rax, 24(%rbx)
+	movq	24(%rsp), %rax
+	movq	%rax, 8(%rbx)
+	movq	32(%rsp), %rax
+	movq	%rax, 16(%rbx)
+	movq	$7, (%rbx)
+	movq	8(%rsp), %rsi
+	testq	%rsi, %rsi
+	je	.LBB47_76
+	addq	%rsi, %rsi
+	movl	$2, %edx
+	movq	%r12, %rdi
+	callq	*__rust_dealloc@GOTPCREL(%rip)
+.LBB47_76:
+	movq	%rbx, %rax
+	addq	$104, %rsp
+	.cfi_def_cfa_offset 56
+	popq	%rbx
+	.cfi_def_cfa_offset 48
+	popq	%r12
+	.cfi_def_cfa_offset 40
+	popq	%r13
+	.cfi_def_cfa_offset 32
+	popq	%r14
+	.cfi_def_cfa_offset 24
+	popq	%r15
+	.cfi_def_cfa_offset 16
+	popq	%rbp
+	.cfi_def_cfa_offset 8
+	retq
+.LBB47_77:
+	.cfi_def_cfa_offset 160
+	movq	%r14, %rax
+	andq	$-2, %rax
+	xorl	%edx, %edx
+	jmp	.LBB47_79
+	.p2align	4, 0x90
+.LBB47_78:
+	movq	%rcx, %rdx
+	cmpq	%rcx, %rax
+	je	.LBB47_60
+.LBB47_79:
+	cmpb	$0, (%r13,%rdx)
+	je	.LBB47_81
+	movzwl	(%r12,%rdx,2), %ecx
+	movw	%cx, (%r15,%rdx,2)
+.LBB47_81:
+	leaq	2(%rdx), %rcx
+	cmpb	$0, 1(%r13,%rdx)
+	je	.LBB47_78
+	movzwl	-2(%r12,%rcx,2), %edx
+	movw	%dx, -2(%r15,%rcx,2)
+	jmp	.LBB47_78
+.LBB47_85:
+	movq	%rax, %rdx
+	jmp	.LBB47_86
+.LBB47_83:
+	movl	$65536, %edi
+.LBB47_86:
+.Ltmp27:
+	movl	$65536, %esi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+.Ltmp28:
+	jmp	.LBB47_100
+.LBB47_87:
+	leaq	.L__unnamed_72(%rip), %rax
+	movq	%rax, 24(%rsp)
+	movq	$1, 32(%rsp)
+	leaq	.L__unnamed_10(%rip), %rax
+	movq	%rax, 40(%rsp)
+	xorps	%xmm0, %xmm0
+	movups	%xmm0, 48(%rsp)
+	leaq	.L__unnamed_85(%rip), %rsi
+	leaq	24(%rsp), %rdi
+	callq	*_ZN4core9panicking9panic_fmt17h979245e2fdb2fabdE@GOTPCREL(%rip)
+	ud2
+.LBB47_88:
+	leaq	.L__unnamed_74(%rip), %rax
+	movq	%rax, 24(%rsp)
+	movq	$1, 32(%rsp)
+	leaq	.L__unnamed_10(%rip), %rax
+	movq	%rax, 40(%rsp)
+	xorps	%xmm0, %xmm0
+	movups	%xmm0, 48(%rsp)
+	leaq	.L__unnamed_86(%rip), %rsi
+	leaq	24(%rsp), %rdi
+	callq	*_ZN4core9panicking9panic_fmt17h979245e2fdb2fabdE@GOTPCREL(%rip)
+	ud2
+.LBB47_89:
+	movq	$0, 24(%rsp)
+	leaq	.L__unnamed_87(%rip), %rcx
+	leaq	16(%rsp), %rdi
+	leaq	72(%rsp), %rsi
+	leaq	24(%rsp), %rdx
+	callq	_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E
+	ud2
+.LBB47_90:
+	leaq	.L__unnamed_78(%rip), %rdi
+	leaq	.L__unnamed_88(%rip), %rdx
+	movl	$28, %esi
+	callq	*_ZN4core9panicking5panic17hcad0f3a89a1b36aaE@GOTPCREL(%rip)
+	ud2
+.LBB47_91:
+	callq	*_ZN5alloc7raw_vec17capacity_overflow17h7596d82a86d51ab8E@GOTPCREL(%rip)
+	ud2
+.LBB47_92:
+	movq	$0, 24(%rsp)
+	leaq	.L__unnamed_89(%rip), %rcx
+	leaq	24(%rsp), %rdx
+	leaq	72(%rsp), %rsi
+	jmp	.LBB47_95
+.LBB47_93:
+.Ltmp36:
+	leaq	.L__unnamed_90(%rip), %rdi
+	leaq	.L__unnamed_91(%rip), %rdx
+	movl	$36, %esi
+	callq	*_ZN4core9panicking5panic17hcad0f3a89a1b36aaE@GOTPCREL(%rip)
+.Ltmp37:
+	jmp	.LBB47_100
+.LBB47_94:
+	movq	$0, 24(%rsp)
+	leaq	.L__unnamed_92(%rip), %rcx
+	leaq	24(%rsp), %rdx
+	leaq	96(%rsp), %rsi
+.LBB47_95:
+	leaq	16(%rsp), %rdi
+.Ltmp19:
+	callq	_ZN4core9panicking13assert_failed17h2eb4a3d2a33e0297E
+.Ltmp20:
+	jmp	.LBB47_100
+.LBB47_96:
+	movl	$2, %edi
+	movq	(%rsp), %rsi
+	callq	*_ZN5alloc5alloc18handle_alloc_error17h6c194ef306599f55E@GOTPCREL(%rip)
+	ud2
+.LBB47_97:
+.Ltmp16:
+	movl	$2, %edi
+	movq	80(%rsp), %rsi
+	callq	*_ZN5alloc5alloc18handle_alloc_error17h6c194ef306599f55E@GOTPCREL(%rip)
+.Ltmp17:
+	jmp	.LBB47_100
+.LBB47_98:
+.Ltmp34:
+	callq	*_ZN5alloc7raw_vec17capacity_overflow17h7596d82a86d51ab8E@GOTPCREL(%rip)
+.Ltmp35:
+	jmp	.LBB47_100
+.LBB47_99:
+.Ltmp32:
+	movl	$1, %edi
+	movq	%rbp, %rsi
+	callq	*_ZN5alloc5alloc18handle_alloc_error17h6c194ef306599f55E@GOTPCREL(%rip)
+.Ltmp33:
+.LBB47_100:
+	ud2
+.LBB47_101:
+.Ltmp18:
+	movq	%rax, %rbx
+	jmp	.LBB47_104
+.LBB47_102:
+.Ltmp31:
+	movq	%rax, %rbx
+	movq	%r15, %rdi
+	movq	%r14, %rsi
+	callq	_ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E
+	movq	24(%rsp), %rdi
+	movq	32(%rsp), %rsi
+	callq	_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17h01244c5b000d92deE
+	movq	%r12, %rdi
+	movq	8(%rsp), %rsi
+	callq	_ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E
+	movq	%rbx, %rdi
+	callq	_Unwind_Resume@PLT
+	ud2
+.LBB47_103:
+.Ltmp38:
+	movq	%rax, %rbx
+	movq	%r12, %rdi
+	movq	8(%rsp), %rsi
+	callq	_ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E
+.LBB47_104:
+	movq	%r15, %rdi
+	movq	%r14, %rsi
+	callq	_ZN4core3ptr146drop_in_place$LT$core..iter..adapters..take..Take$LT$alloc..vec..into_iter..IntoIter$LT$reed_solomon_novelpoly..field..f2e16..Additive$GT$$GT$$GT$17h34fa584acf240cf2E
+	movq	%rbx, %rdi
+	callq	_Unwind_Resume@PLT
+	ud2
+.Lfunc_end47:
+	.size	_ZN22reed_solomon_novelpoly5field5f2e1615reconstruct_sub17h6cfdcf216ebb8331E, .Lfunc_end47-_ZN22reed_solomon_novelpoly5field5f2e1615reconstruct_sub17h6cfdcf216ebb8331E
+	.cfi_endproc
+	.section	.gcc_except_table._ZN22reed_solomon_novelpoly5field5f2e1615reconstruct_sub17h6cfdcf216ebb8331E,"a",@progbits
+	.p2align	2, 0x0
+GCC_except_table47:
+.Lexception3:
+	.byte	255
+	.byte	255
+	.byte	1
+	.uleb128 .Lcst_end3-.Lcst_begin3
+.Lcst_begin3:
+	.uleb128 .Lfunc_begin3-.Lfunc_begin3
+	.uleb128 .Ltmp21-.Lfunc_begin3
+	.byte	0
+	.byte	0
+	.uleb128 .Ltmp21-.Lfunc_begin3
+	.uleb128 .Ltmp26-.Ltmp21
+	.uleb128 .Ltmp38-.Lfunc_begin3
+	.byte	0
+	.uleb128 .Ltmp29-.Lfunc_begin3
+	.uleb128 .Ltmp30-.Ltmp29
+	.uleb128 .Ltmp31-.Lfunc_begin3
+	.byte	0
+	.uleb128 .Ltmp27-.Lfunc_begin3
+	.uleb128 .Ltmp28-.Ltmp27
+	.uleb128 .Ltmp38-.Lfunc_begin3
+	.byte	0
+	.uleb128 .Ltmp28-.Lfunc_begin3
+	.uleb128 .Ltmp36-.Ltmp28
+	.byte	0
+	.byte	0
+	.uleb128 .Ltmp36-.Lfunc_begin3
+	.uleb128 .Ltmp20-.Ltmp36
+	.uleb128 .Ltmp38-.Lfunc_begin3
+	.byte	0
+	.uleb128 .Ltmp20-.Lfunc_begin3
+	.uleb128 .Ltmp16-.Ltmp20
+	.byte	0
+	.byte	0
+	.uleb128 .Ltmp16-.Lfunc_begin3
+	.uleb128 .Ltmp17-.Ltmp16
+	.uleb128 .Ltmp18-.Lfunc_begin3
+	.byte	0
+	.uleb128 .Ltmp34-.Lfunc_begin3
+	.uleb128 .Ltmp33-.Ltmp34
+	.uleb128 .Ltmp38-.Lfunc_begin3
+	.byte	0
+	.uleb128 .Ltmp33-.Lfunc_begin3
+	.uleb128 .Lfunc_end47-.Ltmp33
+	.byte	0
+	.byte	0
+.Lcst_end3:
+	.p2align	2, 0x0
+
+	.section	.rodata.cst16,"aM",@progbits,16
+	.p2align	4, 0x0
+.LCPI48_0:
+	.long	65535
+	.long	65535
+	.long	65535
+	.long	65535
+.LCPI48_1:
+	.long	2147516417
+	.long	2147516417
+	.long	2147516417
+	.long	2147516417
+	.section	.text._ZN22reed_solomon_novelpoly5field5f2e1621eval_error_polynomial17h6c3e4518c1dd7300E,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly5field5f2e1621eval_error_polynomial17h6c3e4518c1dd7300E
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly5field5f2e1621eval_error_polynomial17h6c3e4518c1dd7300E,@function
+_ZN22reed_solomon_novelpoly5field5f2e1621eval_error_polynomial17h6c3e4518c1dd7300E:
+	.cfi_startproc
+	pushq	%rbp
+	.cfi_def_cfa_offset 16
+	pushq	%r15
+	.cfi_def_cfa_offset 24
+	pushq	%r14
+	.cfi_def_cfa_offset 32
+	pushq	%r13
+	.cfi_def_cfa_offset 40
+	pushq	%r12
+	.cfi_def_cfa_offset 48
+	pushq	%rbx
+	.cfi_def_cfa_offset 56
+	subq	$88, %rsp
+	.cfi_def_cfa_offset 144
+	.cfi_offset %rbx, -56
+	.cfi_offset %r12, -48
+	.cfi_offset %r13, -40
+	.cfi_offset %r14, -32
+	.cfi_offset %r15, -24
+	.cfi_offset %rbp, -16
+	cmpq	%rsi, %r8
+	movq	%rsi, %r10
+	cmovbq	%r8, %r10
+	testq	%r10, %r10
+	je	.LBB48_5
+	leaq	-1(%r10), %rax
+	cmpq	%rax, %rcx
+	cmovbq	%rcx, %rax
+	incq	%rax
+	cmpq	$8, %rax
+	ja	.LBB48_3
+	xorl	%eax, %eax
+	jmp	.LBB48_67
+.LBB48_3:
+	movl	%eax, %r11d
+	andl	$7, %r11d
+	movl	$8, %ebx
+	cmovneq	%r11, %rbx
+	subq	%rbx, %rax
+	xorl	%r11d, %r11d
+	pxor	%xmm0, %xmm0
+	.p2align	4, 0x90
+.LBB48_4:
+	movq	(%rdi,%r11), %xmm1
+	punpcklbw	%xmm0, %xmm1
+	movdqu	%xmm1, (%rdx,%r11,2)
+	addq	$8, %r11
+	cmpq	%r11, %rax
+	jne	.LBB48_4
+	.p2align	4, 0x90
+.LBB48_67:
+	cmpq	%rax, %rcx
+	je	.LBB48_68
+	movzbl	(%rdi,%rax), %r11d
+	movw	%r11w, (%rdx,%rax,2)
+	leaq	1(%rax), %r11
+	movq	%r11, %rax
+	cmpq	%r11, %r10
+	jne	.LBB48_67
+.LBB48_5:
+	cmpq	%rsi, %r8
+	jbe	.LBB48_7
+	movq	%r10, %rax
+	.p2align	4, 0x90
+.LBB48_64:
+	cmpq	%rcx, %rax
+	jae	.LBB48_65
+	movw	$0, (%rdx,%rax,2)
+	incq	%rax
+	cmpq	%rax, %r8
+	jne	.LBB48_64
+.LBB48_7:
+	movq	%r8, 72(%rsp)
+	movq	%r9, 80(%rsp)
+	movq	%r10, 56(%rsp)
+	movq	%rdi, 64(%rsp)
+	movl	$1, %r15d
+	pxor	%xmm1, %xmm1
+	movdqa	.LCPI48_0(%rip), %xmm0
+.LBB48_8:
+	leaq	(%r15,%r15), %r13
+	leaq	(,%r15,4), %r14
+	movq	%r13, %rax
+	negq	%rax
+	movq	%rax, 32(%rsp)
+	leaq	-1(%r15), %rax
+	movq	%rax, 8(%rsp)
+	leaq	2(,%r15,2), %rax
+	movq	%rax, 16(%rsp)
+	movq	%r15, %rsi
+	negq	%rsi
+	leaq	(%rdx,%r15,2), %r9
+	movq	%rdx, (%rsp)
+	xorl	%r10d, %r10d
+	xorl	%r8d, %r8d
+	movq	%r15, %rbx
+	xorl	%r12d, %r12d
+	movq	%r14, 24(%rsp)
+	.p2align	4, 0x90
+.LBB48_9:
+	cmpq	%rbx, %rcx
+	movq	%rbx, %rax
+	cmovaq	%rcx, %rax
+	movq	%rsi, 48(%rsp)
+	leaq	(%rax,%rsi), %r11
+	cmpq	%r12, %rcx
+	movq	%r12, %rdi
+	cmovaq	%rcx, %rdi
+	movq	%r10, 40(%rsp)
+	addq	%rdi, %r10
+	cmpq	%r10, %r11
+	cmovbq	%r11, %r10
+	movq	8(%rsp), %rsi
+	cmpq	%rsi, %r10
+	cmovaeq	%rsi, %r10
+	movq	32(%rsp), %rbp
+	imulq	%r8, %rbp
+	movq	%rbp, %r11
+	subq	%r15, %r11
+	addq	%r11, %rax
+	addq	%rbp, %rdi
+	cmpq	%rdi, %rax
+	cmovbq	%rax, %rdi
+	cmpq	%rsi, %rdi
+	cmovaeq	%rsi, %rdi
+	incq	%rdi
+	movq	%r12, %rax
+	cmpq	$8, %rdi
+	jbe	.LBB48_14
+	movq	%r14, %rax
+	imulq	%r8, %rax
+	movq	16(%rsp), %rsi
+	addq	%rdx, %rsi
+	addq	%rax, %rsi
+	cmpq	%rbx, %rcx
+	movq	%rbx, %r14
+	cmovaq	%rcx, %r14
+	addq	%r11, %r14
+	cmpq	%r12, %rcx
+	movq	%r12, %r11
+	cmovaq	%rcx, %r11
+	addq	%rbp, %r11
+	cmpq	%r11, %r14
+	cmovbq	%r14, %r11
+	movq	8(%rsp), %r14
+	cmpq	%r14, %r11
+	cmovaeq	%r14, %r11
+	leaq	(%rsi,%r11,2), %rsi
+	leaq	(%rdx,%rax), %r14
+	cmpq	%rsi, %r14
+	movq	24(%rsp), %r14
+	jae	.LBB48_12
+	leaq	(%rdx,%r13), %rsi
+	addq	%rax, %rsi
+	orq	$2, %rax
+	addq	%rdx, %rax
+	leaq	(%rax,%r11,2), %r11
+	movq	%r12, %rax
+	cmpq	%r11, %rsi
+	jb	.LBB48_14
+.LBB48_12:
+	movl	%edi, %esi
+	andl	$7, %esi
+	movl	$8, %eax
+	cmoveq	%rax, %rsi
+	subq	%rsi, %rdi
+	movq	%rdi, %rax
+	addq	%r12, %rax
+	subq	%rsi, %r10
+	incq	%r10
+	movq	(%rsp), %rdi
+	.p2align	4, 0x90
+.LBB48_13:
+	movdqu	(%rdi), %xmm4
+	movdqa	%xmm4, %xmm5
+	punpckhwd	%xmm1, %xmm5
+	punpcklwd	%xmm1, %xmm4
+	movdqu	(%rdi,%r13), %xmm6
+	movdqa	%xmm6, %xmm7
+	punpckhwd	%xmm1, %xmm7
+	punpcklwd	%xmm1, %xmm6
+	movdqa	%xmm4, %xmm2
+	psubd	%xmm6, %xmm2
+	paddd	%xmm0, %xmm2
+	movdqa	%xmm5, %xmm3
+	psubd	%xmm7, %xmm3
+	paddd	%xmm0, %xmm3
+	paddd	%xmm4, %xmm6
+	paddd	%xmm5, %xmm7
+	movdqa	%xmm7, %xmm4
+	psrld	$16, %xmm4
+	movdqa	%xmm6, %xmm5
+	psrld	$16, %xmm5
+	paddd	%xmm6, %xmm5
+	paddd	%xmm7, %xmm4
+	pslld	$16, %xmm4
+	psrad	$16, %xmm4
+	pslld	$16, %xmm5
+	psrad	$16, %xmm5
+	packssdw	%xmm4, %xmm5
+	movdqu	%xmm5, (%rdi)
+	movdqa	%xmm3, %xmm4
+	psrld	$16, %xmm4
+	movdqa	%xmm2, %xmm5
+	psrld	$16, %xmm5
+	paddd	%xmm2, %xmm5
+	paddd	%xmm3, %xmm4
+	pslld	$16, %xmm4
+	psrad	$16, %xmm4
+	pslld	$16, %xmm5
+	psrad	$16, %xmm5
+	packssdw	%xmm4, %xmm5
+	movdqu	%xmm5, (%rdi,%r13)
+	addq	$16, %rdi
+	addq	$-8, %r10
+	jne	.LBB48_13
+	.p2align	4, 0x90
+.LBB48_14:
+	cmpq	%rcx, %rax
+	jae	.LBB48_52
+	leaq	(%r15,%rax), %r10
+	cmpq	%rcx, %r10
+	jae	.LBB48_55
+	movzwl	(%rdx,%rax,2), %esi
+	movzwl	(%r9,%rax,2), %edi
+	movl	%esi, %r10d
+	subl	%edi, %r10d
+	leal	65535(%r10), %r11d
+	addl	%esi, %edi
+	movl	%edi, %esi
+	shrl	$16, %esi
+	addl	%edi, %esi
+	movw	%si, (%rdx,%rax,2)
+	shrl	$16, %r11d
+	leal	(%r11,%r10), %esi
+	addl	$65535, %esi
+	movw	%si, (%r9,%rax,2)
+	incq	%rax
+	cmpq	%rax, %rbx
+	jne	.LBB48_14
+	addq	%r13, %r12
+	addq	%r13, %rbx
+	incq	%r8
+	movq	48(%rsp), %rsi
+	subq	%r13, %rsi
+	movq	40(%rsp), %r10
+	subq	%r13, %r10
+	addq	%r14, (%rsp)
+	cmpq	$65536, %r12
+	jb	.LBB48_9
+	cmpq	$32768, %r15
+	movq	%r13, %r15
+	jb	.LBB48_8
+	movq	72(%rsp), %r10
+	testq	%r10, %r10
+	movq	80(%rsp), %r9
+	movq	144(%rsp), %rdi
+	je	.LBB48_26
+	leaq	-1(%r10), %rax
+	cmpq	%rdi, %rcx
+	jbe	.LBB48_21
+	cmpq	%rax, %rdi
+	cmovbq	%rdi, %rax
+	incq	%rax
+	cmpq	$8, %rax
+	ja	.LBB48_50
+	xorl	%eax, %eax
+	jmp	.LBB48_47
+.LBB48_55:
+	leaq	.L__unnamed_38(%rip), %rdx
+	movq	%r10, %rdi
+	movq	%rcx, %rsi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB48_68:
+	leaq	.L__unnamed_93(%rip), %rdx
+	movq	%rcx, %rdi
+	movq	%rcx, %rsi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB48_21:
+	cmpq	%rax, %rcx
+	cmovbq	%rcx, %rax
+	incq	%rax
+	cmpq	$8, %rax
+	ja	.LBB48_43
+	xorl	%eax, %eax
+	jmp	.LBB48_23
+.LBB48_65:
+	leaq	.L__unnamed_94(%rip), %rdx
+	movq	%rax, %rdi
+	movq	%rcx, %rsi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB48_50:
+	movl	%eax, %esi
+	andl	$7, %esi
+	movl	$8, %r8d
+	cmovneq	%rsi, %r8
+	subq	%r8, %rax
+	xorl	%esi, %esi
+	movdqa	.LCPI48_1(%rip), %xmm1
+.LBB48_51:
+	movdqu	(%rdx,%rsi,2), %xmm2
+	movdqu	(%r9,%rsi,2), %xmm3
+	movdqa	%xmm3, %xmm4
+	pmulhuw	%xmm2, %xmm4
+	pmullw	%xmm2, %xmm3
+	movdqa	%xmm3, %xmm5
+	punpckhwd	%xmm4, %xmm5
+	punpcklwd	%xmm4, %xmm3
+	movdqa	%xmm3, %xmm2
+	pmuludq	%xmm1, %xmm2
+	pshufd	$237, %xmm2, %xmm2
+	pshufd	$245, %xmm3, %xmm4
+	pmuludq	%xmm1, %xmm4
+	pshufd	$237, %xmm4, %xmm4
+	punpckldq	%xmm4, %xmm2
+	psrld	$15, %xmm2
+	paddd	%xmm3, %xmm2
+	movdqa	%xmm5, %xmm3
+	pmuludq	%xmm1, %xmm3
+	pshufd	$237, %xmm3, %xmm3
+	pshufd	$245, %xmm5, %xmm4
+	pmuludq	%xmm1, %xmm4
+	pshufd	$237, %xmm4, %xmm4
+	punpckldq	%xmm4, %xmm3
+	psrld	$15, %xmm3
+	paddd	%xmm5, %xmm3
+	pslld	$16, %xmm3
+	psrad	$16, %xmm3
+	pslld	$16, %xmm2
+	psrad	$16, %xmm2
+	packssdw	%xmm3, %xmm2
+	movdqu	%xmm2, (%rdx,%rsi,2)
+	addq	$8, %rsi
+	cmpq	%rsi, %rax
+	jne	.LBB48_51
+.LBB48_47:
+	movl	$2147516417, %esi
+	.p2align	4, 0x90
+.LBB48_48:
+	cmpq	%rax, %rdi
+	je	.LBB48_49
+	movzwl	(%rdx,%rax,2), %r11d
+	movzwl	(%r9,%rax,2), %r8d
+	imull	%r11d, %r8d
+	movq	%r8, %r11
+	imulq	%rsi, %r11
+	shrq	$47, %r11
+	addl	%r8d, %r11d
+	movw	%r11w, (%rdx,%rax,2)
+	leaq	1(%rax), %r8
+	movq	%r8, %rax
+	cmpq	%r8, %r10
+	jne	.LBB48_48
+	jmp	.LBB48_26
+.LBB48_43:
+	movl	%eax, %esi
+	andl	$7, %esi
+	movl	$8, %edi
+	cmovneq	%rsi, %rdi
+	subq	%rdi, %rax
+	xorl	%esi, %esi
+	movdqa	.LCPI48_1(%rip), %xmm1
+.LBB48_44:
+	movdqu	(%rdx,%rsi,2), %xmm2
+	movdqu	(%r9,%rsi,2), %xmm3
+	movdqa	%xmm3, %xmm4
+	pmulhuw	%xmm2, %xmm4
+	pmullw	%xmm2, %xmm3
+	movdqa	%xmm3, %xmm5
+	punpckhwd	%xmm4, %xmm5
+	punpcklwd	%xmm4, %xmm3
+	movdqa	%xmm3, %xmm2
+	pmuludq	%xmm1, %xmm2
+	pshufd	$237, %xmm2, %xmm2
+	pshufd	$245, %xmm3, %xmm4
+	pmuludq	%xmm1, %xmm4
+	pshufd	$237, %xmm4, %xmm4
+	punpckldq	%xmm4, %xmm2
+	psrld	$15, %xmm2
+	paddd	%xmm3, %xmm2
+	movdqa	%xmm5, %xmm3
+	pmuludq	%xmm1, %xmm3
+	pshufd	$237, %xmm3, %xmm3
+	pshufd	$245, %xmm5, %xmm4
+	pmuludq	%xmm1, %xmm4
+	pshufd	$237, %xmm4, %xmm4
+	punpckldq	%xmm4, %xmm3
+	psrld	$15, %xmm3
+	paddd	%xmm5, %xmm3
+	pslld	$16, %xmm3
+	psrad	$16, %xmm3
+	pslld	$16, %xmm2
+	psrad	$16, %xmm2
+	packssdw	%xmm3, %xmm2
+	movdqu	%xmm2, (%rdx,%rsi,2)
+	addq	$8, %rsi
+	cmpq	%rsi, %rax
+	jne	.LBB48_44
+.LBB48_23:
+	movl	$2147516417, %esi
+	.p2align	4, 0x90
+.LBB48_24:
+	cmpq	%rax, %rcx
+	je	.LBB48_60
+	movzwl	(%rdx,%rax,2), %edi
+	movzwl	(%r9,%rax,2), %r8d
+	imull	%edi, %r8d
+	movq	%r8, %rdi
+	imulq	%rsi, %rdi
+	shrq	$47, %rdi
+	addl	%r8d, %edi
+	movw	%di, (%rdx,%rax,2)
+	leaq	1(%rax), %rdi
+	movq	%rdi, %rax
+	cmpq	%rdi, %r10
+	jne	.LBB48_24
+.LBB48_26:
+	movl	$1, %r10d
+	pxor	%xmm1, %xmm1
+.LBB48_27:
+	leaq	(%r10,%r10), %r14
+	leaq	(,%r10,4), %r13
+	movq	%r14, %rax
+	negq	%rax
+	movq	%rax, 32(%rsp)
+	leaq	-1(%r10), %rax
+	movq	%rax, 8(%rsp)
+	leaq	2(,%r10,2), %rax
+	movq	%rax, 16(%rsp)
+	movq	%r10, %rsi
+	negq	%rsi
+	leaq	(%rdx,%r10,2), %rbp
+	movq	%rdx, (%rsp)
+	xorl	%r9d, %r9d
+	xorl	%edi, %edi
+	movq	%r10, %r8
+	xorl	%ebx, %ebx
+	movq	%r13, 24(%rsp)
+	.p2align	4, 0x90
+.LBB48_28:
+	cmpq	%r8, %rcx
+	movq	%r8, %rax
+	cmovaq	%rcx, %rax
+	movq	%rsi, 48(%rsp)
+	leaq	(%rax,%rsi), %r11
+	cmpq	%rbx, %rcx
+	movq	%rbx, %r12
+	cmovaq	%rcx, %r12
+	movq	%r9, 40(%rsp)
+	leaq	(%r12,%r9), %rsi
+	cmpq	%rsi, %r11
+	cmovbq	%r11, %rsi
+	movq	8(%rsp), %r9
+	cmpq	%r9, %rsi
+	cmovaeq	%r9, %rsi
+	movq	32(%rsp), %r15
+	imulq	%rdi, %r15
+	movq	%r15, %r11
+	subq	%r10, %r11
+	addq	%r11, %rax
+	addq	%r15, %r12
+	cmpq	%r12, %rax
+	cmovbq	%rax, %r12
+	cmpq	%r9, %r12
+	cmovaeq	%r9, %r12
+	incq	%r12
+	movq	%rbx, %rax
+	cmpq	$8, %r12
+	jbe	.LBB48_33
+	movq	%r13, %rax
+	imulq	%rdi, %rax
+	movq	16(%rsp), %r9
+	addq	%rdx, %r9
+	addq	%rax, %r9
+	cmpq	%r8, %rcx
+	movq	%r8, %r13
+	cmovaq	%rcx, %r13
+	addq	%r11, %r13
+	cmpq	%rbx, %rcx
+	movq	%rbx, %r11
+	cmovaq	%rcx, %r11
+	addq	%r15, %r11
+	cmpq	%r11, %r13
+	cmovbq	%r13, %r11
+	movq	24(%rsp), %r13
+	movq	8(%rsp), %r15
+	cmpq	%r15, %r11
+	cmovaeq	%r15, %r11
+	leaq	(%r9,%r11,2), %r9
+	leaq	(%rdx,%rax), %r15
+	cmpq	%r9, %r15
+	jae	.LBB48_31
+	leaq	(%rdx,%r14), %r9
+	addq	%rax, %r9
+	orq	$2, %rax
+	addq	%rdx, %rax
+	leaq	(%rax,%r11,2), %r11
+	movq	%rbx, %rax
+	cmpq	%r11, %r9
+	jb	.LBB48_33
+.LBB48_31:
+	movl	%r12d, %r9d
+	andl	$7, %r9d
+	movl	$8, %eax
+	cmoveq	%rax, %r9
+	subq	%r9, %r12
+	movq	%r12, %rax
+	addq	%rbx, %rax
+	subq	%r9, %rsi
+	incq	%rsi
+	movq	(%rsp), %r12
+	.p2align	4, 0x90
+.LBB48_32:
+	movdqu	(%r12), %xmm4
+	movdqa	%xmm4, %xmm5
+	punpckhwd	%xmm1, %xmm5
+	punpcklwd	%xmm1, %xmm4
+	movdqu	(%r12,%r14), %xmm6
+	movdqa	%xmm6, %xmm7
+	punpckhwd	%xmm1, %xmm7
+	punpcklwd	%xmm1, %xmm6
+	movdqa	%xmm4, %xmm2
+	psubd	%xmm6, %xmm2
+	paddd	%xmm0, %xmm2
+	movdqa	%xmm5, %xmm3
+	psubd	%xmm7, %xmm3
+	paddd	%xmm0, %xmm3
+	paddd	%xmm4, %xmm6
+	paddd	%xmm5, %xmm7
+	movdqa	%xmm7, %xmm4
+	psrld	$16, %xmm4
+	movdqa	%xmm6, %xmm5
+	psrld	$16, %xmm5
+	paddd	%xmm6, %xmm5
+	paddd	%xmm7, %xmm4
+	pslld	$16, %xmm4
+	psrad	$16, %xmm4
+	pslld	$16, %xmm5
+	psrad	$16, %xmm5
+	packssdw	%xmm4, %xmm5
+	movdqu	%xmm5, (%r12)
+	movdqa	%xmm3, %xmm4
+	psrld	$16, %xmm4
+	movdqa	%xmm2, %xmm5
+	psrld	$16, %xmm5
+	paddd	%xmm2, %xmm5
+	paddd	%xmm3, %xmm4
+	pslld	$16, %xmm4
+	psrad	$16, %xmm4
+	pslld	$16, %xmm5
+	psrad	$16, %xmm5
+	packssdw	%xmm4, %xmm5
+	movdqu	%xmm5, (%r12,%r14)
+	addq	$16, %r12
+	addq	$-8, %rsi
+	jne	.LBB48_32
+	.p2align	4, 0x90
+.LBB48_33:
+	cmpq	%rcx, %rax
+	jae	.LBB48_52
+	leaq	(%r10,%rax), %rsi
+	cmpq	%rcx, %rsi
+	jae	.LBB48_56
+	movzwl	(%rdx,%rax,2), %esi
+	movzwl	(%rbp,%rax,2), %r9d
+	movl	%esi, %r11d
+	subl	%r9d, %r11d
+	leal	65535(%r11), %r15d
+	addl	%esi, %r9d
+	movl	%r9d, %esi
+	shrl	$16, %esi
+	addl	%r9d, %esi
+	movw	%si, (%rdx,%rax,2)
+	shrl	$16, %r15d
+	leal	(%r15,%r11), %esi
+	addl	$65535, %esi
+	movw	%si, (%rbp,%rax,2)
+	incq	%rax
+	cmpq	%rax, %r8
+	jne	.LBB48_33
+	addq	%r14, %rbx
+	addq	%r14, %r8
+	incq	%rdi
+	movq	48(%rsp), %rsi
+	subq	%r14, %rsi
+	movq	40(%rsp), %r9
+	subq	%r14, %r9
+	addq	%r13, (%rsp)
+	cmpq	$65536, %rbx
+	jb	.LBB48_28
+	cmpq	$32768, %r10
+	movq	%r14, %r10
+	jb	.LBB48_27
+	movq	56(%rsp), %rdi
+	testq	%rdi, %rdi
+	movq	64(%rsp), %rsi
+	je	.LBB48_42
+	xorl	%eax, %eax
+	jmp	.LBB48_40
+.LBB48_52:
+	leaq	.L__unnamed_37(%rip), %rdx
+	movq	%rax, %rdi
+	movq	%rcx, %rsi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB48_41:
+	incq	%rax
+	cmpq	%rax, %rdi
+	je	.LBB48_42
+.LBB48_40:
+	cmpb	$0, (%rsi,%rax)
+	je	.LBB48_41
+	cmpq	%rcx, %rax
+	jae	.LBB48_59
+	notw	(%rdx,%rax,2)
+	jmp	.LBB48_41
+.LBB48_56:
+	leaq	.L__unnamed_38(%rip), %rdx
+	movq	%rsi, %rdi
+	movq	%rcx, %rsi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB48_42:
+	addq	$88, %rsp
+	.cfi_def_cfa_offset 56
+	popq	%rbx
+	.cfi_def_cfa_offset 48
+	popq	%r12
+	.cfi_def_cfa_offset 40
+	popq	%r13
+	.cfi_def_cfa_offset 32
+	popq	%r14
+	.cfi_def_cfa_offset 24
+	popq	%r15
+	.cfi_def_cfa_offset 16
+	popq	%rbp
+	.cfi_def_cfa_offset 8
+	retq
+.LBB48_60:
+	.cfi_def_cfa_offset 144
+	leaq	.L__unnamed_95(%rip), %rdx
+	movq	%rcx, %rdi
+	movq	%rcx, %rsi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB48_59:
+	leaq	.L__unnamed_96(%rip), %rdx
+	movq	%rax, %rdi
+	movq	%rcx, %rsi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB48_49:
+	leaq	.L__unnamed_97(%rip), %rdx
+	movq	%rdi, %rsi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.Lfunc_end48:
+	.size	_ZN22reed_solomon_novelpoly5field5f2e1621eval_error_polynomial17h6c3e4518c1dd7300E, .Lfunc_end48-_ZN22reed_solomon_novelpoly5field5f2e1621eval_error_polynomial17h6c3e4518c1dd7300E
+	.cfi_endproc
+
+	.section	".text._ZN89_$LT$reed_solomon_novelpoly..novel_poly_basis..CodeParams$u20$as$u20$core..fmt..Debug$GT$3fmt17h30a235673ee44f14E","ax",@progbits
+	.globl	_ZN89_$LT$reed_solomon_novelpoly..novel_poly_basis..CodeParams$u20$as$u20$core..fmt..Debug$GT$3fmt17h30a235673ee44f14E
+	.p2align	4, 0x90
+	.type	_ZN89_$LT$reed_solomon_novelpoly..novel_poly_basis..CodeParams$u20$as$u20$core..fmt..Debug$GT$3fmt17h30a235673ee44f14E,@function
+_ZN89_$LT$reed_solomon_novelpoly..novel_poly_basis..CodeParams$u20$as$u20$core..fmt..Debug$GT$3fmt17h30a235673ee44f14E:
+	.cfi_startproc
+	pushq	%r15
+	.cfi_def_cfa_offset 16
+	pushq	%r14
+	.cfi_def_cfa_offset 24
+	pushq	%r12
+	.cfi_def_cfa_offset 32
+	pushq	%rbx
+	.cfi_def_cfa_offset 40
+	pushq	%rax
+	.cfi_def_cfa_offset 48
+	.cfi_offset %rbx, -40
+	.cfi_offset %r12, -32
+	.cfi_offset %r14, -24
+	.cfi_offset %r15, -16
+	movq	%rsi, %rax
+	movq	%rdi, %r9
+	leaq	8(%rdi), %r10
+	leaq	16(%rdi), %rcx
+	movq	%rcx, (%rsp)
+	subq	$8, %rsp
+	.cfi_adjust_cfa_offset 8
+	leaq	.L__unnamed_2(%rip), %r11
+	leaq	8(%rsp), %rbx
+	leaq	.L__unnamed_98(%rip), %r14
+	leaq	.L__unnamed_19(%rip), %r15
+	leaq	.L__unnamed_23(%rip), %r12
+	leaq	.L__unnamed_99(%rip), %rsi
+	leaq	.L__unnamed_25(%rip), %rcx
+	movl	$10, %edx
+	movl	$1, %r8d
+	movq	%rax, %rdi
+	pushq	%r11
+	.cfi_adjust_cfa_offset 8
+	pushq	%rbx
+	.cfi_adjust_cfa_offset 8
+	pushq	$8
+	.cfi_adjust_cfa_offset 8
+	pushq	%r14
+	.cfi_adjust_cfa_offset 8
+	pushq	%r15
+	.cfi_adjust_cfa_offset 8
+	pushq	%r10
+	.cfi_adjust_cfa_offset 8
+	pushq	$1
+	.cfi_adjust_cfa_offset 8
+	pushq	%r12
+	.cfi_adjust_cfa_offset 8
+	pushq	%r15
+	.cfi_adjust_cfa_offset 8
+	callq	*_ZN4core3fmt9Formatter26debug_struct_field3_finish17hb6f6e1d1fccb9bb5E@GOTPCREL(%rip)
+	addq	$88, %rsp
+	.cfi_adjust_cfa_offset -88
+	popq	%rbx
+	.cfi_def_cfa_offset 32
+	popq	%r12
+	.cfi_def_cfa_offset 24
+	popq	%r14
+	.cfi_def_cfa_offset 16
+	popq	%r15
+	.cfi_def_cfa_offset 8
+	retq
+.Lfunc_end49:
+	.size	_ZN89_$LT$reed_solomon_novelpoly..novel_poly_basis..CodeParams$u20$as$u20$core..fmt..Debug$GT$3fmt17h30a235673ee44f14E, .Lfunc_end49-_ZN89_$LT$reed_solomon_novelpoly..novel_poly_basis..CodeParams$u20$as$u20$core..fmt..Debug$GT$3fmt17h30a235673ee44f14E
+	.cfi_endproc
+
+	.section	".text._ZN90_$LT$reed_solomon_novelpoly..novel_poly_basis..ReedSolomon$u20$as$u20$core..fmt..Debug$GT$3fmt17h0d8222201d32c88aE","ax",@progbits
+	.globl	_ZN90_$LT$reed_solomon_novelpoly..novel_poly_basis..ReedSolomon$u20$as$u20$core..fmt..Debug$GT$3fmt17h0d8222201d32c88aE
+	.p2align	4, 0x90
+	.type	_ZN90_$LT$reed_solomon_novelpoly..novel_poly_basis..ReedSolomon$u20$as$u20$core..fmt..Debug$GT$3fmt17h0d8222201d32c88aE,@function
+_ZN90_$LT$reed_solomon_novelpoly..novel_poly_basis..ReedSolomon$u20$as$u20$core..fmt..Debug$GT$3fmt17h0d8222201d32c88aE:
+	.cfi_startproc
+	pushq	%r15
+	.cfi_def_cfa_offset 16
+	pushq	%r14
+	.cfi_def_cfa_offset 24
+	pushq	%r12
+	.cfi_def_cfa_offset 32
+	pushq	%rbx
+	.cfi_def_cfa_offset 40
+	pushq	%rax
+	.cfi_def_cfa_offset 48
+	.cfi_offset %rbx, -40
+	.cfi_offset %r12, -32
+	.cfi_offset %r14, -24
+	.cfi_offset %r15, -16
+	movq	%rsi, %rax
+	movq	%rdi, %r9
+	leaq	8(%rdi), %r10
+	leaq	16(%rdi), %rcx
+	movq	%rcx, (%rsp)
+	subq	$8, %rsp
+	.cfi_adjust_cfa_offset 8
+	leaq	.L__unnamed_2(%rip), %r11
+	leaq	8(%rsp), %rbx
+	leaq	.L__unnamed_98(%rip), %r14
+	leaq	.L__unnamed_19(%rip), %r15
+	leaq	.L__unnamed_23(%rip), %r12
+	leaq	.L__unnamed_100(%rip), %rsi
+	leaq	.L__unnamed_25(%rip), %rcx
+	movl	$11, %edx
+	movl	$1, %r8d
+	movq	%rax, %rdi
+	pushq	%r11
+	.cfi_adjust_cfa_offset 8
+	pushq	%rbx
+	.cfi_adjust_cfa_offset 8
+	pushq	$8
+	.cfi_adjust_cfa_offset 8
+	pushq	%r14
+	.cfi_adjust_cfa_offset 8
+	pushq	%r15
+	.cfi_adjust_cfa_offset 8
+	pushq	%r10
+	.cfi_adjust_cfa_offset 8
+	pushq	$1
+	.cfi_adjust_cfa_offset 8
+	pushq	%r12
+	.cfi_adjust_cfa_offset 8
+	pushq	%r15
+	.cfi_adjust_cfa_offset 8
+	callq	*_ZN4core3fmt9Formatter26debug_struct_field3_finish17hb6f6e1d1fccb9bb5E@GOTPCREL(%rip)
+	addq	$88, %rsp
+	.cfi_adjust_cfa_offset -88
+	popq	%rbx
+	.cfi_def_cfa_offset 32
+	popq	%r12
+	.cfi_def_cfa_offset 24
+	popq	%r14
+	.cfi_def_cfa_offset 16
+	popq	%r15
+	.cfi_def_cfa_offset 8
+	retq
+.Lfunc_end50:
+	.size	_ZN90_$LT$reed_solomon_novelpoly..novel_poly_basis..ReedSolomon$u20$as$u20$core..fmt..Debug$GT$3fmt17h0d8222201d32c88aE, .Lfunc_end50-_ZN90_$LT$reed_solomon_novelpoly..novel_poly_basis..ReedSolomon$u20$as$u20$core..fmt..Debug$GT$3fmt17h0d8222201d32c88aE
+	.cfi_endproc
+
+	.section	".text._ZN88_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..fmt..Debug$GT$3fmt17h056e564639bfd633E","ax",@progbits
+	.globl	_ZN88_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..fmt..Debug$GT$3fmt17h056e564639bfd633E
+	.p2align	4, 0x90
+	.type	_ZN88_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..fmt..Debug$GT$3fmt17h056e564639bfd633E,@function
+_ZN88_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..fmt..Debug$GT$3fmt17h056e564639bfd633E:
+	.cfi_startproc
+	subq	$24, %rsp
+	.cfi_def_cfa_offset 32
+	movq	%rsi, %rax
+	movq	%rdi, 16(%rsp)
+	leaq	.L__unnamed_101(%rip), %rcx
+	movq	%rcx, (%rsp)
+	leaq	.L__unnamed_102(%rip), %rsi
+	leaq	.L__unnamed_103(%rip), %rcx
+	leaq	16(%rsp), %r9
+	movl	$12, %edx
+	movl	$5, %r8d
+	movq	%rax, %rdi
+	callq	*_ZN4core3fmt9Formatter26debug_struct_field1_finish17he206a7683441c471E@GOTPCREL(%rip)
+	addq	$24, %rsp
+	.cfi_def_cfa_offset 8
+	retq
+.Lfunc_end51:
+	.size	_ZN88_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..fmt..Debug$GT$3fmt17h056e564639bfd633E, .Lfunc_end51-_ZN88_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..fmt..Debug$GT$3fmt17h056e564639bfd633E
+	.cfi_endproc
+
+	.section	.rodata.cst16,"aM",@progbits,16
+	.p2align	4, 0x0
+.LCPI52_0:
+	.short	0
+	.short	1
+	.short	44234
+	.short	44235
+	.short	15374
+	.short	15375
+	.short	37060
+	.short	37061
+.LCPI52_1:
+	.short	5694
+	.short	5695
+	.short	47860
+	.short	47861
+	.short	10800
+	.short	10801
+	.short	34554
+	.short	34555
+.LCPI52_2:
+	.short	50562
+	.short	50563
+	.short	26952
+	.short	26953
+	.short	63884
+	.short	63885
+	.short	21830
+	.short	21831
+.LCPI52_3:
+	.short	54204
+	.short	54205
+	.short	32630
+	.short	32631
+	.short	61362
+	.short	61363
+	.short	17272
+	.short	17273
+.LCPI52_4:
+	.short	60718
+	.short	60719
+	.short	16868
+	.short	16869
+	.short	53536
+	.short	53537
+	.short	32234
+	.short	32235
+.LCPI52_5:
+	.short	64272
+	.short	64273
+	.short	22490
+	.short	22491
+	.short	50974
+	.short	50975
+	.short	27604
+	.short	27605
+.LCPI52_6:
+	.short	10412
+	.short	10413
+	.short	33894
+	.short	33895
+	.short	5282
+	.short	5283
+	.short	47208
+	.short	47209
+.LCPI52_7:
+	.short	16018
+	.short	16019
+	.short	37464
+	.short	37465
+	.short	668
+	.short	669
+	.short	44630
+	.short	44631
+.LCPI52_8:
+	.short	37196
+	.short	37197
+	.short	15750
+	.short	15751
+	.short	44354
+	.short	44355
+	.short	392
+	.short	393
+.LCPI52_9:
+	.short	34674
+	.short	34675
+	.short	11192
+	.short	11193
+	.short	47996
+	.short	47997
+	.short	6070
+	.short	6071
+.LCPI52_10:
+	.short	21710
+	.short	21711
+	.short	63492
+	.short	63493
+	.short	26816
+	.short	26817
+	.short	50186
+	.short	50187
+.LCPI52_11:
+	.short	17136
+	.short	17137
+	.short	60986
+	.short	60987
+	.short	32510
+	.short	32511
+	.short	53812
+	.short	53813
+.LCPI52_12:
+	.short	31842
+	.short	31843
+	.short	53416
+	.short	53417
+	.short	16492
+	.short	16493
+	.short	60582
+	.short	60583
+.LCPI52_13:
+	.short	27228
+	.short	27229
+	.short	50838
+	.short	50839
+	.short	22098
+	.short	22099
+	.short	64152
+	.short	64153
+.LCPI52_14:
+	.short	47584
+	.short	47585
+	.short	5418
+	.short	5419
+	.short	34286
+	.short	34287
+	.short	10532
+	.short	10533
+.LCPI52_15:
+	.short	45022
+	.short	45023
+	.short	788
+	.short	789
+	.short	37840
+	.short	37841
+	.short	16154
+	.short	16155
+.LCPI52_16:
+	.short	16402
+	.short	16402
+	.short	16402
+	.short	16402
+	.short	16402
+	.short	16402
+	.short	16402
+	.short	16402
+.LCPI52_17:
+	.short	16402
+	.short	16403
+	.short	60632
+	.short	60633
+	.short	31772
+	.short	31773
+	.short	53462
+	.short	53463
+.LCPI52_18:
+	.short	22060
+	.short	22061
+	.short	64230
+	.short	64231
+	.short	27170
+	.short	27171
+	.short	50920
+	.short	50921
+.LCPI52_19:
+	.short	34192
+	.short	34193
+	.short	10586
+	.short	10587
+	.short	47518
+	.short	47519
+	.short	5460
+	.short	5461
+.LCPI52_20:
+	.short	37806
+	.short	37807
+	.short	16228
+	.short	16229
+	.short	44960
+	.short	44961
+	.short	874
+	.short	875
+.LCPI52_21:
+	.short	27800
+	.short	27800
+	.short	27800
+	.short	27800
+	.short	27800
+	.short	27800
+	.short	27800
+	.short	27800
+.LCPI52_22:
+	.short	4312
+	.short	4312
+	.short	4312
+	.short	4312
+	.short	4312
+	.short	4312
+	.short	4312
+	.short	4312
+.LCPI52_23:
+	.short	27250
+	.short	27250
+	.short	27250
+	.short	27250
+	.short	27250
+	.short	27250
+	.short	27250
+	.short	27250
+.LCPI52_24:
+	.short	47360
+	.short	47360
+	.short	47360
+	.short	47360
+	.short	47360
+	.short	47360
+	.short	47360
+	.short	47360
+.LCPI52_25:
+	.short	64952
+	.short	64952
+	.short	64952
+	.short	64952
+	.short	64952
+	.short	64952
+	.short	64952
+	.short	64952
+.LCPI52_26:
+	.short	64308
+	.short	64308
+	.short	64308
+	.short	64308
+	.short	64308
+	.short	64308
+	.short	64308
+	.short	64308
+.LCPI52_27:
+	.short	65336
+	.short	65336
+	.short	65336
+	.short	65336
+	.short	65336
+	.short	65336
+	.short	65336
+	.short	65336
+.LCPI52_28:
+	.short	39198
+	.short	39198
+	.short	39198
+	.short	39198
+	.short	39198
+	.short	39198
+	.short	39198
+	.short	39198
+.LCPI52_29:
+	.long	65535
+	.long	65535
+	.long	65535
+	.long	65535
+.LCPI52_30:
+	.short	2
+	.short	4
+	.short	8
+	.short	16
+	.short	32
+	.short	64
+	.short	128
+	.short	256
+	.section	.text._ZN22reed_solomon_novelpoly5field5f2e164AFFT25__static_init_initializer17heef256c84ca9d3d1E,"ax",@progbits
+	.globl	_ZN22reed_solomon_novelpoly5field5f2e164AFFT25__static_init_initializer17heef256c84ca9d3d1E
+	.p2align	4, 0x90
+	.type	_ZN22reed_solomon_novelpoly5field5f2e164AFFT25__static_init_initializer17heef256c84ca9d3d1E,@function
+_ZN22reed_solomon_novelpoly5field5f2e164AFFT25__static_init_initializer17heef256c84ca9d3d1E:
+	.cfi_startproc
+	pushq	%rbp
+	.cfi_def_cfa_offset 16
+	pushq	%r15
+	.cfi_def_cfa_offset 24
+	pushq	%r14
+	.cfi_def_cfa_offset 32
+	pushq	%r13
+	.cfi_def_cfa_offset 40
+	pushq	%r12
+	.cfi_def_cfa_offset 48
+	pushq	%rbx
+	.cfi_def_cfa_offset 56
+	movq	%rsp, %r11
+	subq	$1179648, %r11
+	.cfi_def_cfa_register %r11
+	.cfi_adjust_cfa_offset 1179648
+.LBB52_1:
+	subq	$4096, %rsp
+	movq	$0, (%rsp)
+	cmpq	%r11, %rsp
+	jne	.LBB52_1
+	subq	$72, %rsp
+	.cfi_def_cfa_register %rsp
+	.cfi_def_cfa_offset 1179776
+	.cfi_offset %rbx, -56
+	.cfi_offset %r12, -48
+	.cfi_offset %r13, -40
+	.cfi_offset %r14, -32
+	.cfi_offset %r15, -24
+	.cfi_offset %rbp, -16
+	leaq	192(%rsp), %rdi
+	xorl	%ebx, %ebx
+	movq	memset@GOTPCREL(%rip), %r14
+	movl	$130944, %edx
+	xorl	%esi, %esi
+	callq	*%r14
+	leaq	131152(%rsp), %rdi
+	movl	$131070, %edx
+	xorl	%esi, %esi
+	callq	*%r14
+	movl	$1, %edi
+	cmpq	$65536, %rdi
+	jae	.LBB52_7
+	.p2align	4, 0x90
+.LBB52_4:
+	leaq	(%rdi,%rdi), %rcx
+	movzwl	%cx, %eax
+	xorq	$45, %rax
+	cmpq	$32768, %rdi
+	cmovbq	%rcx, %rax
+	movw	%bx, 131150(%rsp,%rdi,2)
+	movq	%rbx, %rcx
+	orq	$1, %rcx
+	cmpq	$65535, %rcx
+	je	.LBB52_28
+	cmpq	$65535, %rax
+	ja	.LBB52_6
+	movw	%cx, 131150(%rsp,%rax,2)
+	leaq	(%rax,%rax), %rcx
+	movzwl	%cx, %edi
+	xorq	$45, %rdi
+	cmpq	$32768, %rax
+	cmovbq	%rcx, %rdi
+	addq	$2, %rbx
+	cmpq	$65536, %rdi
+	jb	.LBB52_4
+	jmp	.LBB52_7
+.LBB52_28:
+	movw	$-1, 131150(%rsp)
+	movaps	.LCPI52_0(%rip), %xmm0
+	movaps	%xmm0, 64(%rsp)
+	movaps	.LCPI52_1(%rip), %xmm0
+	movaps	%xmm0, 80(%rsp)
+	movaps	.LCPI52_2(%rip), %xmm0
+	movaps	%xmm0, 96(%rsp)
+	movaps	.LCPI52_3(%rip), %xmm0
+	movaps	%xmm0, 112(%rsp)
+	movaps	.LCPI52_4(%rip), %xmm0
+	movaps	%xmm0, 128(%rsp)
+	movaps	.LCPI52_5(%rip), %xmm0
+	movaps	%xmm0, 144(%rsp)
+	movaps	.LCPI52_6(%rip), %xmm0
+	movaps	%xmm0, 160(%rsp)
+	movaps	.LCPI52_7(%rip), %xmm0
+	movaps	%xmm0, 176(%rsp)
+	movaps	.LCPI52_8(%rip), %xmm0
+	movaps	%xmm0, 192(%rsp)
+	movaps	.LCPI52_9(%rip), %xmm0
+	movaps	%xmm0, 208(%rsp)
+	movaps	.LCPI52_10(%rip), %xmm0
+	movaps	%xmm0, 224(%rsp)
+	movaps	.LCPI52_11(%rip), %xmm0
+	movaps	%xmm0, 240(%rsp)
+	movaps	.LCPI52_12(%rip), %xmm0
+	movaps	%xmm0, 256(%rsp)
+	movaps	.LCPI52_13(%rip), %xmm0
+	movaps	%xmm0, 272(%rsp)
+	movaps	.LCPI52_14(%rip), %xmm0
+	movaps	%xmm0, 288(%rsp)
+	movaps	.LCPI52_15(%rip), %xmm0
+	movaps	%xmm0, 304(%rsp)
+	movaps	.LCPI52_16(%rip), %xmm0
+	movaps	.LCPI52_17(%rip), %xmm1
+	movaps	.LCPI52_18(%rip), %xmm2
+	movaps	%xmm1, 320(%rsp)
+	movaps	%xmm2, 336(%rsp)
+	movaps	.LCPI52_19(%rip), %xmm1
+	movaps	.LCPI52_20(%rip), %xmm2
+	movaps	%xmm1, 352(%rsp)
+	movaps	%xmm2, 368(%rsp)
+	movaps	128(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	144(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 384(%rsp)
+	movaps	%xmm2, 400(%rsp)
+	movaps	160(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	176(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 416(%rsp)
+	movaps	%xmm2, 432(%rsp)
+	movaps	192(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	208(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 448(%rsp)
+	movaps	%xmm2, 464(%rsp)
+	movaps	224(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	240(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 480(%rsp)
+	movaps	%xmm2, 496(%rsp)
+	movaps	256(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	272(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 512(%rsp)
+	movaps	%xmm2, 528(%rsp)
+	movaps	288(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	xorps	304(%rsp), %xmm0
+	movaps	%xmm1, 544(%rsp)
+	movaps	%xmm0, 560(%rsp)
+	movaps	.LCPI52_21(%rip), %xmm0
+	movaps	64(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	80(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 576(%rsp)
+	movaps	%xmm2, 592(%rsp)
+	movaps	96(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	112(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 608(%rsp)
+	movaps	%xmm2, 624(%rsp)
+	movaps	128(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	144(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 640(%rsp)
+	movaps	%xmm2, 656(%rsp)
+	movaps	160(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	176(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 672(%rsp)
+	movaps	%xmm2, 688(%rsp)
+	movaps	192(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	208(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 704(%rsp)
+	movaps	%xmm2, 720(%rsp)
+	movaps	224(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	240(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 736(%rsp)
+	movaps	%xmm2, 752(%rsp)
+	movaps	256(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	272(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 768(%rsp)
+	movaps	%xmm2, 784(%rsp)
+	movaps	288(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	304(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 800(%rsp)
+	movaps	%xmm2, 816(%rsp)
+	movaps	320(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	336(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 832(%rsp)
+	movaps	%xmm2, 848(%rsp)
+	movaps	352(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	368(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 864(%rsp)
+	movaps	%xmm2, 880(%rsp)
+	movaps	384(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	400(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 896(%rsp)
+	movaps	%xmm2, 912(%rsp)
+	movaps	416(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	432(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 928(%rsp)
+	movaps	%xmm2, 944(%rsp)
+	movaps	448(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	464(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 960(%rsp)
+	movaps	%xmm2, 976(%rsp)
+	movaps	480(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	496(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 992(%rsp)
+	movaps	%xmm2, 1008(%rsp)
+	movaps	512(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	movaps	528(%rsp), %xmm2
+	xorps	%xmm0, %xmm2
+	movaps	%xmm1, 1024(%rsp)
+	movaps	%xmm2, 1040(%rsp)
+	movaps	544(%rsp), %xmm1
+	xorps	%xmm0, %xmm1
+	xorps	560(%rsp), %xmm0
+	movaps	%xmm1, 1056(%rsp)
+	movaps	%xmm0, 1072(%rsp)
+	movdqa	.LCPI52_22(%rip), %xmm0
+	movdqa	64(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	80(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1088(%rsp)
+	movdqa	%xmm2, 1104(%rsp)
+	movdqa	96(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	112(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1120(%rsp)
+	movdqa	%xmm2, 1136(%rsp)
+	movdqa	128(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	144(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1152(%rsp)
+	movdqa	%xmm2, 1168(%rsp)
+	movdqa	160(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	176(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1184(%rsp)
+	movdqa	%xmm2, 1200(%rsp)
+	movdqa	192(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	208(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1216(%rsp)
+	movdqa	%xmm2, 1232(%rsp)
+	movdqa	224(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	240(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1248(%rsp)
+	movdqa	%xmm2, 1264(%rsp)
+	movdqa	256(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	272(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1280(%rsp)
+	movdqa	%xmm2, 1296(%rsp)
+	movdqa	288(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	304(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1312(%rsp)
+	movdqa	%xmm2, 1328(%rsp)
+	movdqa	320(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	336(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1344(%rsp)
+	movdqa	%xmm2, 1360(%rsp)
+	movdqa	352(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	368(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1376(%rsp)
+	movdqa	%xmm2, 1392(%rsp)
+	movdqa	384(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	400(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1408(%rsp)
+	movdqa	%xmm2, 1424(%rsp)
+	movdqa	416(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	432(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1440(%rsp)
+	movdqa	%xmm2, 1456(%rsp)
+	movdqa	448(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	464(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1472(%rsp)
+	movdqa	%xmm2, 1488(%rsp)
+	movdqa	480(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	496(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1504(%rsp)
+	movdqa	%xmm2, 1520(%rsp)
+	movdqa	512(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	528(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1536(%rsp)
+	movdqa	%xmm2, 1552(%rsp)
+	movdqa	544(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	560(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1568(%rsp)
+	movdqa	%xmm2, 1584(%rsp)
+	movdqa	576(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	592(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1600(%rsp)
+	movdqa	%xmm2, 1616(%rsp)
+	movdqa	608(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	624(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1632(%rsp)
+	movdqa	%xmm2, 1648(%rsp)
+	movdqa	640(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	656(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1664(%rsp)
+	movdqa	%xmm2, 1680(%rsp)
+	movdqa	672(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	688(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1696(%rsp)
+	movdqa	%xmm2, 1712(%rsp)
+	movdqa	704(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	720(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1728(%rsp)
+	movdqa	%xmm2, 1744(%rsp)
+	movdqa	736(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	752(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1760(%rsp)
+	movdqa	%xmm2, 1776(%rsp)
+	movdqa	768(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	784(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1792(%rsp)
+	movdqa	%xmm2, 1808(%rsp)
+	movdqa	800(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	816(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1824(%rsp)
+	movdqa	%xmm2, 1840(%rsp)
+	movdqa	832(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	848(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1856(%rsp)
+	movdqa	%xmm2, 1872(%rsp)
+	movdqa	864(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	880(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1888(%rsp)
+	movdqa	%xmm2, 1904(%rsp)
+	movdqa	896(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	912(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1920(%rsp)
+	movdqa	%xmm2, 1936(%rsp)
+	movdqa	928(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	944(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1952(%rsp)
+	movdqa	%xmm2, 1968(%rsp)
+	movdqa	960(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	976(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 1984(%rsp)
+	movdqa	%xmm2, 2000(%rsp)
+	movdqa	992(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	1008(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 2016(%rsp)
+	movdqa	%xmm2, 2032(%rsp)
+	movdqa	1024(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	1040(%rsp), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 2048(%rsp)
+	movdqa	%xmm2, 2064(%rsp)
+	movdqa	1056(%rsp), %xmm1
+	pxor	%xmm0, %xmm1
+	pxor	1072(%rsp), %xmm0
+	movdqa	%xmm1, 2080(%rsp)
+	movdqa	%xmm0, 2096(%rsp)
+	movl	$1048, %eax
+	movdqa	.LCPI52_23(%rip), %xmm0
+	.p2align	4, 0x90
+.LBB52_29:
+	movdqa	-2032(%rsp,%rax,2), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	-2016(%rsp,%rax,2), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 16(%rsp,%rax,2)
+	movdqa	%xmm2, 32(%rsp,%rax,2)
+	movdqa	-2000(%rsp,%rax,2), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	-1984(%rsp,%rax,2), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 48(%rsp,%rax,2)
+	movdqa	%xmm2, 64(%rsp,%rax,2)
+	addq	$32, %rax
+	cmpq	$2072, %rax
+	jne	.LBB52_29
+	movl	$2072, %eax
+	movdqa	.LCPI52_24(%rip), %xmm0
+	.p2align	4, 0x90
+.LBB52_31:
+	movdqa	-4080(%rsp,%rax,2), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	-4064(%rsp,%rax,2), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 16(%rsp,%rax,2)
+	movdqa	%xmm2, 32(%rsp,%rax,2)
+	movdqa	-4048(%rsp,%rax,2), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	-4032(%rsp,%rax,2), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 48(%rsp,%rax,2)
+	movdqa	%xmm2, 64(%rsp,%rax,2)
+	addq	$32, %rax
+	cmpq	$4120, %rax
+	jne	.LBB52_31
+	movl	$4120, %eax
+	movdqa	.LCPI52_25(%rip), %xmm0
+	.p2align	4, 0x90
+.LBB52_33:
+	movdqa	-8176(%rsp,%rax,2), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	-8160(%rsp,%rax,2), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 16(%rsp,%rax,2)
+	movdqa	%xmm2, 32(%rsp,%rax,2)
+	movdqa	-8144(%rsp,%rax,2), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	-8128(%rsp,%rax,2), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 48(%rsp,%rax,2)
+	movdqa	%xmm2, 64(%rsp,%rax,2)
+	addq	$32, %rax
+	cmpq	$8216, %rax
+	jne	.LBB52_33
+	movl	$8216, %eax
+	movdqa	.LCPI52_26(%rip), %xmm0
+	.p2align	4, 0x90
+.LBB52_35:
+	movdqa	-16368(%rsp,%rax,2), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	-16352(%rsp,%rax,2), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 16(%rsp,%rax,2)
+	movdqa	%xmm2, 32(%rsp,%rax,2)
+	movdqa	-16336(%rsp,%rax,2), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	-16320(%rsp,%rax,2), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 48(%rsp,%rax,2)
+	movdqa	%xmm2, 64(%rsp,%rax,2)
+	addq	$32, %rax
+	cmpq	$16408, %rax
+	jne	.LBB52_35
+	movl	$16408, %eax
+	movdqa	.LCPI52_27(%rip), %xmm0
+	.p2align	4, 0x90
+.LBB52_37:
+	movdqa	-32752(%rsp,%rax,2), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	-32736(%rsp,%rax,2), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 16(%rsp,%rax,2)
+	movdqa	%xmm2, 32(%rsp,%rax,2)
+	movdqa	-32720(%rsp,%rax,2), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	-32704(%rsp,%rax,2), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 48(%rsp,%rax,2)
+	movdqa	%xmm2, 64(%rsp,%rax,2)
+	addq	$32, %rax
+	cmpq	$32792, %rax
+	jne	.LBB52_37
+	movl	$32792, %eax
+	movdqa	.LCPI52_28(%rip), %xmm0
+	.p2align	4, 0x90
+.LBB52_39:
+	movdqa	-65520(%rsp,%rax,2), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	-65504(%rsp,%rax,2), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 16(%rsp,%rax,2)
+	movdqa	%xmm2, 32(%rsp,%rax,2)
+	movdqa	-65488(%rsp,%rax,2), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	-65472(%rsp,%rax,2), %xmm2
+	pxor	%xmm0, %xmm2
+	movdqa	%xmm1, 48(%rsp,%rax,2)
+	movdqa	%xmm2, 64(%rsp,%rax,2)
+	addq	$32, %rax
+	cmpq	$65560, %rax
+	jne	.LBB52_39
+	movl	$3, %eax
+	.p2align	4, 0x90
+.LBB52_25:
+	movzwl	58(%rsp,%rax,2), %ecx
+	movzwl	131150(%rsp,%rcx,2), %ecx
+	movw	%cx, 58(%rsp,%rax,2)
+	movzwl	60(%rsp,%rax,2), %ecx
+	movzwl	131150(%rsp,%rcx,2), %ecx
+	movw	%cx, 60(%rsp,%rax,2)
+	movzwl	62(%rsp,%rax,2), %ecx
+	movzwl	131150(%rsp,%rcx,2), %ecx
+	movw	%cx, 62(%rsp,%rax,2)
+	movzwl	64(%rsp,%rax,2), %ecx
+	movzwl	131150(%rsp,%rcx,2), %ecx
+	movw	%cx, 64(%rsp,%rax,2)
+	addq	$4, %rax
+	cmpq	$65539, %rax
+	jne	.LBB52_25
+	xorl	%eax, %eax
+	.p2align	4, 0x90
+.LBB52_27:
+	movzwl	64(%rsp,%rax,2), %ecx
+	movw	%ax, 131150(%rsp,%rcx,2)
+	movzwl	66(%rsp,%rax,2), %ecx
+	leal	1(%rax), %edx
+	movw	%dx, 131150(%rsp,%rcx,2)
+	movzwl	68(%rsp,%rax,2), %ecx
+	leal	2(%rax), %edx
+	movw	%dx, 131150(%rsp,%rcx,2)
+	movzwl	70(%rsp,%rax,2), %ecx
+	leal	3(%rax), %edx
+	movw	%dx, 131150(%rsp,%rcx,2)
+	addq	$4, %rax
+	cmpq	$65536, %rax
+	jne	.LBB52_27
+	movzwl	131150(%rsp), %eax
+	movw	%ax, 262220(%rsp)
+	leaq	262222(%rsp), %r12
+	leaq	64(%rsp), %rsi
+	movl	$131072, %edx
+	movq	%r12, %rdi
+	callq	*memcpy@GOTPCREL(%rip)
+	movw	$0, 262222(%rsp)
+	movl	$1, %esi
+	pxor	%xmm0, %xmm0
+	movdqa	.LCPI52_29(%rip), %xmm1
+.LBB52_9:
+	leaq	(%rsi,%rsi), %r9
+	leaq	(,%rsi,4), %rax
+	movq	%rax, (%rsp)
+	movq	%r9, %rax
+	negq	%rax
+	movq	%rax, 56(%rsp)
+	leaq	-1(%rsi), %rax
+	movq	%rax, 8(%rsp)
+	leaq	2(,%rsi,2), %rax
+	movq	%rax, 48(%rsp)
+	movq	%rsi, %r14
+	negq	%r14
+	leaq	(%rsp,%rsi,2), %r15
+	addq	$262222, %r15
+	xorl	%r13d, %r13d
+	xorl	%ebp, %ebp
+	movq	%rsi, %rcx
+	xorl	%edx, %edx
+	.p2align	4, 0x90
+.LBB52_10:
+	cmpq	$65537, %rcx
+	movl	$65536, %edi
+	cmovaeq	%rcx, %rdi
+	leaq	(%rdi,%r14), %r8
+	cmpq	$65537, %rdx
+	movl	$65536, %r11d
+	cmovaeq	%rdx, %r11
+	leaq	(%r11,%r13), %rax
+	cmpq	%rax, %r8
+	cmovbq	%r8, %rax
+	movq	8(%rsp), %r10
+	cmpq	%r10, %rax
+	cmovaeq	%r10, %rax
+	movq	56(%rsp), %rbx
+	imulq	%rbp, %rbx
+	movq	%rbx, %r8
+	subq	%rsi, %r8
+	addq	%r8, %rdi
+	addq	%rbx, %r11
+	cmpq	%r11, %rdi
+	cmovbq	%rdi, %r11
+	cmpq	%r10, %r11
+	cmovaeq	%r10, %r11
+	movq	%rdx, %rdi
+	cmpq	$7, %r11
+	jbe	.LBB52_15
+	movq	(%rsp), %rdi
+	imulq	%rbp, %rdi
+	cmpq	$65537, %rcx
+	movl	$65536, %r10d
+	cmovaeq	%rcx, %r10
+	addq	%r8, %r10
+	cmpq	$65537, %rdx
+	movl	$65536, %r8d
+	cmovaeq	%rdx, %r8
+	addq	%rbx, %r8
+	cmpq	%r8, %r10
+	cmovbq	%r10, %r8
+	movq	48(%rsp), %r10
+	addq	%rdi, %r10
+	movq	8(%rsp), %rbx
+	cmpq	%rbx, %r8
+	cmovaeq	%rbx, %r8
+	addq	%rsp, %r10
+	addq	$262222, %r10
+	leaq	(%r10,%r8,2), %r10
+	leaq	(%rsp,%rdi), %rbx
+	addq	$262222, %rbx
+	cmpq	%r10, %rbx
+	jae	.LBB52_13
+	leaq	(%r9,%rdi), %r10
+	addq	%rsp, %r10
+	addq	$262222, %r10
+	orq	$2, %rdi
+	addq	%rsp, %rdi
+	addq	$262222, %rdi
+	leaq	(%rdi,%r8,2), %r8
+	movq	%rdx, %rdi
+	cmpq	%r8, %r10
+	jb	.LBB52_15
+.LBB52_13:
+	incq	%r11
+	movl	%r11d, %r8d
+	andl	$7, %r8d
+	movl	$8, %edi
+	cmoveq	%rdi, %r8
+	subq	%r8, %r11
+	movq	%r11, %rdi
+	addq	%rdx, %rdi
+	subq	%r8, %rax
+	incq	%rax
+	movq	%r12, %r11
+	.p2align	4, 0x90
+.LBB52_14:
+	movdqu	(%r11), %xmm4
+	movdqa	%xmm4, %xmm5
+	punpckhwd	%xmm0, %xmm5
+	punpcklwd	%xmm0, %xmm4
+	movdqu	(%r11,%r9), %xmm6
+	movdqa	%xmm6, %xmm7
+	punpckhwd	%xmm0, %xmm7
+	punpcklwd	%xmm0, %xmm6
+	movdqa	%xmm4, %xmm2
+	psubd	%xmm6, %xmm2
+	paddd	%xmm1, %xmm2
+	movdqa	%xmm5, %xmm3
+	psubd	%xmm7, %xmm3
+	paddd	%xmm1, %xmm3
+	paddd	%xmm4, %xmm6
+	paddd	%xmm5, %xmm7
+	movdqa	%xmm7, %xmm4
+	psrld	$16, %xmm4
+	movdqa	%xmm6, %xmm5
+	psrld	$16, %xmm5
+	paddd	%xmm6, %xmm5
+	paddd	%xmm7, %xmm4
+	pslld	$16, %xmm4
+	psrad	$16, %xmm4
+	pslld	$16, %xmm5
+	psrad	$16, %xmm5
+	packssdw	%xmm4, %xmm5
+	movdqu	%xmm5, (%r11)
+	movdqa	%xmm3, %xmm4
+	psrld	$16, %xmm4
+	movdqa	%xmm2, %xmm5
+	psrld	$16, %xmm5
+	paddd	%xmm2, %xmm5
+	paddd	%xmm3, %xmm4
+	pslld	$16, %xmm4
+	psrad	$16, %xmm4
+	pslld	$16, %xmm5
+	psrad	$16, %xmm5
+	packssdw	%xmm4, %xmm5
+	movdqu	%xmm5, (%r11,%r9)
+	addq	$16, %r11
+	addq	$-8, %rax
+	jne	.LBB52_14
+	.p2align	4, 0x90
+.LBB52_15:
+	cmpq	$65535, %rdi
+	ja	.LBB52_22
+	leaq	(%rsi,%rdi), %rax
+	cmpq	$65536, %rax
+	jae	.LBB52_24
+	movzwl	262222(%rsp,%rdi,2), %eax
+	movzwl	(%r15,%rdi,2), %r8d
+	movl	%eax, %r10d
+	subl	%r8d, %r10d
+	leal	65535(%r10), %r11d
+	addl	%eax, %r8d
+	movl	%r8d, %eax
+	shrl	$16, %eax
+	addl	%r8d, %eax
+	movw	%ax, 262222(%rsp,%rdi,2)
+	shrl	$16, %r11d
+	leal	(%r11,%r10), %eax
+	addl	$65535, %eax
+	movw	%ax, (%r15,%rdi,2)
+	incq	%rdi
+	cmpq	%rdi, %rcx
+	jne	.LBB52_15
+	addq	%r9, %rdx
+	addq	%r9, %rcx
+	incq	%rbp
+	subq	%r9, %r14
+	subq	%r9, %r13
+	addq	(%rsp), %r12
+	cmpq	$65536, %rdx
+	jb	.LBB52_10
+	cmpq	$32768, %rsi
+	movq	%r9, %rsi
+	leaq	262222(%rsp), %r12
+	jb	.LBB52_9
+	leaq	655434(%rsp), %rbx
+	leaq	64(%rsp), %rsi
+	movq	memcpy@GOTPCREL(%rip), %r12
+	movl	$131072, %edx
+	movq	%rbx, %rdi
+	callq	*%r12
+	leaq	786506(%rsp), %r14
+	leaq	131150(%rsp), %rsi
+	movl	$131072, %edx
+	movq	%r14, %rdi
+	callq	*%r12
+	leaq	917578(%rsp), %r15
+	leaq	262222(%rsp), %rsi
+	movl	$131072, %edx
+	movq	%r15, %rdi
+	callq	*%r12
+	leaq	64(%rsp), %rdi
+	movl	$131072, %edx
+	movq	%rbx, %rsi
+	callq	*%r12
+	leaq	131150(%rsp), %rdi
+	movl	$131072, %edx
+	movq	%r14, %rsi
+	callq	*%r12
+	leaq	262222(%rsp), %rdi
+	movl	$131072, %edx
+	movq	%r15, %rsi
+	callq	*%r12
+	leaq	393294(%rsp), %rdi
+	xorl	%ebx, %ebx
+	movl	$131070, %edx
+	xorl	%esi, %esi
+	callq	*memset@GOTPCREL(%rip)
+	movaps	.LCPI52_30(%rip), %xmm0
+	movaps	%xmm0, 16(%rsp)
+	movabsq	$1152930300766978560, %rax
+	movq	%rax, 32(%rsp)
+	movl	$1073750016, 40(%rsp)
+	movw	$-32768, 44(%rsp)
+	movq	$-1, %rdx
+	jmp	.LBB52_21
+.LBB52_22:
+	leaq	.L__unnamed_37(%rip), %rdx
+	movl	$65536, %esi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB52_24:
+	leaq	.L__unnamed_38(%rip), %rdx
+	movl	$65536, %esi
+	movq	%rax, %rdi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB52_42:
+	incq	%rdx
+	cmpq	$15, %rbx
+	je	.LBB52_43
+.LBB52_21:
+	movq	%rbx, %rax
+	movl	$2, %esi
+	movl	%eax, %ecx
+	shlq	%cl, %rsi
+	movq	$-1, %rdi
+	shlq	%cl, %rdi
+	incq	%rbx
+	notq	%rdi
+	movw	$0, 393294(%rsp,%rdi,2)
+	movq	%rax, %rcx
+	jmp	.LBB52_47
+	.p2align	4, 0x90
+.LBB52_46:
+	leaq	1(%rcx), %r8
+	cmpq	$13, %rcx
+	movq	%r8, %rcx
+	ja	.LBB52_50
+.LBB52_47:
+	movl	$2, %r8d
+	shlq	%cl, %r8
+	movq	%rdi, %r9
+	cmpq	%rdi, %r8
+	jbe	.LBB52_46
+	.p2align	4, 0x90
+.LBB52_48:
+	leaq	(%r9,%r8), %r10
+	cmpq	$65534, %r10
+	ja	.LBB52_61
+	movzwl	16(%rsp,%rcx,2), %r11d
+	xorw	393294(%rsp,%r9,2), %r11w
+	movw	%r11w, 393294(%rsp,%r10,2)
+	addq	%rsi, %r9
+	cmpq	%r8, %r9
+	jb	.LBB52_48
+	jmp	.LBB52_46
+.LBB52_50:
+	movzwl	16(%rsp,%rax,2), %ecx
+	testq	%rcx, %rcx
+	je	.LBB52_51
+	movq	%rcx, %rsi
+	xorq	$1, %rsi
+	movzwl	64(%rsp,%rsi,2), %esi
+	movzwl	64(%rsp,%rcx,2), %ecx
+	addq	%rsi, %rcx
+	movzwl	%cx, %esi
+	shrl	$16, %ecx
+	addq	%rsi, %rcx
+	cmpl	$65535, %ecx
+	ja	.LBB52_62
+	movzwl	131150(%rsp,%rcx,2), %ecx
+	jmp	.LBB52_54
+.LBB52_51:
+	xorl	%ecx, %ecx
+.LBB52_54:
+	movzwl	%cx, %ecx
+	movzwl	64(%rsp,%rcx,2), %ecx
+	notl	%ecx
+	movw	%cx, 16(%rsp,%rax,2)
+	cmpq	$13, %rax
+	ja	.LBB52_42
+	movq	%rdx, %rcx
+	jmp	.LBB52_56
+	.p2align	4, 0x90
+.LBB52_57:
+	xorl	%esi, %esi
+.LBB52_60:
+	movw	%si, 20(%rsp,%rcx,2)
+	incq	%rcx
+	cmpq	$13, %rcx
+	jae	.LBB52_42
+.LBB52_56:
+	movzwl	20(%rsp,%rcx,2), %edi
+	testq	%rdi, %rdi
+	je	.LBB52_57
+	movq	%rdi, %rsi
+	xorq	$1, %rsi
+	movzwl	64(%rsp,%rsi,2), %esi
+	movzwl	16(%rsp,%rax,2), %r8d
+	addl	%esi, %r8d
+	imulq	$131075, %r8, %rsi
+	shrq	$33, %rsi
+	movl	%esi, %r9d
+	shll	$16, %r9d
+	subl	%r9d, %esi
+	addl	%r8d, %esi
+	movzwl	64(%rsp,%rdi,2), %edi
+	addq	%rdi, %rsi
+	movzwl	%si, %edi
+	shrl	$16, %esi
+	addq	%rdi, %rsi
+	cmpl	$65535, %esi
+	ja	.LBB52_62
+	movzwl	131150(%rsp,%rsi,2), %esi
+	jmp	.LBB52_60
+.LBB52_61:
+	leaq	.L__unnamed_104(%rip), %rdx
+	movl	$65535, %edi
+	movl	$65535, %esi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB52_6:
+	movq	%rax, %rdi
+.LBB52_7:
+	leaq	.L__unnamed_105(%rip), %rdx
+	movl	$65536, %esi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.LBB52_43:
+	leaq	524364(%rsp), %rdi
+	movl	$131070, %edx
+	xorl	%esi, %esi
+	callq	*memset@GOTPCREL(%rip)
+	movl	$4, %eax
+.LBB52_44:
+	movzwl	393286(%rsp,%rax,2), %ecx
+	movzwl	64(%rsp,%rcx,2), %ecx
+	movw	%cx, 524356(%rsp,%rax,2)
+	movzwl	393288(%rsp,%rax,2), %ecx
+	movzwl	64(%rsp,%rcx,2), %ecx
+	movw	%cx, 524358(%rsp,%rax,2)
+	movzwl	393290(%rsp,%rax,2), %ecx
+	movzwl	64(%rsp,%rcx,2), %ecx
+	movw	%cx, 524360(%rsp,%rax,2)
+	movzwl	393292(%rsp,%rax,2), %ecx
+	movzwl	64(%rsp,%rcx,2), %ecx
+	movw	%cx, 524362(%rsp,%rax,2)
+	movzwl	393294(%rsp,%rax,2), %ecx
+	movzwl	64(%rsp,%rcx,2), %ecx
+	movw	%cx, 524364(%rsp,%rax,2)
+	addq	$5, %rax
+	cmpq	$65539, %rax
+	jne	.LBB52_44
+	leaq	1048650(%rsp), %rdi
+	leaq	524364(%rsp), %rsi
+	movl	$131070, %edx
+	callq	*%r12
+	leaq	786506(%rsp), %rdi
+	leaq	131150(%rsp), %rsi
+	movl	$131072, %edx
+	callq	*%r12
+	leaq	655434(%rsp), %rbx
+	leaq	64(%rsp), %rsi
+	movl	$131072, %edx
+	movq	%rbx, %rdi
+	callq	*%r12
+	leaq	917578(%rsp), %rdi
+	leaq	262222(%rsp), %rsi
+	movl	$131072, %edx
+	callq	*%r12
+	movq	_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E@GOTPCREL(%rip), %rdi
+	movl	$524286, %edx
+	movq	%rbx, %rsi
+	callq	*%r12
+	addq	$1179720, %rsp
+	.cfi_def_cfa_offset 56
+	popq	%rbx
+	.cfi_def_cfa_offset 48
+	popq	%r12
+	.cfi_def_cfa_offset 40
+	popq	%r13
+	.cfi_def_cfa_offset 32
+	popq	%r14
+	.cfi_def_cfa_offset 24
+	popq	%r15
+	.cfi_def_cfa_offset 16
+	popq	%rbp
+	.cfi_def_cfa_offset 8
+	retq
+.LBB52_62:
+	.cfi_def_cfa_offset 1179776
+	leaq	.L__unnamed_106(%rip), %rdx
+	movl	$65536, %edi
+	movl	$65536, %esi
+	callq	*_ZN4core9panicking18panic_bounds_check17hc7e9fc97a18536b3E@GOTPCREL(%rip)
+	ud2
+.Lfunc_end52:
+	.size	_ZN22reed_solomon_novelpoly5field5f2e164AFFT25__static_init_initializer17heef256c84ca9d3d1E, .Lfunc_end52-_ZN22reed_solomon_novelpoly5field5f2e164AFFT25__static_init_initializer17heef256c84ca9d3d1E
+	.cfi_endproc
+
+	.section	".text._ZN85_$LT$reed_solomon_novelpoly..field..f2e16..Multiplier$u20$as$u20$core..fmt..Debug$GT$3fmt17h5fc988076c741129E","ax",@progbits
+	.globl	_ZN85_$LT$reed_solomon_novelpoly..field..f2e16..Multiplier$u20$as$u20$core..fmt..Debug$GT$3fmt17h5fc988076c741129E
+	.p2align	4, 0x90
+	.type	_ZN85_$LT$reed_solomon_novelpoly..field..f2e16..Multiplier$u20$as$u20$core..fmt..Debug$GT$3fmt17h5fc988076c741129E,@function
+_ZN85_$LT$reed_solomon_novelpoly..field..f2e16..Multiplier$u20$as$u20$core..fmt..Debug$GT$3fmt17h5fc988076c741129E:
+	.cfi_startproc
+	pushq	%rax
+	.cfi_def_cfa_offset 16
+	movq	%rsi, %rax
+	movq	%rdi, (%rsp)
+	leaq	.L__unnamed_107(%rip), %rsi
+	leaq	.L__unnamed_108(%rip), %r8
+	movq	%rsp, %rcx
+	movl	$10, %edx
+	movq	%rax, %rdi
+	callq	*_ZN4core3fmt9Formatter25debug_tuple_field1_finish17h989fcf61d9a53692E@GOTPCREL(%rip)
+	popq	%rcx
+	.cfi_def_cfa_offset 8
+	retq
+.Lfunc_end53:
+	.size	_ZN85_$LT$reed_solomon_novelpoly..field..f2e16..Multiplier$u20$as$u20$core..fmt..Debug$GT$3fmt17h5fc988076c741129E, .Lfunc_end53-_ZN85_$LT$reed_solomon_novelpoly..field..f2e16..Multiplier$u20$as$u20$core..fmt..Debug$GT$3fmt17h5fc988076c741129E
+	.cfi_endproc
+
+	.type	.L__unnamed_10,@object
+	.section	.rodata..L__unnamed_10,"a",@progbits
+	.p2align	3, 0x0
+.L__unnamed_10:
+	.size	.L__unnamed_10, 0
+
+	.type	.L__unnamed_1,@object
+	.section	.data.rel.ro..L__unnamed_1,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_1:
+	.quad	_ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE
+	.asciz	"\b\000\000\000\000\000\000\000\b\000\000\000\000\000\000"
+	.quad	_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03f8b3d393e0291bE
+	.size	.L__unnamed_1, 32
+
+	.type	str.0,@object
+	.section	.rodata.str.0,"a",@progbits
+	.p2align	4, 0x0
+str.0:
+	.ascii	"attempt to divide by zero"
+	.size	str.0, 25
+
+	.type	.L__unnamed_62,@object
+	.section	.rodata..L__unnamed_62,"a",@progbits
+.L__unnamed_62:
+	.ascii	"assertion failed: mid <= self.len()"
+	.size	.L__unnamed_62, 35
+
+	.type	.L__unnamed_7,@object
+	.section	.data.rel.ro..L__unnamed_7,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_7:
+	.quad	_ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE
+	.asciz	" \000\000\000\000\000\000\000\b\000\000\000\000\000\000"
+	.quad	_ZN74_$LT$reed_solomon_novelpoly..errors..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h84ba04202c855280E
+	.size	.L__unnamed_7, 32
+
+	.type	.L__unnamed_2,@object
+	.section	.data.rel.ro..L__unnamed_2,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_2:
+	.quad	_ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE
+	.asciz	"\b\000\000\000\000\000\000\000\b\000\000\000\000\000\000"
+	.quad	_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17ha700999c63438872E
+	.size	.L__unnamed_2, 32
+
+	.type	.L__unnamed_3,@object
+	.section	.data.rel.ro..L__unnamed_3,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_3:
+	.quad	.L__unnamed_10
+	.zero	8
+	.size	.L__unnamed_3, 16
+
+	.type	.L__unnamed_4,@object
+	.section	.rodata..L__unnamed_4,"a",@progbits
+.L__unnamed_4:
+	.ascii	"assertion failed: n * k_po2 <= n_po2 * k"
+	.size	.L__unnamed_4, 40
+
+	.type	.L__unnamed_109,@object
+	.section	.rodata..L__unnamed_109,"a",@progbits
+.L__unnamed_109:
+	.ascii	"/home/alin/code/reed-solomon-novelpoly/reed-solomon-novelpoly/src/novel_poly_basis/mod.rs"
+	.size	.L__unnamed_109, 89
+
+	.type	.L__unnamed_5,@object
+	.section	.data.rel.ro..L__unnamed_5,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_5:
+	.quad	.L__unnamed_109
+	.asciz	"Y\000\000\000\000\000\000\0007\000\000\000\t\000\000"
+	.size	.L__unnamed_5, 24
+
+	.type	.L__unnamed_6,@object
+	.section	.rodata..L__unnamed_6,"a",@progbits
+.L__unnamed_6:
+	.ascii	"this struct is not created with invalid shard number; qed"
+	.size	.L__unnamed_6, 57
+
+	.type	.L__unnamed_8,@object
+	.section	.data.rel.ro..L__unnamed_8,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_8:
+	.quad	.L__unnamed_109
+	.asciz	"Y\000\000\000\000\000\000\000L\000\000\000\016\000\000"
+	.size	.L__unnamed_8, 24
+
+	.type	.L__unnamed_9,@object
+	.section	.data.rel.ro..L__unnamed_9,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_9:
+	.quad	.L__unnamed_109
+	.asciz	"Y\000\000\000\000\000\000\000h\000\000\000\"\000\000"
+	.size	.L__unnamed_9, 24
+
+	.type	.L__unnamed_11,@object
+	.section	.rodata.cst8,"aM",@progbits,8
+	.p2align	3, 0x0
+.L__unnamed_11:
+	.zero	8
+	.size	.L__unnamed_11, 8
+
+	.type	.L__unnamed_110,@object
+	.section	.rodata..L__unnamed_110,"a",@progbits
+.L__unnamed_110:
+	.ascii	"/home/alin/code/reed-solomon-novelpoly/reed-solomon-novelpoly/src/wrapped_shard.rs"
+	.size	.L__unnamed_110, 82
+
+	.type	.L__unnamed_12,@object
+	.section	.data.rel.ro..L__unnamed_12,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_12:
+	.quad	.L__unnamed_110
+	.asciz	"R\000\000\000\000\000\000\000+\000\000\000\t\000\000"
+	.size	.L__unnamed_12, 24
+
+	.type	.L__unnamed_13,@object
+	.section	.data.rel.ro..L__unnamed_13,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_13:
+	.quad	.L__unnamed_110
+	.asciz	"R\000\000\000\000\000\000\0006\000\000\000\t\000\000"
+	.size	.L__unnamed_13, 24
+
+	.type	.L__unnamed_14,@object
+	.section	.rodata..L__unnamed_14,"a",@progbits
+.L__unnamed_14:
+	.ascii	"WantedShardCountTooHigh"
+	.size	.L__unnamed_14, 23
+
+	.type	.L__unnamed_15,@object
+	.section	.rodata..L__unnamed_15,"a",@progbits
+.L__unnamed_15:
+	.ascii	"WantedShardCountTooLow"
+	.size	.L__unnamed_15, 22
+
+	.type	.L__unnamed_16,@object
+	.section	.rodata..L__unnamed_16,"a",@progbits
+.L__unnamed_16:
+	.ascii	"WantedPayloadShardCountTooLow"
+	.size	.L__unnamed_16, 29
+
+	.type	.L__unnamed_17,@object
+	.section	.rodata..L__unnamed_17,"a",@progbits
+.L__unnamed_17:
+	.ascii	"PayloadSizeIsZero"
+	.size	.L__unnamed_17, 17
+
+	.type	.L__unnamed_21,@object
+	.section	.rodata..L__unnamed_21,"a",@progbits
+.L__unnamed_21:
+	.ascii	"NeedMoreShards"
+	.size	.L__unnamed_21, 14
+
+	.type	.L__unnamed_22,@object
+	.section	.rodata.cst4,"aM",@progbits,4
+.L__unnamed_22:
+	.ascii	"have"
+	.size	.L__unnamed_22, 4
+
+	.type	.L__unnamed_19,@object
+	.section	.data.rel.ro..L__unnamed_19,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_19:
+	.quad	_ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE
+	.asciz	"\b\000\000\000\000\000\000\000\b\000\000\000\000\000\000"
+	.quad	_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hda6ef4ff662f905dE
+	.size	.L__unnamed_19, 32
+
+	.type	.L__unnamed_20,@object
+	.section	.rodata..L__unnamed_20,"a",@progbits
+.L__unnamed_20:
+	.ascii	"min"
+	.size	.L__unnamed_20, 3
+
+	.type	.L__unnamed_18,@object
+	.section	.rodata..L__unnamed_18,"a",@progbits
+.L__unnamed_18:
+	.ascii	"all"
+	.size	.L__unnamed_18, 3
+
+	.type	.L__unnamed_24,@object
+	.section	.rodata..L__unnamed_24,"a",@progbits
+.L__unnamed_24:
+	.ascii	"ParamterMustBePowerOf2"
+	.size	.L__unnamed_24, 22
+
+	.type	.L__unnamed_25,@object
+	.section	.rodata..L__unnamed_25,"a",@progbits
+.L__unnamed_25:
+	.byte	110
+	.size	.L__unnamed_25, 1
+
+	.type	.L__unnamed_23,@object
+	.section	.rodata..L__unnamed_23,"a",@progbits
+.L__unnamed_23:
+	.byte	107
+	.size	.L__unnamed_23, 1
+
+	.type	.L__unnamed_27,@object
+	.section	.rodata..L__unnamed_27,"a",@progbits
+.L__unnamed_27:
+	.ascii	"InconsistentShardLengths"
+	.size	.L__unnamed_27, 24
+
+	.type	.L__unnamed_28,@object
+	.section	.rodata..L__unnamed_28,"a",@progbits
+.L__unnamed_28:
+	.ascii	"first"
+	.size	.L__unnamed_28, 5
+
+	.type	.L__unnamed_26,@object
+	.section	.rodata..L__unnamed_26,"a",@progbits
+.L__unnamed_26:
+	.ascii	"other"
+	.size	.L__unnamed_26, 5
+
+	.type	.L__unnamed_111,@object
+	.section	.rodata..L__unnamed_111,"a",@progbits
+.L__unnamed_111:
+	.ascii	"Number of wanted shards "
+	.size	.L__unnamed_111, 24
+
+	.type	.L__unnamed_112,@object
+	.section	.rodata..L__unnamed_112,"a",@progbits
+.L__unnamed_112:
+	.ascii	" exceeds max of 2^16"
+	.size	.L__unnamed_112, 20
+
+	.type	.L__unnamed_29,@object
+	.section	.data.rel.ro..L__unnamed_29,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_29:
+	.quad	.L__unnamed_111
+	.asciz	"\030\000\000\000\000\000\000"
+	.quad	.L__unnamed_112
+	.asciz	"\024\000\000\000\000\000\000"
+	.size	.L__unnamed_29, 32
+
+	.type	.L__unnamed_113,@object
+	.section	.rodata..L__unnamed_113,"a",@progbits
+.L__unnamed_113:
+	.ascii	"Number of wanted shards must be at least 2, but is "
+	.size	.L__unnamed_113, 51
+
+	.type	.L__unnamed_30,@object
+	.section	.data.rel.ro..L__unnamed_30,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_30:
+	.quad	.L__unnamed_113
+	.asciz	"3\000\000\000\000\000\000"
+	.size	.L__unnamed_30, 16
+
+	.type	.L__unnamed_114,@object
+	.section	.rodata..L__unnamed_114,"a",@progbits
+.L__unnamed_114:
+	.ascii	"Number of wanted payload shards must be at least 1, but is "
+	.size	.L__unnamed_114, 59
+
+	.type	.L__unnamed_31,@object
+	.section	.data.rel.ro..L__unnamed_31,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_31:
+	.quad	.L__unnamed_114
+	.asciz	";\000\000\000\000\000\000"
+	.size	.L__unnamed_31, 16
+
+	.type	.L__unnamed_115,@object
+	.section	.rodata..L__unnamed_115,"a",@progbits
+.L__unnamed_115:
+	.ascii	"Size of the payload is zero"
+	.size	.L__unnamed_115, 27
+
+	.type	.L__unnamed_32,@object
+	.section	.data.rel.ro..L__unnamed_32,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_32:
+	.quad	.L__unnamed_115
+	.asciz	"\033\000\000\000\000\000\000"
+	.size	.L__unnamed_32, 16
+
+	.type	.L__unnamed_116,@object
+	.section	.rodata..L__unnamed_116,"a",@progbits
+.L__unnamed_116:
+	.ascii	"Needs at least "
+	.size	.L__unnamed_116, 15
+
+	.type	.L__unnamed_117,@object
+	.section	.rodata..L__unnamed_117,"a",@progbits
+.L__unnamed_117:
+	.ascii	" shards of "
+	.size	.L__unnamed_117, 11
+
+	.type	.L__unnamed_118,@object
+	.section	.rodata..L__unnamed_118,"a",@progbits
+.L__unnamed_118:
+	.ascii	" to recover, have "
+	.size	.L__unnamed_118, 18
+
+	.type	.L__unnamed_33,@object
+	.section	.data.rel.ro..L__unnamed_33,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_33:
+	.quad	.L__unnamed_116
+	.asciz	"\017\000\000\000\000\000\000"
+	.quad	.L__unnamed_117
+	.asciz	"\013\000\000\000\000\000\000"
+	.quad	.L__unnamed_118
+	.asciz	"\022\000\000\000\000\000\000"
+	.size	.L__unnamed_33, 48
+
+	.type	.L__unnamed_119,@object
+	.section	.rodata..L__unnamed_119,"a",@progbits
+.L__unnamed_119:
+	.ascii	"Parameters: n (= "
+	.size	.L__unnamed_119, 17
+
+	.type	.L__unnamed_120,@object
+	.section	.rodata..L__unnamed_120,"a",@progbits
+.L__unnamed_120:
+	.ascii	") and k (= "
+	.size	.L__unnamed_120, 11
+
+	.type	.L__unnamed_121,@object
+	.section	.rodata..L__unnamed_121,"a",@progbits
+.L__unnamed_121:
+	.ascii	") both must be a power of 2"
+	.size	.L__unnamed_121, 27
+
+	.type	.L__unnamed_34,@object
+	.section	.data.rel.ro..L__unnamed_34,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_34:
+	.quad	.L__unnamed_119
+	.asciz	"\021\000\000\000\000\000\000"
+	.quad	.L__unnamed_120
+	.asciz	"\013\000\000\000\000\000\000"
+	.quad	.L__unnamed_121
+	.asciz	"\033\000\000\000\000\000\000"
+	.size	.L__unnamed_34, 48
+
+	.type	.L__unnamed_122,@object
+	.section	.rodata..L__unnamed_122,"a",@progbits
+.L__unnamed_122:
+	.ascii	"Shards do have inconsistent lengths: first = "
+	.size	.L__unnamed_122, 45
+
+	.type	.L__unnamed_123,@object
+	.section	.rodata..L__unnamed_123,"a",@progbits
+.L__unnamed_123:
+	.ascii	", other = "
+	.size	.L__unnamed_123, 10
+
+	.type	.L__unnamed_124,@object
+	.section	.rodata..L__unnamed_124,"a",@progbits
+.L__unnamed_124:
+	.byte	41
+	.size	.L__unnamed_124, 1
+
+	.type	.L__unnamed_35,@object
+	.section	.data.rel.ro..L__unnamed_35,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_35:
+	.quad	.L__unnamed_122
+	.asciz	"-\000\000\000\000\000\000"
+	.quad	.L__unnamed_123
+	.asciz	"\n\000\000\000\000\000\000"
+	.quad	.L__unnamed_124
+	.asciz	"\001\000\000\000\000\000\000"
+	.size	.L__unnamed_35, 48
+
+	.type	.L__unnamed_125,@object
+	.section	.rodata..L__unnamed_125,"a",@progbits
+.L__unnamed_125:
+	.ascii	"/home/alin/code/reed-solomon-novelpoly/reed-solomon-novelpoly/src/field/inc_log_mul.rs"
+	.size	.L__unnamed_125, 86
+
+	.type	.L__unnamed_45,@object
+	.section	.data.rel.ro..L__unnamed_45,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_45:
+	.quad	.L__unnamed_125
+	.asciz	"V\000\000\000\000\000\000\0005\000\000\000\022\000\000"
+	.size	.L__unnamed_45, 24
+
+	.type	.L__unnamed_106,@object
+	.section	.data.rel.ro..L__unnamed_106,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_106:
+	.quad	.L__unnamed_125
+	.asciz	"V\000\000\000\000\000\000\000@\000\000\000\022\000\000"
+	.size	.L__unnamed_106, 24
+
+	.type	.L__unnamed_126,@object
+	.section	.rodata..L__unnamed_126,"a",@progbits
+.L__unnamed_126:
+	.byte	95
+	.size	.L__unnamed_126, 1
+
+	.type	.L__unnamed_36,@object
+	.section	.data.rel.ro..L__unnamed_36,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_36:
+	.quad	.L__unnamed_126
+	.asciz	"\001\000\000\000\000\000\000"
+	.size	.L__unnamed_36, 16
+
+	.type	.L__unnamed_37,@object
+	.section	.data.rel.ro..L__unnamed_37,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_37:
+	.quad	.L__unnamed_125
+	.asciz	"V\000\000\000\000\000\000\000w\000\000\000\"\000\000"
+	.size	.L__unnamed_37, 24
+
+	.type	.L__unnamed_38,@object
+	.section	.data.rel.ro..L__unnamed_38,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_38:
+	.quad	.L__unnamed_125
+	.asciz	"V\000\000\000\000\000\000\000w\000\000\000=\000\000"
+	.size	.L__unnamed_38, 24
+
+	.type	.L__unnamed_127,@object
+	.section	.rodata..L__unnamed_127,"a",@progbits
+.L__unnamed_127:
+	.ascii	"/home/alin/code/reed-solomon-novelpoly/reed-solomon-novelpoly/src/field/inc_afft.rs"
+	.size	.L__unnamed_127, 83
+
+	.type	.L__unnamed_105,@object
+	.section	.data.rel.ro..L__unnamed_105,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_105:
+	.quad	.L__unnamed_127
+	.asciz	"S\000\000\000\000\000\000\000\016\000\000\000\t\000\000"
+	.size	.L__unnamed_105, 24
+
+	.type	.L__unnamed_40,@object
+	.section	.data.rel.ro..L__unnamed_40,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_40:
+	.quad	.L__unnamed_127
+	.asciz	"S\000\000\000\000\000\000\000b\000\000\000\r\000\000"
+	.size	.L__unnamed_40, 24
+
+	.type	.L__unnamed_39,@object
+	.section	.data.rel.ro..L__unnamed_39,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_39:
+	.quad	.L__unnamed_127
+	.asciz	"S\000\000\000\000\000\000\000\\\000\000\000\r\000\000"
+	.size	.L__unnamed_39, 24
+
+	.type	.L__unnamed_46,@object
+	.section	.data.rel.ro..L__unnamed_46,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_46:
+	.quad	.L__unnamed_127
+	.asciz	"S\000\000\000\000\000\000\000\374\000\000\000\025\000\000"
+	.size	.L__unnamed_46, 24
+
+	.type	.L__unnamed_43,@object
+	.section	.data.rel.ro..L__unnamed_43,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_43:
+	.quad	.L__unnamed_127
+	.asciz	"S\000\000\000\000\000\000\000\t\001\000\000\031\000\000"
+	.size	.L__unnamed_43, 24
+
+	.type	.L__unnamed_44,@object
+	.section	.data.rel.ro..L__unnamed_44,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_44:
+	.quad	.L__unnamed_127
+	.asciz	"S\000\000\000\000\000\000\000\t\001\000\000$\000\000"
+	.size	.L__unnamed_44, 24
+
+	.type	.L__unnamed_41,@object
+	.section	.data.rel.ro..L__unnamed_41,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_41:
+	.quad	.L__unnamed_127
+	.asciz	"S\000\000\000\000\000\000\000\361\000\000\000\025\000\000"
+	.size	.L__unnamed_41, 24
+
+	.type	.L__unnamed_42,@object
+	.section	.data.rel.ro..L__unnamed_42,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_42:
+	.quad	.L__unnamed_127
+	.asciz	"S\000\000\000\000\000\000\000\361\000\000\000,\000\000"
+	.size	.L__unnamed_42, 24
+
+	.type	.L__unnamed_51,@object
+	.section	.data.rel.ro..L__unnamed_51,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_51:
+	.quad	.L__unnamed_127
+	.asciz	"S\000\000\000\000\000\000\000m\001\000\000\034\000\000"
+	.size	.L__unnamed_51, 24
+
+	.type	.L__unnamed_49,@object
+	.section	.data.rel.ro..L__unnamed_49,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_49:
+	.quad	.L__unnamed_127
+	.asciz	"S\000\000\000\000\000\000\000~\001\000\000\025\000\000"
+	.size	.L__unnamed_49, 24
+
+	.type	.L__unnamed_50,@object
+	.section	.data.rel.ro..L__unnamed_50,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_50:
+	.quad	.L__unnamed_127
+	.asciz	"S\000\000\000\000\000\000\000~\001\000\000,\000\000"
+	.size	.L__unnamed_50, 24
+
+	.type	.L__unnamed_47,@object
+	.section	.data.rel.ro..L__unnamed_47,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_47:
+	.quad	.L__unnamed_127
+	.asciz	"S\000\000\000\000\000\000\000v\001\000\000\031\000\000"
+	.size	.L__unnamed_47, 24
+
+	.type	.L__unnamed_48,@object
+	.section	.data.rel.ro..L__unnamed_48,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_48:
+	.quad	.L__unnamed_127
+	.asciz	"S\000\000\000\000\000\000\000v\001\000\000$\000\000"
+	.size	.L__unnamed_48, 24
+
+	.type	.L__unnamed_104,@object
+	.section	.data.rel.ro..L__unnamed_104,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_104:
+	.quad	.L__unnamed_127
+	.asciz	"S\000\000\000\000\000\000\000\326\001\000\000\025\000\000"
+	.size	.L__unnamed_104, 24
+
+	.type	.L__unnamed_53,@object
+	.section	.rodata..L__unnamed_53,"a",@progbits
+.L__unnamed_53:
+	.ascii	"assertion failed: k + k <= n"
+	.size	.L__unnamed_53, 28
+
+	.type	.L__unnamed_128,@object
+	.section	.rodata..L__unnamed_128,"a",@progbits
+.L__unnamed_128:
+	.ascii	"/home/alin/code/reed-solomon-novelpoly/reed-solomon-novelpoly/src/field/inc_encode.rs"
+	.size	.L__unnamed_128, 85
+
+	.type	.L__unnamed_54,@object
+	.section	.data.rel.ro..L__unnamed_54,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_54:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000\020\000\000\000\005\000\000"
+	.size	.L__unnamed_54, 24
+
+	.type	.L__unnamed_55,@object
+	.section	.data.rel.ro..L__unnamed_55,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_55:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000\021\000\000\000\005\000\000"
+	.size	.L__unnamed_55, 24
+
+	.type	.L__unnamed_56,@object
+	.section	.data.rel.ro..L__unnamed_56,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_56:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000\022\000\000\000\005\000\000"
+	.size	.L__unnamed_56, 24
+
+	.type	.L__unnamed_57,@object
+	.section	.rodata..L__unnamed_57,"a",@progbits
+.L__unnamed_57:
+	.ascii	"assertion failed: is_power_of_2(n)"
+	.size	.L__unnamed_57, 34
+
+	.type	.L__unnamed_58,@object
+	.section	.data.rel.ro..L__unnamed_58,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_58:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000\024\000\000\000\005\000\000"
+	.size	.L__unnamed_58, 24
+
+	.type	.L__unnamed_59,@object
+	.section	.rodata..L__unnamed_59,"a",@progbits
+.L__unnamed_59:
+	.ascii	"assertion failed: is_power_of_2(k)"
+	.size	.L__unnamed_59, 34
+
+	.type	.L__unnamed_60,@object
+	.section	.data.rel.ro..L__unnamed_60,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_60:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000\025\000\000\000\005\000\000"
+	.size	.L__unnamed_60, 24
+
+	.type	.L__unnamed_61,@object
+	.section	.data.rel.ro..L__unnamed_61,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_61:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000\030\000\000\000\005\000\000"
+	.size	.L__unnamed_61, 24
+
+	.type	.L__unnamed_63,@object
+	.section	.data.rel.ro..L__unnamed_63,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_63:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000\036\000\000\000>\000\000"
+	.size	.L__unnamed_63, 24
+
+	.type	.L__unnamed_52,@object
+	.section	.data.rel.ro..L__unnamed_52,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_52:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000'\000\000\000;\000\000"
+	.size	.L__unnamed_52, 24
+
+	.type	.L__unnamed_67,@object
+	.section	.data.rel.ro..L__unnamed_67,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_67:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000x\000\000\000\f\000\000"
+	.size	.L__unnamed_67, 24
+
+	.type	.L__unnamed_68,@object
+	.section	.data.rel.ro..L__unnamed_68,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_68:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000x\000\000\000'\000\000"
+	.size	.L__unnamed_68, 24
+
+	.type	.L__unnamed_66,@object
+	.section	.data.rel.ro..L__unnamed_66,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_66:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000x\000\000\000\022\000\000"
+	.size	.L__unnamed_66, 24
+
+	.type	.L__unnamed_64,@object
+	.section	.data.rel.ro..L__unnamed_64,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_64:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000|\000\000\000\r\000\000"
+	.size	.L__unnamed_64, 24
+
+	.type	.L__unnamed_65,@object
+	.section	.data.rel.ro..L__unnamed_65,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_65:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000s\000\000\000\t\000\000"
+	.size	.L__unnamed_65, 24
+
+	.type	.L__unnamed_129,@object
+	.section	.rodata..L__unnamed_129,"a",@progbits
+.L__unnamed_129:
+	.ascii	"Algorithm only works for 2^i sizes for N"
+	.size	.L__unnamed_129, 40
+
+	.type	.L__unnamed_72,@object
+	.section	.data.rel.ro..L__unnamed_72,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_72:
+	.quad	.L__unnamed_129
+	.asciz	"(\000\000\000\000\000\000"
+	.size	.L__unnamed_72, 16
+
+	.type	.L__unnamed_73,@object
+	.section	.data.rel.ro..L__unnamed_73,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_73:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000\247\000\000\000\005\000\000"
+	.size	.L__unnamed_73, 24
+
+	.type	.L__unnamed_130,@object
+	.section	.rodata..L__unnamed_130,"a",@progbits
+.L__unnamed_130:
+	.ascii	"Algorithm only works for 2^i sizes for K"
+	.size	.L__unnamed_130, 40
+
+	.type	.L__unnamed_74,@object
+	.section	.data.rel.ro..L__unnamed_74,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_74:
+	.quad	.L__unnamed_130
+	.asciz	"(\000\000\000\000\000\000"
+	.size	.L__unnamed_74, 16
+
+	.type	.L__unnamed_75,@object
+	.section	.data.rel.ro..L__unnamed_75,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_75:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000\250\000\000\000\005\000\000"
+	.size	.L__unnamed_75, 24
+
+	.type	.L__unnamed_76,@object
+	.section	.rodata..L__unnamed_76,"a",@progbits
+.L__unnamed_76:
+	.ascii	"assertion failed: bytes.len() <= k << 1"
+	.size	.L__unnamed_76, 39
+
+	.type	.L__unnamed_77,@object
+	.section	.data.rel.ro..L__unnamed_77,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_77:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000\251\000\000\000\005\000\000"
+	.size	.L__unnamed_77, 24
+
+	.type	.L__unnamed_78,@object
+	.section	.rodata..L__unnamed_78,"a",@progbits
+.L__unnamed_78:
+	.ascii	"assertion failed: k <= n / 2"
+	.size	.L__unnamed_78, 28
+
+	.type	.L__unnamed_79,@object
+	.section	.data.rel.ro..L__unnamed_79,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_79:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000\252\000\000\000\005\000\000"
+	.size	.L__unnamed_79, 24
+
+	.type	.L__unnamed_70,@object
+	.section	.rodata..L__unnamed_70,"a",@progbits
+.L__unnamed_70:
+	.ascii	"assertion failed: is_power_of_2(upper_len)"
+	.size	.L__unnamed_70, 42
+
+	.type	.L__unnamed_71,@object
+	.section	.data.rel.ro..L__unnamed_71,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_71:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000\272\000\000\000\005\000\000"
+	.size	.L__unnamed_71, 24
+
+	.type	.L__unnamed_80,@object
+	.section	.rodata..L__unnamed_80,"a",@progbits
+.L__unnamed_80:
+	.ascii	"assertion failed: upper_len >= bytes_len"
+	.size	.L__unnamed_80, 40
+
+	.type	.L__unnamed_81,@object
+	.section	.data.rel.ro..L__unnamed_81,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_81:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000\273\000\000\000\005\000\000"
+	.size	.L__unnamed_81, 24
+
+	.type	.L__unnamed_82,@object
+	.section	.data.rel.ro..L__unnamed_82,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_82:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000\313\000\000\000\005\000\000"
+	.size	.L__unnamed_82, 24
+
+	.type	.L__unnamed_69,@object
+	.section	.data.rel.ro..L__unnamed_69,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_69:
+	.quad	.L__unnamed_128
+	.asciz	"U\000\000\000\000\000\000\000\302\000\000\000\021\000\000"
+	.size	.L__unnamed_69, 24
+
+	.type	.L__unnamed_131,@object
+	.section	.rodata..L__unnamed_131,"a",@progbits
+.L__unnamed_131:
+	.ascii	"/home/alin/code/reed-solomon-novelpoly/reed-solomon-novelpoly/src/field/inc_reconstruct.rs"
+	.size	.L__unnamed_131, 90
+
+	.type	.L__unnamed_85,@object
+	.section	.data.rel.ro..L__unnamed_85,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_85:
+	.quad	.L__unnamed_131
+	.asciz	"Z\000\000\000\000\000\000\000\b\000\000\000\005\000\000"
+	.size	.L__unnamed_85, 24
+
+	.type	.L__unnamed_86,@object
+	.section	.data.rel.ro..L__unnamed_86,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_86:
+	.quad	.L__unnamed_131
+	.asciz	"Z\000\000\000\000\000\000\000\t\000\000\000\005\000\000"
+	.size	.L__unnamed_86, 24
+
+	.type	.L__unnamed_87,@object
+	.section	.data.rel.ro..L__unnamed_87,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_87:
+	.quad	.L__unnamed_131
+	.asciz	"Z\000\000\000\000\000\000\000\n\000\000\000\005\000\000"
+	.size	.L__unnamed_87, 24
+
+	.type	.L__unnamed_88,@object
+	.section	.data.rel.ro..L__unnamed_88,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_88:
+	.quad	.L__unnamed_131
+	.asciz	"Z\000\000\000\000\000\000\000\013\000\000\000\005\000\000"
+	.size	.L__unnamed_88, 24
+
+	.type	.L__unnamed_89,@object
+	.section	.data.rel.ro..L__unnamed_89,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_89:
+	.quad	.L__unnamed_131
+	.asciz	"Z\000\000\000\000\000\000\000(\000\000\000\005\000\000"
+	.size	.L__unnamed_89, 24
+
+	.type	.L__unnamed_90,@object
+	.section	.rodata..L__unnamed_90,"a",@progbits
+.L__unnamed_90:
+	.ascii	"assertion failed: n >= recover_up_to"
+	.size	.L__unnamed_90, 36
+
+	.type	.L__unnamed_91,@object
+	.section	.data.rel.ro..L__unnamed_91,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_91:
+	.quad	.L__unnamed_131
+	.asciz	"Z\000\000\000\000\000\000\000E\000\000\000\005\000\000"
+	.size	.L__unnamed_91, 24
+
+	.type	.L__unnamed_92,@object
+	.section	.data.rel.ro..L__unnamed_92,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_92:
+	.quad	.L__unnamed_131
+	.asciz	"Z\000\000\000\000\000\000\000F\000\000\000\005\000\000"
+	.size	.L__unnamed_92, 24
+
+	.type	.L__unnamed_84,@object
+	.section	.data.rel.ro..L__unnamed_84,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_84:
+	.quad	.L__unnamed_131
+	.asciz	"Z\000\000\000\000\000\000\000S\000\000\0007\000\000"
+	.size	.L__unnamed_84, 24
+
+	.type	.L__unnamed_83,@object
+	.section	.data.rel.ro..L__unnamed_83,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_83:
+	.quad	.L__unnamed_131
+	.asciz	"Z\000\000\000\000\000\000\000I\000\000\000L\000\000"
+	.size	.L__unnamed_83, 24
+
+	.type	.L__unnamed_96,@object
+	.section	.data.rel.ro..L__unnamed_96,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_96:
+	.quad	.L__unnamed_131
+	.asciz	"Z\000\000\000\000\000\000\000j\000\000\0003\000\000"
+	.size	.L__unnamed_96, 24
+
+	.type	.L__unnamed_95,@object
+	.section	.data.rel.ro..L__unnamed_95,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_95:
+	.quad	.L__unnamed_131
+	.asciz	"Z\000\000\000\000\000\000\000d\000\000\000\023\000\000"
+	.size	.L__unnamed_95, 24
+
+	.type	.L__unnamed_97,@object
+	.section	.data.rel.ro..L__unnamed_97,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_97:
+	.quad	.L__unnamed_131
+	.asciz	"Z\000\000\000\000\000\000\000d\000\000\000-\000\000"
+	.size	.L__unnamed_97, 24
+
+	.type	.L__unnamed_94,@object
+	.section	.data.rel.ro..L__unnamed_94,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_94:
+	.quad	.L__unnamed_131
+	.asciz	"Z\000\000\000\000\000\000\000`\000\000\000\t\000\000"
+	.size	.L__unnamed_94, 24
+
+	.type	.L__unnamed_93,@object
+	.section	.data.rel.ro..L__unnamed_93,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_93:
+	.quad	.L__unnamed_131
+	.asciz	"Z\000\000\000\000\000\000\000]\000\000\000\t\000\000"
+	.size	.L__unnamed_93, 24
+
+	.type	.L__unnamed_99,@object
+	.section	.rodata..L__unnamed_99,"a",@progbits
+.L__unnamed_99:
+	.ascii	"CodeParams"
+	.size	.L__unnamed_99, 10
+
+	.type	.L__unnamed_98,@object
+	.section	.rodata.cst8,"aM",@progbits,8
+.L__unnamed_98:
+	.ascii	"wanted_n"
+	.size	.L__unnamed_98, 8
+
+	.type	.L__unnamed_100,@object
+	.section	.rodata..L__unnamed_100,"a",@progbits
+.L__unnamed_100:
+	.ascii	"ReedSolomon"
+	.size	.L__unnamed_100, 11
+
+	.type	.L__unnamed_102,@object
+	.section	.rodata..L__unnamed_102,"a",@progbits
+.L__unnamed_102:
+	.ascii	"WrappedShard"
+	.size	.L__unnamed_102, 12
+
+	.type	.L__unnamed_103,@object
+	.section	.rodata..L__unnamed_103,"a",@progbits
+.L__unnamed_103:
+	.ascii	"inner"
+	.size	.L__unnamed_103, 5
+
+	.type	.L__unnamed_101,@object
+	.section	.data.rel.ro..L__unnamed_101,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_101:
+	.quad	_ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE
+	.asciz	"\b\000\000\000\000\000\000\000\b\000\000\000\000\000\000"
+	.quad	_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4b55c2857193cb84E
+	.size	.L__unnamed_101, 32
+
+	.type	_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E,@object
+	.section	.bss._ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E,"aw",@nobits
+	.globl	_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E
+	.p2align	1, 0x0
+_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E:
+	.zero	524286
+	.size	_ZN22reed_solomon_novelpoly5field5f2e164AFFT17h01592fd55945f1c1E, 524286
+
+	.type	_ZN22reed_solomon_novelpoly5field5f2e164AFFT51__static_init_constructor___static_init_initializer17heb1d8903642872dbE,@object
+	.section	.init_array.65535,"aw",@init_array
+	.globl	_ZN22reed_solomon_novelpoly5field5f2e164AFFT51__static_init_constructor___static_init_initializer17heb1d8903642872dbE
+	.p2align	3, 0x90
+_ZN22reed_solomon_novelpoly5field5f2e164AFFT51__static_init_constructor___static_init_initializer17heb1d8903642872dbE:
+	.quad	_ZN22reed_solomon_novelpoly5field5f2e164AFFT25__static_init_initializer17heef256c84ca9d3d1E
+	.size	_ZN22reed_solomon_novelpoly5field5f2e164AFFT51__static_init_constructor___static_init_initializer17heb1d8903642872dbE, 8
+
+	.type	.L__unnamed_107,@object
+	.section	.rodata..L__unnamed_107,"a",@progbits
+.L__unnamed_107:
+	.ascii	"Multiplier"
+	.size	.L__unnamed_107, 10
+
+	.type	.L__unnamed_108,@object
+	.section	.data.rel.ro..L__unnamed_108,"aw",@progbits
+	.p2align	3, 0x0
+.L__unnamed_108:
+	.quad	_ZN4core3ptr26drop_in_place$LT$usize$GT$17hb08184d9f1fbfaeeE
+	.asciz	"\b\000\000\000\000\000\000\000\b\000\000\000\000\000\000"
+	.quad	_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb4548768d1434584E
+	.size	.L__unnamed_108, 32
+
+	.hidden	DW.ref.rust_eh_personality
+	.weak	DW.ref.rust_eh_personality
+	.section	.data.DW.ref.rust_eh_personality,"aGw",@progbits,DW.ref.rust_eh_personality,comdat
+	.p2align	3, 0x0
+	.type	DW.ref.rust_eh_personality,@object
+	.size	DW.ref.rust_eh_personality, 8
+DW.ref.rust_eh_personality:
+	.quad	rust_eh_personality
+	.globl	_ZN85_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..fmt..Display$GT$3fmt17h14acab410f045160E
+	.type	_ZN85_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..fmt..Display$GT$3fmt17h14acab410f045160E,@function
+.set _ZN85_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..fmt..Display$GT$3fmt17h14acab410f045160E, _ZN83_$LT$reed_solomon_novelpoly..field..f2e16..Additive$u20$as$u20$core..fmt..Debug$GT$3fmt17h80587c494ba364a6E
+	.globl	_ZN112_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsRef$LT$$u5b$u8$u5d$$GT$$GT$6as_ref17h9ba04e48f6d6b330E
+	.type	_ZN112_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsRef$LT$$u5b$u8$u5d$$GT$$GT$6as_ref17h9ba04e48f6d6b330E,@function
+.set _ZN112_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsRef$LT$$u5b$u8$u5d$$GT$$GT$6as_ref17h9ba04e48f6d6b330E, _ZN112_$LT$reed_solomon_novelpoly..wrapped_shard..WrappedShard$u20$as$u20$core..convert..AsMut$LT$$u5b$u8$u5d$$GT$$GT$6as_mut17h9040ed54cdf1da03E
+	.ident	"rustc version 1.74.0 (79e9716c9 2023-11-13)"
+	.section	".note.GNU-stack","",@progbits
diff --git a/rust.md b/rust.md
new file mode 100644
index 0000000..c4b540e
--- /dev/null
+++ b/rust.md
@@ -0,0 +1,92 @@
+static ONEMASK: u16 = ((1_usize << 16) - 1) as u16;
+
+pub fn mul(this: u16, other: u16, log_table: &[u16; 65536], exp_table: &[u16; 65536]) -> u16 {
+    if this == 0 {
+        return 0;
+    }
+    let log = (log_table[this as usize] as u32) + other as u32;
+    let offset = (log & ONEMASK as u32) + (log >> 16);
+    exp_table[offset as usize]
+}
+
+pub fn inverse_afft(skews: &[u16], data: &mut [u16], size: usize, index: usize, log_table: &[u16; 65536], exp_table: &[u16; 65536]) {
+		// All line references to Algorithm 2 page 6288 of
+		// https://www.citi.sinica.edu.tw/papers/whc/5524-F.pdf
+
+		// Depth of the recursion on line 7 and 8 is given by depart_no
+		// aka 1 << ((k of Algorithm 2) - (i of Algorithm 2)) where
+		// k of Algorithm 1 is read as FIELD_BITS here.
+		// Recusion base layer implicitly imports d_r aka ala line 1.
+		// After this, we start at depth (i of Algorithm 2) = (k of Algorithm 2) - 1
+		// and progress through FIELD_BITS-1 steps, obtaining \Psi_\beta(0,0).
+		let mut depart_no = 1_usize;
+		while depart_no < size {
+			// if depart_no >= 8 {
+			// 	println!("\n\n\nplain/Round depart_no={depart_no}");
+			// 	dbg!(&data);
+			// }
+
+			// Agrees with for loop (j of Algorithm 2) in (0..2^{k-i-1}) from line 3,
+			// except we've j in (depart_no..size).step_by(2*depart_no), meaning
+			// the doubled step compensated for the halve size exponent, and
+			// somehow this j captures the subscript on \omega_{j 2^{i+1}}.	 (TODO)
+			let mut j = depart_no;
+			while j < size {
+				// At this point loops over i in (j - depart_no)..j give a bredth
+				// first loop across the recursion branches from lines 7 and 8,
+				// so the i loop corresponds to r in Algorithm 2.  In fact,
+				// data[i] and data[i + depart_no] together cover everything,
+				// thanks to the outer j loop.
+
+				// Loop on line 3, so i corresponds to j in Algorithm 2
+				let mut i = j - depart_no;
+                while i < j {
+
+                // for i in (j - depart_no)..j {
+					// Line 4, justified by (34) page 6288, but
+					// adding depart_no acts like the r+2^i superscript.
+
+					// if depart_no >= 8  && false{
+					// data[i + depart_no] ^= dbg!(data[dbg!(i)]);
+					// } else {
+					data[i + depart_no] ^= data[i];
+					// }
+                    i+=1;
+				}
+
+				// Algorithm 2 indexs the skew factor in line 5 page 6288
+				// by i and \omega_{j 2^{i+1}}, but not by r explicitly.
+				// We further explore this confusion below. (TODO)
+				let skew =
+				// if depart_no >= 8 && false {
+				// 	dbg!(self.skews[j + index - 1])
+				// } else {
+					skews[j + index - 1]
+				// }
+				;
+				// It's reasonale to skip the loop if skew is zero, but doing so with
+				// all bits set requires justification.	 (TODO)
+				if skew != ONEMASK {
+					// Again loop on line 3, except skew should depend upon i aka j in Algorithm 2 (TODO)
+					for i in (j - depart_no)..j {
+						// Line 5, justified by (35) page 6288, but
+						// adding depart_no acts like the r+2^i superscript.
+						// if depart_no >= 8 && false{
+						// 	data[i] ^= dbg!(dbg!(data[dbg!(i + depart_no)]).mul(skew));
+						// } else {
+						data[i] ^= mul(data[i + depart_no], skew, log_table, exp_table);
+						// }
+					}
+				}
+
+				// if depart_no >= 8 && false{
+				// 	dbg!(&data);
+				// }
+
+				// Increment by double depart_no in agreement with
+				// our updating 2*depart_no elements at this depth.
+				j += depart_no << 1;
+			}
+			depart_no <<= 1;
+		}
+	}
\ No newline at end of file
diff --git a/src/erasure_coding.rs b/src/erasure_coding.rs
index a22b077..35294d0 100644
--- a/src/erasure_coding.rs
+++ b/src/erasure_coding.rs
@@ -188,9 +188,9 @@ pub unsafe extern "C" fn ECCR_Test_MeasurePerformance(
         Ok(p) => p,
         Err(e) => return e,
     };
+    let rs = params.make_encoder();
 
     let (enc, shards) = {
-        let rs = params.make_encoder();
         let start = Instant::now();
         let shards = rs.encode::<WrappedShard>(&encoded[..]).expect(
             "Payload non-empty, shard sizes are uniform, and validator numbers checked; qed",
@@ -199,14 +199,27 @@ pub unsafe extern "C" fn ECCR_Test_MeasurePerformance(
         (end.duration_since(start), shards)
     };
 
+    let threshold = recovery_threshold(n_validators as usize).unwrap();
+    let payload_bytes;
+
     let dec = {
-        let rs = params.make_encoder();
+        // let shards = shards
+        //     .into_iter()
+        //     .enumerate()
+        //     .map(|(index, ws)| {
+        //         if index >= threshold && index <= (threshold * 2) {
+        //             Some(ws)
+        //         } else {
+        //             None
+        //         }
+        //     })
+        //     .collect::<Vec<Option<_>>>();
         let shards = shards
             .into_iter()
             .map(|ws| Some(ws))
             .collect::<Vec<Option<_>>>();
         let now = Instant::now();
-        let payload_bytes = rs.reconstruct(shards).unwrap();
+        payload_bytes = rs.reconstruct(shards).unwrap();
         let new_now = Instant::now();
         new_now.duration_since(now)
     };
diff --git a/src/erasure_coding_new.rs b/src/erasure_coding_new.rs
new file mode 100644
index 0000000..e18233f
--- /dev/null
+++ b/src/erasure_coding_new.rs
@@ -0,0 +1,349 @@
+use novelpoly::f2e16::AFFT;
+use novelpoly::CodeParams;
+use std::os::raw::c_ulong;
+use std::slice;
+use std::time::Instant;
+
+const MAX_VALIDATORS: usize = novelpoly::f2e16::FIELD_SIZE;
+
+/// Errors in erasure coding.
+#[repr(C)]
+#[derive(Debug, Clone, PartialEq)]
+pub enum NPRSResult {
+    /// No error
+    Ok,
+    /// Returned when there are too many validators.
+    TooManyValidators,
+    /// Cannot encode something for zero or one validator
+    NotEnoughValidators,
+    /// Cannot reconstruct: wrong number of validators.
+    WrongValidatorCount,
+    /// Not enough chunks present.
+    NotEnoughChunks,
+    /// Too many chunks present.
+    TooManyChunks,
+    /// Chunks not of uniform length or the chunks are empty.
+    NonUniformChunks,
+    /// An uneven byte-length of a shard is not valid for `GF(2^16)` encoding.
+    UnevenLength,
+    /// Chunk index out of bounds.
+    ChunkIndexOutOfBounds {
+        /// index of invalid chunk
+        chunk_index: c_ulong,
+        /// number of validators
+        n_validators: c_ulong,
+    },
+    /// Bad payload in reconstructed bytes.
+    BadPayload,
+    /// Invalid branch proof.
+    InvalidBranchProof,
+    /// Branch out of bounds.
+    BranchOutOfBounds,
+    /// Unknown error
+    UnknownReconstruction,
+    /// Unknown error
+    UnknownCodeParam,
+}
+
+/// Represent the data array
+#[repr(C)]
+pub struct DataBlock {
+    array: *mut u8,
+    length: c_ulong,
+}
+
+/// Represent chunk of the data
+#[repr(C)]
+pub struct Chunk {
+    data: DataBlock,
+    index: c_ulong,
+}
+
+/// Represent the array of chunks
+#[repr(C)]
+pub struct ChunksList {
+    data: *mut Chunk,
+    count: c_ulong,
+}
+
+/// Obtain a threshold of chunks that should be enough to recover the data.
+pub const fn recovery_threshold(n_validators: usize) -> Result<usize, NPRSResult> {
+    if n_validators > MAX_VALIDATORS {
+        return Err(NPRSResult::TooManyValidators);
+    }
+
+    if n_validators <= 1 {
+        return Err(NPRSResult::NotEnoughValidators);
+    }
+
+    let needed = n_validators.saturating_sub(1) / 3;
+    Ok(needed + 1)
+}
+
+fn code_params(n_validators: usize) -> Result<CodeParams, NPRSResult> {
+    // we need to be able to reconstruct from 1/3 - eps
+
+    let n_wanted = n_validators;
+    let k_wanted = recovery_threshold(n_wanted)?;
+
+    if n_wanted > MAX_VALIDATORS as usize {
+        return Err(NPRSResult::TooManyValidators);
+    }
+
+    CodeParams::derive_parameters(n_wanted, k_wanted).map_err(|e| match e {
+        novelpoly::Error::WantedShardCountTooHigh(_) => NPRSResult::TooManyValidators,
+        novelpoly::Error::WantedShardCountTooLow(_) => NPRSResult::NotEnoughValidators,
+        _ => NPRSResult::UnknownCodeParam,
+    })
+}
+
+/// Obtain a threshold of chunks that should be enough to recover the data.
+/// @param n_validators determines the number of validators to shard data for
+/// @param threshold_out output recovery threshold value
+///
+#[allow(unused_attributes)]
+#[no_mangle]
+pub unsafe extern "C" fn ECCR_get_recovery_threshold(
+    validators_number: c_ulong,
+    threshold_out: *mut c_ulong,
+) -> NPRSResult {
+    debug_assert!(!threshold_out.is_null());
+
+    let n_validators = validators_number as usize;
+    match recovery_threshold(n_validators) {
+        Ok(needed) => {
+            *threshold_out = needed as c_ulong;
+            return NPRSResult::Ok;
+        }
+        Err(e) => return e,
+    }
+}
+
+/// Cleans the data block
+#[allow(unused_attributes)]
+#[no_mangle]
+pub unsafe extern "C" fn ECCR_deallocate_data_block(data: *mut DataBlock) {
+    debug_assert!(!data.is_null());
+    debug_assert!(!(*data).array.is_null());
+    drop(Box::from_raw((*data).array));
+}
+
+/// Cleans the data in chunk
+#[allow(unused_attributes)]
+#[no_mangle]
+pub unsafe extern "C" fn ECCR_deallocate_chunk(data: *mut Chunk) {
+    debug_assert!(!data.is_null());
+    ECCR_deallocate_data_block(&mut (*data).data);
+}
+
+/// Cleans the data allocated for the chunk list
+#[allow(unused_attributes)]
+#[no_mangle]
+pub unsafe extern "C" fn ECCR_deallocate_chunk_list(chunk_list: *mut ChunksList) {
+    debug_assert!(!chunk_list.is_null());
+    debug_assert!(!(*chunk_list).data.is_null());
+    let data = std::mem::transmute::<*mut ChunksList, &mut ChunksList>(chunk_list);
+    {
+        let chunks = slice::from_raw_parts_mut(data.data, data.count as usize);
+        for chunk in chunks.iter_mut() {
+            ECCR_deallocate_chunk(chunk);
+        }
+    }
+    drop(Box::from_raw(data.data));
+}
+
+/// Creates AFFT table and copies it to output..
+///
+/// Works only up to 65536 samples.
+#[allow(unused_attributes)]
+#[no_mangle]
+pub unsafe extern "C" fn ECCR_AFFT_Table(output: *mut [u16; 65535]) -> NPRSResult {
+    let skews = AFFT.skews.clone();
+    assert_eq!((*output).len(), skews.len());
+
+    let s =
+        std::mem::transmute::<&[novelpoly::f2e16::Multiplier; 65535], *const [u16; 65535]>(&skews);
+
+    *output = *s;
+    NPRSResult::Ok
+}
+
+/// Test method to measure performance
+#[allow(unused_attributes)]
+#[no_mangle]
+pub unsafe extern "C" fn ECCR_Test_MeasurePerformance(
+    message: Option<&DataBlock>,
+    n_validators: c_ulong,
+    usEncoding: Option<&mut c_ulong>,
+    usDecoding: Option<&mut c_ulong>,
+) -> NPRSResult {
+    let message = if let Some(message) = message {
+        message
+    } else {
+        return NPRSResult::BadPayload;
+    };
+
+    let encoded = slice::from_raw_parts(message.array, message.length as usize);
+    let params = match code_params(n_validators as usize) {
+        Ok(p) => p,
+        Err(e) => return e,
+    };
+    let rs = params.make_encoder();
+
+    let (enc, shards) = {
+        let start = Instant::now();
+        let shards = rs.encode(&encoded[..]).expect(
+            "Payload non-empty, shard sizes are uniform, and validator numbers checked; qed",
+        );
+        let end = Instant::now();
+        (end.duration_since(start), shards)
+    };
+
+    // let threshold = recovery_threshold(n_validators as usize).unwrap();
+
+    // let dec = {
+    //     let shards = shards
+    //         .into_iter()
+    //         .enumerate()
+    //         .map(|(index, ws)| if index >= threshold && index <= (threshold * 2) {
+    //             Some(ws)
+    //         } else {
+    //             None
+    //         })
+    //         .collect::<Vec<Option<_>>>();
+    //     // let shards = shards.into_iter().map(|shard| shard.map(|s| s.into_inner())).collect();
+    //     let now = Instant::now();
+    //     let payload_bytes = rs.reconstruct(shards).unwrap();
+    //     let new_now = Instant::now();
+    //     new_now.duration_since(now)
+    // };
+
+    usEncoding.map(|val| *val = enc.as_micros() as u64);
+    // usDecoding.map(|val| *val = dec.as_micros() as u64);
+    NPRSResult::Ok
+}
+
+/// Obtain erasure-coded chunks, one for each validator.
+///
+/// Works only up to 65536 validators, and `n_validators` must be non-zero.
+#[allow(unused_attributes)]
+#[no_mangle]
+pub unsafe extern "C" fn ECCR_obtain_chunks(
+    validators_number: c_ulong,
+    message: *const DataBlock,
+    output: *mut ChunksList,
+) -> NPRSResult {
+    debug_assert!(!message.is_null());
+    debug_assert!(!output.is_null());
+    debug_assert!(!(*message).array.is_null());
+    debug_assert!(!(*message).length > 0);
+
+    let n_validators = validators_number as usize;
+    let encoded = slice::from_raw_parts((*message).array, (*message).length as usize);
+    let params = match code_params(n_validators) {
+        Ok(p) => p,
+        Err(e) => return e,
+    };
+
+    let shards = params
+        .make_encoder()
+        .encode(&encoded[..])
+        .expect("Payload non-empty, shard sizes are uniform, and validator numbers checked; qed");
+
+    let mut output_chunks = vec![];
+    for (index, name) in shards.into_iter().enumerate() {
+        let mut v = name;
+        let db = DataBlock {
+            array: v.as_mut_ptr(),
+            length: v.len() as _,
+        };
+        let chunk = Chunk {
+            data: db,
+            index: index as _,
+        };
+        std::mem::forget(v);
+        output_chunks.push(chunk);
+    }
+
+    let o = std::mem::transmute::<*mut ChunksList, &mut ChunksList>(output);
+    o.data = output_chunks.as_mut_ptr();
+    o.count = output_chunks.len() as _;
+    std::mem::forget(output_chunks);
+
+    NPRSResult::Ok
+}
+
+/// Reconstruct data from a set of chunks.
+///
+/// Provide an iterator containing chunk data and the corresponding index.
+/// The indices of the present chunks must be indicated. If too few chunks
+/// are provided, recovery is not possible.
+///
+/// Works only up to 65536 validators, and `n_validators` must be non-zero.
+#[allow(unused_attributes)]
+#[no_mangle]
+pub unsafe extern "C" fn ECCR_reconstruct(
+    validators_number: c_ulong,
+    input_chunks: *const ChunksList,
+    outdata: *mut DataBlock,
+) -> NPRSResult {
+    debug_assert!(!outdata.is_null());
+    debug_assert!(!input_chunks.is_null());
+    debug_assert!(!(*input_chunks).data.is_null());
+    debug_assert!(!(*input_chunks).count > 0);
+
+    let n_validators = validators_number as usize;
+    let params = match code_params(n_validators) {
+        Ok(p) => p,
+        Err(e) => return e,
+    };
+    let mut received_shards: Vec<Option<Vec<u8>>> = vec![None; n_validators];
+    let mut shard_len = None;
+    let chunks = slice::from_raw_parts((*input_chunks).data, (*input_chunks).count as usize);
+
+    for chunk in chunks.into_iter().take(n_validators) {
+        if chunk.index as usize >= n_validators {
+            return NPRSResult::ChunkIndexOutOfBounds {
+                chunk_index: chunk.index,
+                n_validators: n_validators as u64,
+            };
+        }
+
+        if chunk.data.array.is_null() || chunk.data.length == 0 {
+            continue;
+        }
+
+        let shard_len = shard_len.get_or_insert_with(|| chunk.data.length);
+        if *shard_len % 2 != 0 {
+            return NPRSResult::UnevenLength;
+        }
+
+        if *shard_len != chunk.data.length || *shard_len == 0 {
+            return NPRSResult::NonUniformChunks;
+        }
+
+        received_shards[chunk.index as usize] =
+            Some(slice::from_raw_parts(chunk.data.array, chunk.data.length as usize).to_vec());
+    }
+
+    let mut payload_bytes = match params.make_encoder().reconstruct(received_shards) {
+        Err(e) => match e {
+            novelpoly::Error::NeedMoreShards { .. } => return NPRSResult::NotEnoughChunks,
+            novelpoly::Error::ParamterMustBePowerOf2 { .. } => return NPRSResult::UnevenLength,
+            novelpoly::Error::WantedShardCountTooHigh(_) => return NPRSResult::TooManyValidators,
+            novelpoly::Error::WantedShardCountTooLow(_) => return NPRSResult::NotEnoughValidators,
+            novelpoly::Error::PayloadSizeIsZero { .. } => return NPRSResult::BadPayload,
+            novelpoly::Error::InconsistentShardLengths { .. } => {
+                return NPRSResult::NonUniformChunks
+            }
+            _ => return NPRSResult::UnknownReconstruction,
+        },
+        Ok(payload_bytes) => payload_bytes,
+    };
+
+    (*outdata).array = payload_bytes.as_mut_ptr();
+    (*outdata).length = payload_bytes.len() as _;
+    std::mem::forget(payload_bytes);
+
+    NPRSResult::Ok
+}
